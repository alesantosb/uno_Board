
_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008958  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  08008a94  08008a94  00009a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008d08  08008d08  00009d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008d10  08008d10  00009d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08008d14  08008d14  00009d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000038  20000008  08008d18  0000a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000040  08008d50  0000a040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000078  08008d85  0000a078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000054c  2000008c  08008d96  0000a08c  2**2
                  ALLOC
 10 ._user_heap_stack 00001400  200005d8  08008d96  0000a5d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000aa67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0000b000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0000b000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08008d96  0000a1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00026a41  00000000  00000000  0000aa97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005521  00000000  00000000  000314d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002590  00000000  00000000  00036a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001c84  00000000  00000000  00038f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002b808  00000000  00000000  0003ac14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00026b6a  00000000  00000000  0006641c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000ff7de  00000000  00000000  0008cf86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0018c764  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00009c9c  00000000  00000000  0018c7a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000077  00000000  00000000  00196444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000008c 	.word	0x2000008c
 8000158:	00000000 	.word	0x00000000
 800015c:	08008a7c 	.word	0x08008a7c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000090 	.word	0x20000090
 8000178:	08008a7c 	.word	0x08008a7c

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000192:	4b0b      	ldr	r3, [pc, #44]	@ (80001c0 <APPD_EnableCPU2+0x34>)
 8000194:	1d3c      	adds	r4, r7, #4
 8000196:	461d      	mov	r5, r3
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a0:	c403      	stmia	r4!, {r0, r1}
 80001a2:	8022      	strh	r2, [r4, #0]
 80001a4:	3402      	adds	r4, #2
 80001a6:	0c13      	lsrs	r3, r2, #16
 80001a8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001aa:	f006 ffd5 	bl	8007158 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4618      	mov	r0, r3
 80001b2:	f006 fa66 	bl	8006682 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001b6:	bf00      	nop
}
 80001b8:	3720      	adds	r7, #32
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bdb0      	pop	{r4, r5, r7, pc}
 80001be:	bf00      	nop
 80001c0:	08008a94 	.word	0x08008a94

080001c4 <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 80001c8:	4b05      	ldr	r3, [pc, #20]	@ (80001e0 <LL_PWR_SMPS_Enable+0x1c>)
 80001ca:	69db      	ldr	r3, [r3, #28]
 80001cc:	4a04      	ldr	r2, [pc, #16]	@ (80001e0 <LL_PWR_SMPS_Enable+0x1c>)
 80001ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80001d2:	61d3      	str	r3, [r2, #28]
}
 80001d4:	bf00      	nop
 80001d6:	46bd      	mov	sp, r7
 80001d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop
 80001e0:	58000400 	.word	0x58000400

080001e4 <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 80001ec:	4b06      	ldr	r3, [pc, #24]	@ (8000208 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80001ee:	69db      	ldr	r3, [r3, #28]
 80001f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80001f4:	4904      	ldr	r1, [pc, #16]	@ (8000208 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4313      	orrs	r3, r2
 80001fa:	61cb      	str	r3, [r1, #28]
}
 80001fc:	bf00      	nop
 80001fe:	370c      	adds	r7, #12
 8000200:	46bd      	mov	sp, r7
 8000202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000206:	4770      	bx	lr
 8000208:	58000400 	.word	0x58000400

0800020c <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 800020c:	b480      	push	{r7}
 800020e:	b087      	sub	sp, #28
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8000214:	4b18      	ldr	r3, [pc, #96]	@ (8000278 <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	0a1b      	lsrs	r3, r3, #8
 800021a:	f003 030f 	and.w	r3, r3, #15
 800021e:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if (OutputVoltageLevel_calibration == 0UL)
 8000220:	68fb      	ldr	r3, [r7, #12]
 8000222:	2b00      	cmp	r3, #0
 8000224:	d108      	bne.n	8000238 <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 8000226:	4b15      	ldr	r3, [pc, #84]	@ (800027c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000228:	69db      	ldr	r3, [r3, #28]
 800022a:	f023 020f 	bic.w	r2, r3, #15
 800022e:	4913      	ldr	r1, [pc, #76]	@ (800027c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4313      	orrs	r3, r2
 8000234:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 8000236:	e019      	b.n	800026c <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	3b06      	subs	r3, #6
 800023c:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	693a      	ldr	r2, [r7, #16]
 8000242:	4413      	add	r3, r2
 8000244:	617b      	str	r3, [r7, #20]
    if (OutputVoltageLevelTrimmed < 0)
 8000246:	697b      	ldr	r3, [r7, #20]
 8000248:	2b00      	cmp	r3, #0
 800024a:	da02      	bge.n	8000252 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 800024c:	2300      	movs	r3, #0
 800024e:	617b      	str	r3, [r7, #20]
 8000250:	e004      	b.n	800025c <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if (OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8000252:	697b      	ldr	r3, [r7, #20]
 8000254:	2b0f      	cmp	r3, #15
 8000256:	dd01      	ble.n	800025c <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 8000258:	230f      	movs	r3, #15
 800025a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 800025c:	4b07      	ldr	r3, [pc, #28]	@ (800027c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800025e:	69db      	ldr	r3, [r3, #28]
 8000260:	f023 020f 	bic.w	r2, r3, #15
 8000264:	697b      	ldr	r3, [r7, #20]
 8000266:	4905      	ldr	r1, [pc, #20]	@ (800027c <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8000268:	4313      	orrs	r3, r2
 800026a:	61cb      	str	r3, [r1, #28]
}
 800026c:	bf00      	nop
 800026e:	371c      	adds	r7, #28
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	1fff7558 	.word	0x1fff7558
 800027c:	58000400 	.word	0x58000400

08000280 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8000288:	4b07      	ldr	r3, [pc, #28]	@ (80002a8 <LL_C2_PWR_SetPowerMode+0x28>)
 800028a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800028e:	f023 0207 	bic.w	r2, r3, #7
 8000292:	4905      	ldr	r1, [pc, #20]	@ (80002a8 <LL_C2_PWR_SetPowerMode+0x28>)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4313      	orrs	r3, r2
 8000298:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	58000400 	.word	0x58000400

080002ac <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80002b4:	4b06      	ldr	r3, [pc, #24]	@ (80002d0 <LL_EXTI_EnableIT_32_63+0x24>)
 80002b6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80002ba:	4905      	ldr	r1, [pc, #20]	@ (80002d0 <LL_EXTI_EnableIT_32_63+0x24>)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4313      	orrs	r3, r2
 80002c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80002c4:	bf00      	nop
 80002c6:	370c      	adds	r7, #12
 80002c8:	46bd      	mov	sp, r7
 80002ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ce:	4770      	bx	lr
 80002d0:	58000800 	.word	0x58000800

080002d4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80002dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80002e0:	4a0a      	ldr	r2, [pc, #40]	@ (800030c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80002e2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80002e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80002ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80002ee:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	021b      	lsls	r3, r3, #8
 80002f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80002fa:	4313      	orrs	r3, r2
 80002fc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	cafecafe 	.word	0xcafecafe

08000310 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8000322:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4313      	orrs	r3, r2
 800032a:	608b      	str	r3, [r1, #8]
}
 800032c:	bf00      	nop
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800033c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000344:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800034c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr

0800035a <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800035e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000366:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800036a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800036e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8000372:	bf00      	nop
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr

0800037c <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8000380:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000384:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000388:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800038c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8000390:	d101      	bne.n	8000396 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8000392:	2301      	movs	r3, #1
 8000394:	e000      	b.n	8000398 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8000396:	2300      	movs	r3, #0
}
 8000398:	4618      	mov	r0, r3
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr

080003a2 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80003a2:	b480      	push	{r7}
 80003a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80003a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80003aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80003ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80003b6:	d101      	bne.n	80003bc <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80003b8:	2301      	movs	r3, #1
 80003ba:	e000      	b.n	80003be <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80003bc:	2300      	movs	r3, #0
}
 80003be:	4618      	mov	r0, r3
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr

080003c8 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b085      	sub	sp, #20
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80003d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80003d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80003d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4313      	orrs	r3, r2
 80003de:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80003e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80003e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4013      	ands	r3, r2
 80003ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003ec:	68fb      	ldr	r3, [r7, #12]
}
 80003ee:	bf00      	nop
 80003f0:	3714      	adds	r7, #20
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
	...

080003fc <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8000400:	4b04      	ldr	r3, [pc, #16]	@ (8000414 <LL_DBGMCU_GetDeviceID+0x18>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8000408:	4618      	mov	r0, r3
 800040a:	46bd      	mov	sp, r7
 800040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	e0042000 	.word	0xe0042000

08000418 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 800041c:	4b04      	ldr	r3, [pc, #16]	@ (8000430 <LL_DBGMCU_GetRevisionID+0x18>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	0c1b      	lsrs	r3, r3, #16
 8000422:	b29b      	uxth	r3, r3
}
 8000424:	4618      	mov	r0, r3
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	e0042000 	.word	0xe0042000

08000434 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	685a      	ldr	r2, [r3, #4]
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	041b      	lsls	r3, r3, #16
 8000446:	431a      	orrs	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	605a      	str	r2, [r3, #4]
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr

08000458 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	685a      	ldr	r2, [r3, #4]
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	431a      	orrs	r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	605a      	str	r2, [r3, #4]
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr

0800047a <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800047a:	b480      	push	{r7}
 800047c:	b083      	sub	sp, #12
 800047e:	af00      	add	r7, sp, #0
 8000480:	6078      	str	r0, [r7, #4]
 8000482:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	695a      	ldr	r2, [r3, #20]
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	041b      	lsls	r3, r3, #16
 800048c:	431a      	orrs	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	615a      	str	r2, [r3, #20]
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr

0800049e <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800049e:	b480      	push	{r7}
 80004a0:	b083      	sub	sp, #12
 80004a2:	af00      	add	r7, sp, #0
 80004a4:	6078      	str	r0, [r7, #4]
 80004a6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	695a      	ldr	r2, [r3, #20]
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	431a      	orrs	r2, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	615a      	str	r2, [r3, #20]
}
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004be:	4770      	bx	lr

080004c0 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	683a      	ldr	r2, [r7, #0]
 80004ce:	609a      	str	r2, [r3, #8]
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr

080004dc <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	683a      	ldr	r2, [r7, #0]
 80004ea:	619a      	str	r2, [r3, #24]
}
 80004ec:	bf00      	nop
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f6:	4770      	bx	lr

080004f8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	22ff      	movs	r2, #255	@ 0xff
 8000504:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000510:	4770      	bx	lr

08000512 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8000512:	b480      	push	{r7}
 8000514:	b083      	sub	sp, #12
 8000516:	af00      	add	r7, sp, #0
 8000518:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	22ca      	movs	r2, #202	@ 0xca
 800051e:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2253      	movs	r2, #83	@ 0x53
 8000524:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8000532:	b480      	push	{r7}
 8000534:	b083      	sub	sp, #12
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
 800053a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	f023 0207 	bic.w	r2, r3, #7
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	431a      	orrs	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	609a      	str	r2, [r3, #8]
}
 800054c:	bf00      	nop
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800055c:	4b04      	ldr	r3, [pc, #16]	@ (8000570 <MX_APPE_Config+0x18>)
 800055e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000562:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8000564:	f000 f829 	bl	80005ba <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8000568:	f000 f868 	bl	800063c <Config_HSE>

  return;
 800056c:	bf00      	nop
}
 800056e:	bd80      	pop	{r7, pc}
 8000570:	58004000 	.word	0x58004000

08000574 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8000578:	f000 f874 	bl	8000664 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 800057c:	f000 f88c 	bl	8000698 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000580:	4903      	ldr	r1, [pc, #12]	@ (8000590 <MX_APPE_Init+0x1c>)
 8000582:	2000      	movs	r0, #0
 8000584:	f000 fdc4 	bl	8001110 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  //APPD_Init();
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000588:	f000 f894 	bl	80006b4 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 800058c:	bf00      	nop
}
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200001e8 	.word	0x200001e8

08000594 <Init_Smps>:

void Init_Smps(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 8000598:	2000      	movs	r0, #0
 800059a:	f7ff fe23 	bl	80001e4 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 800059e:	2004      	movs	r0, #4
 80005a0:	f7ff fe34 	bl	800020c <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 80005a4:	f7ff fe0e 	bl	80001c4 <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 80005a8:	bf00      	nop
}
 80005aa:	bd80      	pop	{r7, pc}

080005ac <Init_Exti>:

void Init_Exti(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80005b0:	2050      	movs	r0, #80	@ 0x50
 80005b2:	f7ff fe7b 	bl	80002ac <LL_EXTI_EnableIT_32_63>

  return;
 80005b6:	bf00      	nop
}
 80005b8:	bd80      	pop	{r7, pc}

080005ba <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80005be:	f000 f804 	bl	80005ca <Reset_BackupDomain>

  Reset_IPCC();
 80005c2:	f000 f819 	bl	80005f8 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80005c6:	bf00      	nop
}
 80005c8:	bd80      	pop	{r7, pc}

080005ca <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80005ce:	f7ff fed5 	bl	800037c <LL_RCC_IsActiveFlag_PINRST>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d00d      	beq.n	80005f4 <Reset_BackupDomain+0x2a>
 80005d8:	f7ff fee3 	bl	80003a2 <LL_RCC_IsActiveFlag_SFTRST>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d108      	bne.n	80005f4 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80005e2:	f002 fe8d 	bl	8003300 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80005e6:	f002 fe8b 	bl	8003300 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80005ea:	f7ff fea5 	bl	8000338 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80005ee:	f7ff feb4 	bl	800035a <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80005f2:	bf00      	nop
 80005f4:	bf00      	nop
}
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80005fc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000600:	f7ff fee2 	bl	80003c8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8000604:	213f      	movs	r1, #63	@ 0x3f
 8000606:	480c      	ldr	r0, [pc, #48]	@ (8000638 <Reset_IPCC+0x40>)
 8000608:	f7ff ff5a 	bl	80004c0 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 800060c:	213f      	movs	r1, #63	@ 0x3f
 800060e:	480a      	ldr	r0, [pc, #40]	@ (8000638 <Reset_IPCC+0x40>)
 8000610:	f7ff ff64 	bl	80004dc <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8000614:	213f      	movs	r1, #63	@ 0x3f
 8000616:	4808      	ldr	r0, [pc, #32]	@ (8000638 <Reset_IPCC+0x40>)
 8000618:	f7ff ff0c 	bl	8000434 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 800061c:	213f      	movs	r1, #63	@ 0x3f
 800061e:	4806      	ldr	r0, [pc, #24]	@ (8000638 <Reset_IPCC+0x40>)
 8000620:	f7ff ff2b 	bl	800047a <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8000624:	213f      	movs	r1, #63	@ 0x3f
 8000626:	4804      	ldr	r0, [pc, #16]	@ (8000638 <Reset_IPCC+0x40>)
 8000628:	f7ff ff16 	bl	8000458 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 800062c:	213f      	movs	r1, #63	@ 0x3f
 800062e:	4802      	ldr	r0, [pc, #8]	@ (8000638 <Reset_IPCC+0x40>)
 8000630:	f7ff ff35 	bl	800049e <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8000634:	bf00      	nop
}
 8000636:	bd80      	pop	{r7, pc}
 8000638:	58000c00 	.word	0x58000c00

0800063c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8000642:	2000      	movs	r0, #0
 8000644:	f006 fe14 	bl	8007270 <OTP_Read>
 8000648:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d005      	beq.n	800065c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	799b      	ldrb	r3, [r3, #6]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fe3d 	bl	80002d4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800065a:	bf00      	nop
 800065c:	bf00      	nop
}
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <System_Init>:

static void System_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  Init_Smps();
 8000668:	f7ff ff94 	bl	8000594 <Init_Smps>

  Init_Exti();
 800066c:	f7ff ff9e 	bl	80005ac <Init_Exti>

  Init_Rtc();
 8000670:	f000 f802 	bl	8000678 <Init_Rtc>

  return;
 8000674:	bf00      	nop
}
 8000676:	bd80      	pop	{r7, pc}

08000678 <Init_Rtc>:

static void Init_Rtc(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800067c:	4805      	ldr	r0, [pc, #20]	@ (8000694 <Init_Rtc+0x1c>)
 800067e:	f7ff ff48 	bl	8000512 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8000682:	2100      	movs	r1, #0
 8000684:	4803      	ldr	r0, [pc, #12]	@ (8000694 <Init_Rtc+0x1c>)
 8000686:	f7ff ff54 	bl	8000532 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800068a:	4802      	ldr	r0, [pc, #8]	@ (8000694 <Init_Rtc+0x1c>)
 800068c:	f7ff ff34 	bl	80004f8 <LL_RTC_EnableWriteProtection>

  return;
 8000690:	bf00      	nop
}
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40002800 	.word	0x40002800

08000698 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800069c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80006a0:	f7ff fe36 	bl	8000310 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80006a4:	f007 ff34 	bl	8008510 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80006a8:	2004      	movs	r0, #4
 80006aa:	f7ff fde9 	bl	8000280 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80006ae:	bf00      	nop
}
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b088      	sub	sp, #32
 80006b8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80006ba:	f006 fb97 	bl	8006dec <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80006be:	4a11      	ldr	r2, [pc, #68]	@ (8000704 <appe_Tl_Init+0x50>)
 80006c0:	2100      	movs	r1, #0
 80006c2:	2008      	movs	r0, #8
 80006c4:	f008 f862 	bl	800878c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <appe_Tl_Init+0x54>)
 80006ca:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80006cc:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <appe_Tl_Init+0x58>)
 80006ce:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80006d0:	463b      	mov	r3, r7
 80006d2:	4619      	mov	r1, r3
 80006d4:	480e      	ldr	r0, [pc, #56]	@ (8000710 <appe_Tl_Init+0x5c>)
 80006d6:	f006 fa4b 	bl	8006b70 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80006da:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <appe_Tl_Init+0x60>)
 80006dc:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <appe_Tl_Init+0x64>)
 80006e0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <appe_Tl_Init+0x68>)
 80006e4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80006e6:	f240 533c 	movw	r3, #1340	@ 0x53c
 80006ea:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80006ec:	f107 0308 	add.w	r3, r7, #8
 80006f0:	4618      	mov	r0, r3
 80006f2:	f006 fcbd 	bl	8007070 <TL_MM_Init>

  TL_Enable();
 80006f6:	f006 fb73 	bl	8006de0 <TL_Enable>

  return;
 80006fa:	bf00      	nop
}
 80006fc:	3720      	adds	r7, #32
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	08006ba9 	.word	0x08006ba9
 8000708:	20030734 	.word	0x20030734
 800070c:	08000721 	.word	0x08000721
 8000710:	08000739 	.word	0x08000739
 8000714:	2003094c 	.word	0x2003094c
 8000718:	20030840 	.word	0x20030840
 800071c:	200301f8 	.word	0x200301f8

08000720 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800072a:	bf00      	nop
}
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
	...

08000738 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	330b      	adds	r3, #11
 8000746:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	881b      	ldrh	r3, [r3, #0]
 800074c:	b29b      	uxth	r3, r3
 800074e:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8000752:	2b07      	cmp	r3, #7
 8000754:	d81f      	bhi.n	8000796 <APPE_SysUserEvtRx+0x5e>
 8000756:	a201      	add	r2, pc, #4	@ (adr r2, 800075c <APPE_SysUserEvtRx+0x24>)
 8000758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075c:	0800077d 	.word	0x0800077d
 8000760:	0800078f 	.word	0x0800078f
 8000764:	08000797 	.word	0x08000797
 8000768:	08000797 	.word	0x08000797
 800076c:	08000797 	.word	0x08000797
 8000770:	08000797 	.word	0x08000797
 8000774:	08000797 	.word	0x08000797
 8000778:	08000797 	.word	0x08000797
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	4618      	mov	r0, r3
 8000782:	f005 ffab 	bl	80066dc <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f000 f81b 	bl	80007c2 <APPE_SysEvtReadyProcessing>
    break;
 800078c:	e004      	b.n	8000798 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f000 f806 	bl	80007a0 <APPE_SysEvtError>
    break;
 8000794:	e000      	b.n	8000798 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8000796:	bf00      	nop
  }

  return;
 8000798:	bf00      	nop
}
 800079a:	3720      	adds	r7, #32
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	685b      	ldr	r3, [r3, #4]
 80007ac:	330b      	adds	r3, #11
 80007ae:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	3302      	adds	r3, #2
 80007b4:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80007b6:	bf00      	nop
}
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b08a      	sub	sp, #40	@ 0x28
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	330b      	adds	r3, #11
 80007e6:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	3302      	adds	r3, #2
 80007ec:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d11d      	bne.n	8000832 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80007f6:	f7ff fcc9 	bl	800018c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 80007fa:	230f      	movs	r3, #15
 80007fc:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 80007fe:	237f      	movs	r3, #127	@ 0x7f
 8000800:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8000802:	f7ff fe09 	bl	8000418 <LL_DBGMCU_GetRevisionID>
 8000806:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8000808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800080a:	b29b      	uxth	r3, r3
 800080c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800080e:	f7ff fdf5 	bl	80003fc <LL_DBGMCU_GetDeviceID>
 8000812:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8000814:	6a3b      	ldr	r3, [r7, #32]
 8000816:	b29b      	uxth	r3, r3
 8000818:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800081a:	f107 0308 	add.w	r3, r7, #8
 800081e:	4618      	mov	r0, r3
 8000820:	f005 ff46 	bl	80066b0 <SHCI_C2_Config>

    APP_BLE_Init();
 8000824:	f006 fe2e 	bl	8007484 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8000828:	2100      	movs	r1, #0
 800082a:	2001      	movs	r0, #1
 800082c:	f007 fe82 	bl	8008534 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8000830:	e007      	b.n	8000842 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8000832:	69bb      	ldr	r3, [r7, #24]
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d103      	bne.n	8000842 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
  return;
 8000840:	bf00      	nop
 8000842:	bf00      	nop
}
 8000844:	3728      	adds	r7, #40	@ 0x28
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 800084a:	b580      	push	{r7, lr}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800084e:	f04f 30ff 	mov.w	r0, #4294967295
 8000852:	f007 fe9f 	bl	8008594 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}

0800085a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800085e:	bf00      	nop
}
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8000872:	f04f 30ff 	mov.w	r0, #4294967295
 8000876:	f007 fe8d 	bl	8008594 <UTIL_SEQ_Run>
  return;
 800087a:	bf00      	nop
}
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800088a:	2100      	movs	r1, #0
 800088c:	2008      	movs	r0, #8
 800088e:	f007 ff9f 	bl	80087d0 <UTIL_SEQ_SetTask>
  return;
 8000892:	bf00      	nop
}
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b082      	sub	sp, #8
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008a2:	2002      	movs	r0, #2
 80008a4:	f008 f800 	bl	80088a8 <UTIL_SEQ_SetEvt>
  return;
 80008a8:	bf00      	nop
}
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80008b8:	2002      	movs	r0, #2
 80008ba:	f008 f815 	bl	80088e8 <UTIL_SEQ_WaitEvt>
  return;
 80008be:	bf00      	nop
}
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	4603      	mov	r3, r0
 80008ce:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80008d0:	88fb      	ldrh	r3, [r7, #6]
 80008d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80008d6:	d102      	bne.n	80008de <HAL_GPIO_EXTI_Callback+0x18>
  {
    case SW1_User_Pin:
      APP_BLE_Key_Button1_Action();
 80008d8:	f007 f854 	bl	8007984 <APP_BLE_Key_Button1_Action>
      break;
 80008dc:	e000      	b.n	80008e0 <HAL_GPIO_EXTI_Callback+0x1a>
    default:
      break;
 80008de:	bf00      	nop
  }
  return;
 80008e0:	bf00      	nop
}
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <LL_EXTI_EnableIT_0_31>:
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80008f0:	4b06      	ldr	r3, [pc, #24]	@ (800090c <LL_EXTI_EnableIT_0_31+0x24>)
 80008f2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80008f6:	4905      	ldr	r1, [pc, #20]	@ (800090c <LL_EXTI_EnableIT_0_31+0x24>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	58000800 	.word	0x58000800

08000910 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000918:	4b05      	ldr	r3, [pc, #20]	@ (8000930 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	4904      	ldr	r1, [pc, #16]	@ (8000930 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4313      	orrs	r3, r2
 8000922:	600b      	str	r3, [r1, #0]

}
 8000924:	bf00      	nop
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	58000800 	.word	0x58000800

08000934 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800093a:	4b0d      	ldr	r3, [pc, #52]	@ (8000970 <ReadRtcSsrValue+0x3c>)
 800093c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800093e:	b29b      	uxth	r3, r3
 8000940:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000942:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <ReadRtcSsrValue+0x3c>)
 8000944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000946:	b29b      	uxth	r3, r3
 8000948:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 800094a:	e005      	b.n	8000958 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000950:	4b07      	ldr	r3, [pc, #28]	@ (8000970 <ReadRtcSsrValue+0x3c>)
 8000952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000954:	b29b      	uxth	r3, r3
 8000956:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000958:	687a      	ldr	r2, [r7, #4]
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	429a      	cmp	r2, r3
 800095e:	d1f5      	bne.n	800094c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000960:	683b      	ldr	r3, [r7, #0]
}
 8000962:	4618      	mov	r0, r3
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40002800 	.word	0x40002800

08000974 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	460a      	mov	r2, r1
 800097e:	71fb      	strb	r3, [r7, #7]
 8000980:	4613      	mov	r3, r2
 8000982:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000984:	79ba      	ldrb	r2, [r7, #6]
 8000986:	491d      	ldr	r1, [pc, #116]	@ (80009fc <LinkTimerAfter+0x88>)
 8000988:	4613      	mov	r3, r2
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	4413      	add	r3, r2
 800098e:	00db      	lsls	r3, r3, #3
 8000990:	440b      	add	r3, r1
 8000992:	3315      	adds	r3, #21
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000998:	7bfb      	ldrb	r3, [r7, #15]
 800099a:	2b06      	cmp	r3, #6
 800099c:	d009      	beq.n	80009b2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 800099e:	7bfa      	ldrb	r2, [r7, #15]
 80009a0:	4916      	ldr	r1, [pc, #88]	@ (80009fc <LinkTimerAfter+0x88>)
 80009a2:	4613      	mov	r3, r2
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	4413      	add	r3, r2
 80009a8:	00db      	lsls	r3, r3, #3
 80009aa:	440b      	add	r3, r1
 80009ac:	3314      	adds	r3, #20
 80009ae:	79fa      	ldrb	r2, [r7, #7]
 80009b0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80009b2:	79fa      	ldrb	r2, [r7, #7]
 80009b4:	4911      	ldr	r1, [pc, #68]	@ (80009fc <LinkTimerAfter+0x88>)
 80009b6:	4613      	mov	r3, r2
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	4413      	add	r3, r2
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	440b      	add	r3, r1
 80009c0:	3315      	adds	r3, #21
 80009c2:	7bfa      	ldrb	r2, [r7, #15]
 80009c4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80009c6:	79fa      	ldrb	r2, [r7, #7]
 80009c8:	490c      	ldr	r1, [pc, #48]	@ (80009fc <LinkTimerAfter+0x88>)
 80009ca:	4613      	mov	r3, r2
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	4413      	add	r3, r2
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	440b      	add	r3, r1
 80009d4:	3314      	adds	r3, #20
 80009d6:	79ba      	ldrb	r2, [r7, #6]
 80009d8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80009da:	79ba      	ldrb	r2, [r7, #6]
 80009dc:	4907      	ldr	r1, [pc, #28]	@ (80009fc <LinkTimerAfter+0x88>)
 80009de:	4613      	mov	r3, r2
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	4413      	add	r3, r2
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	440b      	add	r3, r1
 80009e8:	3315      	adds	r3, #21
 80009ea:	79fa      	ldrb	r2, [r7, #7]
 80009ec:	701a      	strb	r2, [r3, #0]

  return;
 80009ee:	bf00      	nop
}
 80009f0:	3714      	adds	r7, #20
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	200000a8 	.word	0x200000a8

08000a00 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	460a      	mov	r2, r1
 8000a0a:	71fb      	strb	r3, [r7, #7]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000a10:	4b29      	ldr	r3, [pc, #164]	@ (8000ab8 <LinkTimerBefore+0xb8>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	79ba      	ldrb	r2, [r7, #6]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d032      	beq.n	8000a82 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000a1c:	79ba      	ldrb	r2, [r7, #6]
 8000a1e:	4927      	ldr	r1, [pc, #156]	@ (8000abc <LinkTimerBefore+0xbc>)
 8000a20:	4613      	mov	r3, r2
 8000a22:	005b      	lsls	r3, r3, #1
 8000a24:	4413      	add	r3, r2
 8000a26:	00db      	lsls	r3, r3, #3
 8000a28:	440b      	add	r3, r1
 8000a2a:	3314      	adds	r3, #20
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000a30:	7bfa      	ldrb	r2, [r7, #15]
 8000a32:	4922      	ldr	r1, [pc, #136]	@ (8000abc <LinkTimerBefore+0xbc>)
 8000a34:	4613      	mov	r3, r2
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	4413      	add	r3, r2
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	440b      	add	r3, r1
 8000a3e:	3315      	adds	r3, #21
 8000a40:	79fa      	ldrb	r2, [r7, #7]
 8000a42:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a44:	79fa      	ldrb	r2, [r7, #7]
 8000a46:	491d      	ldr	r1, [pc, #116]	@ (8000abc <LinkTimerBefore+0xbc>)
 8000a48:	4613      	mov	r3, r2
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	4413      	add	r3, r2
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	440b      	add	r3, r1
 8000a52:	3315      	adds	r3, #21
 8000a54:	79ba      	ldrb	r2, [r7, #6]
 8000a56:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000a58:	79fa      	ldrb	r2, [r7, #7]
 8000a5a:	4918      	ldr	r1, [pc, #96]	@ (8000abc <LinkTimerBefore+0xbc>)
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	4413      	add	r3, r2
 8000a62:	00db      	lsls	r3, r3, #3
 8000a64:	440b      	add	r3, r1
 8000a66:	3314      	adds	r3, #20
 8000a68:	7bfa      	ldrb	r2, [r7, #15]
 8000a6a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000a6c:	79ba      	ldrb	r2, [r7, #6]
 8000a6e:	4913      	ldr	r1, [pc, #76]	@ (8000abc <LinkTimerBefore+0xbc>)
 8000a70:	4613      	mov	r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	4413      	add	r3, r2
 8000a76:	00db      	lsls	r3, r3, #3
 8000a78:	440b      	add	r3, r1
 8000a7a:	3314      	adds	r3, #20
 8000a7c:	79fa      	ldrb	r2, [r7, #7]
 8000a7e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000a80:	e014      	b.n	8000aac <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000a82:	79fa      	ldrb	r2, [r7, #7]
 8000a84:	490d      	ldr	r1, [pc, #52]	@ (8000abc <LinkTimerBefore+0xbc>)
 8000a86:	4613      	mov	r3, r2
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	4413      	add	r3, r2
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	440b      	add	r3, r1
 8000a90:	3315      	adds	r3, #21
 8000a92:	79ba      	ldrb	r2, [r7, #6]
 8000a94:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000a96:	79ba      	ldrb	r2, [r7, #6]
 8000a98:	4908      	ldr	r1, [pc, #32]	@ (8000abc <LinkTimerBefore+0xbc>)
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	4413      	add	r3, r2
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	440b      	add	r3, r1
 8000aa4:	3314      	adds	r3, #20
 8000aa6:	79fa      	ldrb	r2, [r7, #7]
 8000aa8:	701a      	strb	r2, [r3, #0]
  return;
 8000aaa:	bf00      	nop
}
 8000aac:	3714      	adds	r7, #20
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000138 	.word	0x20000138
 8000abc:	200000a8 	.word	0x200000a8

08000ac0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000aca:	4b4e      	ldr	r3, [pc, #312]	@ (8000c04 <linkTimer+0x144>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b06      	cmp	r3, #6
 8000ad2:	d118      	bne.n	8000b06 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ad4:	4b4b      	ldr	r3, [pc, #300]	@ (8000c04 <linkTimer+0x144>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	4b4b      	ldr	r3, [pc, #300]	@ (8000c08 <linkTimer+0x148>)
 8000adc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000ade:	4a49      	ldr	r2, [pc, #292]	@ (8000c04 <linkTimer+0x144>)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000ae4:	79fa      	ldrb	r2, [r7, #7]
 8000ae6:	4949      	ldr	r1, [pc, #292]	@ (8000c0c <linkTimer+0x14c>)
 8000ae8:	4613      	mov	r3, r2
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	4413      	add	r3, r2
 8000aee:	00db      	lsls	r3, r3, #3
 8000af0:	440b      	add	r3, r1
 8000af2:	3315      	adds	r3, #21
 8000af4:	2206      	movs	r2, #6
 8000af6:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000af8:	4b45      	ldr	r3, [pc, #276]	@ (8000c10 <linkTimer+0x150>)
 8000afa:	f04f 32ff 	mov.w	r2, #4294967295
 8000afe:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	81fb      	strh	r3, [r7, #14]
 8000b04:	e078      	b.n	8000bf8 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000b06:	f000 f909 	bl	8000d1c <ReturnTimeElapsed>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000b0e:	79fa      	ldrb	r2, [r7, #7]
 8000b10:	493e      	ldr	r1, [pc, #248]	@ (8000c0c <linkTimer+0x14c>)
 8000b12:	4613      	mov	r3, r2
 8000b14:	005b      	lsls	r3, r3, #1
 8000b16:	4413      	add	r3, r2
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	440b      	add	r3, r1
 8000b1c:	3308      	adds	r3, #8
 8000b1e:	6819      	ldr	r1, [r3, #0]
 8000b20:	89fb      	ldrh	r3, [r7, #14]
 8000b22:	79fa      	ldrb	r2, [r7, #7]
 8000b24:	4419      	add	r1, r3
 8000b26:	4839      	ldr	r0, [pc, #228]	@ (8000c0c <linkTimer+0x14c>)
 8000b28:	4613      	mov	r3, r2
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	4413      	add	r3, r2
 8000b2e:	00db      	lsls	r3, r3, #3
 8000b30:	4403      	add	r3, r0
 8000b32:	3308      	adds	r3, #8
 8000b34:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000b36:	79fa      	ldrb	r2, [r7, #7]
 8000b38:	4934      	ldr	r1, [pc, #208]	@ (8000c0c <linkTimer+0x14c>)
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	005b      	lsls	r3, r3, #1
 8000b3e:	4413      	add	r3, r2
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	440b      	add	r3, r1
 8000b44:	3308      	adds	r3, #8
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000b4a:	4b2e      	ldr	r3, [pc, #184]	@ (8000c04 <linkTimer+0x144>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	4619      	mov	r1, r3
 8000b52:	4a2e      	ldr	r2, [pc, #184]	@ (8000c0c <linkTimer+0x14c>)
 8000b54:	460b      	mov	r3, r1
 8000b56:	005b      	lsls	r3, r3, #1
 8000b58:	440b      	add	r3, r1
 8000b5a:	00db      	lsls	r3, r3, #3
 8000b5c:	4413      	add	r3, r2
 8000b5e:	3308      	adds	r3, #8
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d337      	bcc.n	8000bd8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000b68:	4b26      	ldr	r3, [pc, #152]	@ (8000c04 <linkTimer+0x144>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000b6e:	7b7a      	ldrb	r2, [r7, #13]
 8000b70:	4926      	ldr	r1, [pc, #152]	@ (8000c0c <linkTimer+0x14c>)
 8000b72:	4613      	mov	r3, r2
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	4413      	add	r3, r2
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	440b      	add	r3, r1
 8000b7c:	3315      	adds	r3, #21
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000b82:	e013      	b.n	8000bac <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000b84:	7b7a      	ldrb	r2, [r7, #13]
 8000b86:	4921      	ldr	r1, [pc, #132]	@ (8000c0c <linkTimer+0x14c>)
 8000b88:	4613      	mov	r3, r2
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	4413      	add	r3, r2
 8000b8e:	00db      	lsls	r3, r3, #3
 8000b90:	440b      	add	r3, r1
 8000b92:	3315      	adds	r3, #21
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000b98:	7b7a      	ldrb	r2, [r7, #13]
 8000b9a:	491c      	ldr	r1, [pc, #112]	@ (8000c0c <linkTimer+0x14c>)
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	4413      	add	r3, r2
 8000ba2:	00db      	lsls	r3, r3, #3
 8000ba4:	440b      	add	r3, r1
 8000ba6:	3315      	adds	r3, #21
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000bac:	7b3b      	ldrb	r3, [r7, #12]
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d00b      	beq.n	8000bca <linkTimer+0x10a>
 8000bb2:	7b3a      	ldrb	r2, [r7, #12]
 8000bb4:	4915      	ldr	r1, [pc, #84]	@ (8000c0c <linkTimer+0x14c>)
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	4413      	add	r3, r2
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	440b      	add	r3, r1
 8000bc0:	3308      	adds	r3, #8
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	68ba      	ldr	r2, [r7, #8]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d2dc      	bcs.n	8000b84 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000bca:	7b7a      	ldrb	r2, [r7, #13]
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fecf 	bl	8000974 <LinkTimerAfter>
 8000bd6:	e00f      	b.n	8000bf8 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c04 <linkTimer+0x144>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	4611      	mov	r1, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ff0c 	bl	8000a00 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000be8:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <linkTimer+0x144>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <linkTimer+0x148>)
 8000bf0:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000bf2:	4a04      	ldr	r2, [pc, #16]	@ (8000c04 <linkTimer+0x144>)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000bf8:	89fb      	ldrh	r3, [r7, #14]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20000138 	.word	0x20000138
 8000c08:	20000139 	.word	0x20000139
 8000c0c:	200000a8 	.word	0x200000a8
 8000c10:	2000013c 	.word	0x2000013c

08000c14 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	460a      	mov	r2, r1
 8000c1e:	71fb      	strb	r3, [r7, #7]
 8000c20:	4613      	mov	r3, r2
 8000c22:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000c24:	4b39      	ldr	r3, [pc, #228]	@ (8000d0c <UnlinkTimer+0xf8>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	79fa      	ldrb	r2, [r7, #7]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d111      	bne.n	8000c54 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000c30:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <UnlinkTimer+0xf8>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4b36      	ldr	r3, [pc, #216]	@ (8000d10 <UnlinkTimer+0xfc>)
 8000c38:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000c3a:	79fa      	ldrb	r2, [r7, #7]
 8000c3c:	4935      	ldr	r1, [pc, #212]	@ (8000d14 <UnlinkTimer+0x100>)
 8000c3e:	4613      	mov	r3, r2
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	4413      	add	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	440b      	add	r3, r1
 8000c48:	3315      	adds	r3, #21
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d0c <UnlinkTimer+0xf8>)
 8000c50:	701a      	strb	r2, [r3, #0]
 8000c52:	e03e      	b.n	8000cd2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000c54:	79fa      	ldrb	r2, [r7, #7]
 8000c56:	492f      	ldr	r1, [pc, #188]	@ (8000d14 <UnlinkTimer+0x100>)
 8000c58:	4613      	mov	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	4413      	add	r3, r2
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	440b      	add	r3, r1
 8000c62:	3314      	adds	r3, #20
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000c68:	79fa      	ldrb	r2, [r7, #7]
 8000c6a:	492a      	ldr	r1, [pc, #168]	@ (8000d14 <UnlinkTimer+0x100>)
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	4413      	add	r3, r2
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	440b      	add	r3, r1
 8000c76:	3315      	adds	r3, #21
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000c7c:	79f9      	ldrb	r1, [r7, #7]
 8000c7e:	7bfa      	ldrb	r2, [r7, #15]
 8000c80:	4824      	ldr	r0, [pc, #144]	@ (8000d14 <UnlinkTimer+0x100>)
 8000c82:	460b      	mov	r3, r1
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	440b      	add	r3, r1
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	4403      	add	r3, r0
 8000c8c:	3315      	adds	r3, #21
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	b2d8      	uxtb	r0, r3
 8000c92:	4920      	ldr	r1, [pc, #128]	@ (8000d14 <UnlinkTimer+0x100>)
 8000c94:	4613      	mov	r3, r2
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	4413      	add	r3, r2
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	440b      	add	r3, r1
 8000c9e:	3315      	adds	r3, #21
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ca4:	7bbb      	ldrb	r3, [r7, #14]
 8000ca6:	2b06      	cmp	r3, #6
 8000ca8:	d013      	beq.n	8000cd2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000caa:	79f9      	ldrb	r1, [r7, #7]
 8000cac:	7bba      	ldrb	r2, [r7, #14]
 8000cae:	4819      	ldr	r0, [pc, #100]	@ (8000d14 <UnlinkTimer+0x100>)
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	440b      	add	r3, r1
 8000cb6:	00db      	lsls	r3, r3, #3
 8000cb8:	4403      	add	r3, r0
 8000cba:	3314      	adds	r3, #20
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	b2d8      	uxtb	r0, r3
 8000cc0:	4914      	ldr	r1, [pc, #80]	@ (8000d14 <UnlinkTimer+0x100>)
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	4413      	add	r3, r2
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	440b      	add	r3, r1
 8000ccc:	3314      	adds	r3, #20
 8000cce:	4602      	mov	r2, r0
 8000cd0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000cd2:	79fa      	ldrb	r2, [r7, #7]
 8000cd4:	490f      	ldr	r1, [pc, #60]	@ (8000d14 <UnlinkTimer+0x100>)
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	4413      	add	r3, r2
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	440b      	add	r3, r1
 8000ce0:	330c      	adds	r3, #12
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000ce6:	4b09      	ldr	r3, [pc, #36]	@ (8000d0c <UnlinkTimer+0xf8>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b06      	cmp	r3, #6
 8000cee:	d107      	bne.n	8000d00 <UnlinkTimer+0xec>
 8000cf0:	79bb      	ldrb	r3, [r7, #6]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d104      	bne.n	8000d00 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	@ (8000d18 <UnlinkTimer+0x104>)
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cfc:	601a      	str	r2, [r3, #0]
  }

  return;
 8000cfe:	bf00      	nop
 8000d00:	bf00      	nop
}
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	20000138 	.word	0x20000138
 8000d10:	20000139 	.word	0x20000139
 8000d14:	200000a8 	.word	0x200000a8
 8000d18:	2000013c 	.word	0x2000013c

08000d1c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000d22:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <ReturnTimeElapsed+0x70>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d2a:	d026      	beq.n	8000d7a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000d2c:	f7ff fe02 	bl	8000934 <ReadRtcSsrValue>
 8000d30:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000d32:	4b16      	ldr	r3, [pc, #88]	@ (8000d8c <ReturnTimeElapsed+0x70>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d805      	bhi.n	8000d48 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000d3c:	4b13      	ldr	r3, [pc, #76]	@ (8000d8c <ReturnTimeElapsed+0x70>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	607b      	str	r3, [r7, #4]
 8000d46:	e00a      	b.n	8000d5e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000d48:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <ReturnTimeElapsed+0x74>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000d54:	4b0d      	ldr	r3, [pc, #52]	@ (8000d8c <ReturnTimeElapsed+0x70>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	683a      	ldr	r2, [r7, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <ReturnTimeElapsed+0x78>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	fb02 f303 	mul.w	r3, r2, r3
 8000d6a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d98 <ReturnTimeElapsed+0x7c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	40d3      	lsrs	r3, r2
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	e001      	b.n	8000d7e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	b29b      	uxth	r3, r3
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	2000013c 	.word	0x2000013c
 8000d90:	20000144 	.word	0x20000144
 8000d94:	20000142 	.word	0x20000142
 8000d98:	20000141 	.word	0x20000141

08000d9c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d108      	bne.n	8000dbe <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000dac:	f7ff fdc2 	bl	8000934 <ReadRtcSsrValue>
 8000db0:	4603      	mov	r3, r0
 8000db2:	4a21      	ldr	r2, [pc, #132]	@ (8000e38 <RestartWakeupCounter+0x9c>)
 8000db4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000db6:	2003      	movs	r0, #3
 8000db8:	f002 f821 	bl	8002dfe <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000dbc:	e039      	b.n	8000e32 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000dbe:	88fb      	ldrh	r3, [r7, #6]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d803      	bhi.n	8000dcc <RestartWakeupCounter+0x30>
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e3c <RestartWakeupCounter+0xa0>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d002      	beq.n	8000dd2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000dcc:	88fb      	ldrh	r3, [r7, #6]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8000dd2:	bf00      	nop
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <RestartWakeupCounter+0xa4>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	f003 0304 	and.w	r3, r3, #4
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0f8      	beq.n	8000dd4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000de2:	4b17      	ldr	r3, [pc, #92]	@ (8000e40 <RestartWakeupCounter+0xa4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4b15      	ldr	r3, [pc, #84]	@ (8000e40 <RestartWakeupCounter+0xa4>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8000df2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000df4:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <RestartWakeupCounter+0xa8>)
 8000df6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000dfa:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000dfc:	2003      	movs	r0, #3
 8000dfe:	f002 f80c 	bl	8002e1a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <RestartWakeupCounter+0xac>)
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	0c1b      	lsrs	r3, r3, #16
 8000e08:	041b      	lsls	r3, r3, #16
 8000e0a:	88fa      	ldrh	r2, [r7, #6]
 8000e0c:	490e      	ldr	r1, [pc, #56]	@ (8000e48 <RestartWakeupCounter+0xac>)
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e12:	f7ff fd8f 	bl	8000934 <ReadRtcSsrValue>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4a07      	ldr	r2, [pc, #28]	@ (8000e38 <RestartWakeupCounter+0x9c>)
 8000e1a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8000e1c:	4b08      	ldr	r3, [pc, #32]	@ (8000e40 <RestartWakeupCounter+0xa4>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	689a      	ldr	r2, [r3, #8]
 8000e22:	4b07      	ldr	r3, [pc, #28]	@ (8000e40 <RestartWakeupCounter+0xa4>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e2a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000e2c:	f3af 8000 	nop.w
  return ;
 8000e30:	bf00      	nop
}
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	2000013c 	.word	0x2000013c
 8000e3c:	20000141 	.word	0x20000141
 8000e40:	200001e8 	.word	0x200001e8
 8000e44:	58000800 	.word	0x58000800
 8000e48:	40002800 	.word	0x40002800

08000e4c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000e52:	4b45      	ldr	r3, [pc, #276]	@ (8000f68 <RescheduleTimerList+0x11c>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000e5e:	d107      	bne.n	8000e70 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8000e60:	bf00      	nop
 8000e62:	4b42      	ldr	r3, [pc, #264]	@ (8000f6c <RescheduleTimerList+0x120>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	f003 0304 	and.w	r3, r3, #4
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d1f8      	bne.n	8000e62 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8000e70:	4b3e      	ldr	r3, [pc, #248]	@ (8000f6c <RescheduleTimerList+0x120>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	4b3d      	ldr	r3, [pc, #244]	@ (8000f6c <RescheduleTimerList+0x120>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000e7e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000e80:	4b3b      	ldr	r3, [pc, #236]	@ (8000f70 <RescheduleTimerList+0x124>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000e86:	7bfa      	ldrb	r2, [r7, #15]
 8000e88:	493a      	ldr	r1, [pc, #232]	@ (8000f74 <RescheduleTimerList+0x128>)
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	4413      	add	r3, r2
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	440b      	add	r3, r1
 8000e94:	3308      	adds	r3, #8
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000e9a:	f7ff ff3f 	bl	8000d1c <ReturnTimeElapsed>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	68ba      	ldr	r2, [r7, #8]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d205      	bcs.n	8000eb6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000eae:	4b32      	ldr	r3, [pc, #200]	@ (8000f78 <RescheduleTimerList+0x12c>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	701a      	strb	r2, [r3, #0]
 8000eb4:	e04d      	b.n	8000f52 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000eb6:	88fb      	ldrh	r3, [r7, #6]
 8000eb8:	4a30      	ldr	r2, [pc, #192]	@ (8000f7c <RescheduleTimerList+0x130>)
 8000eba:	8812      	ldrh	r2, [r2, #0]
 8000ebc:	b292      	uxth	r2, r2
 8000ebe:	4413      	add	r3, r2
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d906      	bls.n	8000ed6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000ec8:	4b2c      	ldr	r3, [pc, #176]	@ (8000f7c <RescheduleTimerList+0x130>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000ece:	4b2a      	ldr	r3, [pc, #168]	@ (8000f78 <RescheduleTimerList+0x12c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
 8000ed4:	e03d      	b.n	8000f52 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	88fb      	ldrh	r3, [r7, #6]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000ee0:	4b25      	ldr	r3, [pc, #148]	@ (8000f78 <RescheduleTimerList+0x12c>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000ee6:	e034      	b.n	8000f52 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000ee8:	7bfa      	ldrb	r2, [r7, #15]
 8000eea:	4922      	ldr	r1, [pc, #136]	@ (8000f74 <RescheduleTimerList+0x128>)
 8000eec:	4613      	mov	r3, r2
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	4413      	add	r3, r2
 8000ef2:	00db      	lsls	r3, r3, #3
 8000ef4:	440b      	add	r3, r1
 8000ef6:	3308      	adds	r3, #8
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	88fb      	ldrh	r3, [r7, #6]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d20a      	bcs.n	8000f16 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000f00:	7bfa      	ldrb	r2, [r7, #15]
 8000f02:	491c      	ldr	r1, [pc, #112]	@ (8000f74 <RescheduleTimerList+0x128>)
 8000f04:	4613      	mov	r3, r2
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	4413      	add	r3, r2
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	440b      	add	r3, r1
 8000f0e:	3308      	adds	r3, #8
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	e013      	b.n	8000f3e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000f16:	7bfa      	ldrb	r2, [r7, #15]
 8000f18:	4916      	ldr	r1, [pc, #88]	@ (8000f74 <RescheduleTimerList+0x128>)
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	4413      	add	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	440b      	add	r3, r1
 8000f24:	3308      	adds	r3, #8
 8000f26:	6819      	ldr	r1, [r3, #0]
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	7bfa      	ldrb	r2, [r7, #15]
 8000f2c:	1ac9      	subs	r1, r1, r3
 8000f2e:	4811      	ldr	r0, [pc, #68]	@ (8000f74 <RescheduleTimerList+0x128>)
 8000f30:	4613      	mov	r3, r2
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	4413      	add	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	4403      	add	r3, r0
 8000f3a:	3308      	adds	r3, #8
 8000f3c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8000f3e:	7bfa      	ldrb	r2, [r7, #15]
 8000f40:	490c      	ldr	r1, [pc, #48]	@ (8000f74 <RescheduleTimerList+0x128>)
 8000f42:	4613      	mov	r3, r2
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	4413      	add	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	440b      	add	r3, r1
 8000f4c:	3315      	adds	r3, #21
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	2b06      	cmp	r3, #6
 8000f56:	d1c7      	bne.n	8000ee8 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8000f58:	89bb      	ldrh	r3, [r7, #12]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff ff1e 	bl	8000d9c <RestartWakeupCounter>

  return ;
 8000f60:	bf00      	nop
}
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40002800 	.word	0x40002800
 8000f6c:	200001e8 	.word	0x200001e8
 8000f70:	20000138 	.word	0x20000138
 8000f74:	200000a8 	.word	0x200000a8
 8000f78:	20000140 	.word	0x20000140
 8000f7c:	20000146 	.word	0x20000146

08000f80 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	@ 0x28
 8000f84:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000f86:	f3ef 8310 	mrs	r3, PRIMASK
 8000f8a:	617b      	str	r3, [r7, #20]
  return(result);
 8000f8c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8000f94:	4b59      	ldr	r3, [pc, #356]	@ (80010fc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	22ca      	movs	r2, #202	@ 0xca
 8000f9a:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f9c:	4b57      	ldr	r3, [pc, #348]	@ (80010fc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2253      	movs	r2, #83	@ 0x53
 8000fa2:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8000fa4:	4b55      	ldr	r3, [pc, #340]	@ (80010fc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	4b54      	ldr	r3, [pc, #336]	@ (80010fc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000fb2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8000fb4:	4b52      	ldr	r3, [pc, #328]	@ (8001100 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8000fbc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000fc0:	4950      	ldr	r1, [pc, #320]	@ (8001104 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	4413      	add	r3, r2
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	440b      	add	r3, r1
 8000fcc:	330c      	adds	r3, #12
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d16e      	bne.n	80010b4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8000fd6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000fda:	494a      	ldr	r1, [pc, #296]	@ (8001104 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000fdc:	4613      	mov	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	440b      	add	r3, r1
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8000fea:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000fee:	4945      	ldr	r1, [pc, #276]	@ (8001104 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	4413      	add	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	440b      	add	r3, r1
 8000ffa:	3310      	adds	r3, #16
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8001000:	4b41      	ldr	r3, [pc, #260]	@ (8001108 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d04c      	beq.n	80010a4 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800100a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800100e:	493d      	ldr	r1, [pc, #244]	@ (8001104 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001010:	4613      	mov	r3, r2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	4413      	add	r3, r2
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	440b      	add	r3, r1
 800101a:	330d      	adds	r3, #13
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b01      	cmp	r3, #1
 8001022:	d124      	bne.n	800106e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8001024:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001028:	2101      	movs	r1, #1
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fdf2 	bl	8000c14 <UnlinkTimer>
 8001030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001032:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	f383 8810 	msr	PRIMASK, r3
}
 800103a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800103c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001040:	4930      	ldr	r1, [pc, #192]	@ (8001104 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8001042:	4613      	mov	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	4413      	add	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	440b      	add	r3, r1
 800104c:	3304      	adds	r3, #4
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001054:	4611      	mov	r1, r2
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f9b8 	bl	80013cc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800105c:	4b27      	ldr	r3, [pc, #156]	@ (80010fc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	22ca      	movs	r2, #202	@ 0xca
 8001062:	625a      	str	r2, [r3, #36]	@ 0x24
 8001064:	4b25      	ldr	r3, [pc, #148]	@ (80010fc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2253      	movs	r2, #83	@ 0x53
 800106a:	625a      	str	r2, [r3, #36]	@ 0x24
 800106c:	e012      	b.n	8001094 <HW_TS_RTC_Wakeup_Handler+0x114>
 800106e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001070:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f383 8810 	msr	PRIMASK, r3
}
 8001078:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800107a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f920 	bl	80012c4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001084:	4b1d      	ldr	r3, [pc, #116]	@ (80010fc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	22ca      	movs	r2, #202	@ 0xca
 800108a:	625a      	str	r2, [r3, #36]	@ 0x24
 800108c:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2253      	movs	r2, #83	@ 0x53
 8001092:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001094:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001098:	69fa      	ldr	r2, [r7, #28]
 800109a:	4619      	mov	r1, r3
 800109c:	69b8      	ldr	r0, [r7, #24]
 800109e:	f000 fa1b 	bl	80014d8 <HW_TS_RTC_Int_AppNot>
 80010a2:	e022      	b.n	80010ea <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80010a4:	f7ff fed2 	bl	8000e4c <RescheduleTimerList>
 80010a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010aa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	f383 8810 	msr	PRIMASK, r3
}
 80010b2:	e01a      	b.n	80010ea <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80010b4:	bf00      	nop
 80010b6:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f8      	beq.n	80010b6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80010c4:	4b0d      	ldr	r3, [pc, #52]	@ (80010fc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b0b      	ldr	r3, [pc, #44]	@ (80010fc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80010d4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80010d6:	4b0d      	ldr	r3, [pc, #52]	@ (800110c <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80010d8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f383 8810 	msr	PRIMASK, r3
}
 80010e8:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80010ea:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	22ff      	movs	r2, #255	@ 0xff
 80010f0:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80010f2:	bf00      	nop
}
 80010f4:	3728      	adds	r7, #40	@ 0x28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200001e8 	.word	0x200001e8
 8001100:	20000138 	.word	0x20000138
 8001104:	200000a8 	.word	0x200000a8
 8001108:	20000140 	.word	0x20000140
 800110c:	58000800 	.word	0x58000800

08001110 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800111c:	4b5e      	ldr	r3, [pc, #376]	@ (8001298 <HW_TS_Init+0x188>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	22ca      	movs	r2, #202	@ 0xca
 8001122:	625a      	str	r2, [r3, #36]	@ 0x24
 8001124:	4b5c      	ldr	r3, [pc, #368]	@ (8001298 <HW_TS_Init+0x188>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2253      	movs	r2, #83	@ 0x53
 800112a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800112c:	4b5b      	ldr	r3, [pc, #364]	@ (800129c <HW_TS_Init+0x18c>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4a5a      	ldr	r2, [pc, #360]	@ (800129c <HW_TS_Init+0x18c>)
 8001132:	f043 0320 	orr.w	r3, r3, #32
 8001136:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001138:	4b58      	ldr	r3, [pc, #352]	@ (800129c <HW_TS_Init+0x18c>)
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	b2db      	uxtb	r3, r3
 8001144:	f1c3 0304 	rsb	r3, r3, #4
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4b55      	ldr	r3, [pc, #340]	@ (80012a0 <HW_TS_Init+0x190>)
 800114c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800114e:	4b53      	ldr	r3, [pc, #332]	@ (800129c <HW_TS_Init+0x18c>)
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001156:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800115a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	fa92 f2a2 	rbit	r2, r2
 8001162:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001164:	68fa      	ldr	r2, [r7, #12]
 8001166:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	2a00      	cmp	r2, #0
 800116c:	d101      	bne.n	8001172 <HW_TS_Init+0x62>
  {
    return 32U;
 800116e:	2220      	movs	r2, #32
 8001170:	e003      	b.n	800117a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	fab2 f282 	clz	r2, r2
 8001178:	b2d2      	uxtb	r2, r2
 800117a:	40d3      	lsrs	r3, r2
 800117c:	b2db      	uxtb	r3, r3
 800117e:	3301      	adds	r3, #1
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4b48      	ldr	r3, [pc, #288]	@ (80012a4 <HW_TS_Init+0x194>)
 8001184:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001186:	4b45      	ldr	r3, [pc, #276]	@ (800129c <HW_TS_Init+0x18c>)
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	b29b      	uxth	r3, r3
 800118c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001190:	b29b      	uxth	r3, r3
 8001192:	3301      	adds	r3, #1
 8001194:	b29a      	uxth	r2, r3
 8001196:	4b44      	ldr	r3, [pc, #272]	@ (80012a8 <HW_TS_Init+0x198>)
 8001198:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800119a:	4b43      	ldr	r3, [pc, #268]	@ (80012a8 <HW_TS_Init+0x198>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	3b01      	subs	r3, #1
 80011a0:	4a40      	ldr	r2, [pc, #256]	@ (80012a4 <HW_TS_Init+0x194>)
 80011a2:	7812      	ldrb	r2, [r2, #0]
 80011a4:	fb02 f303 	mul.w	r3, r2, r3
 80011a8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80011ac:	4a3c      	ldr	r2, [pc, #240]	@ (80012a0 <HW_TS_Init+0x190>)
 80011ae:	7812      	ldrb	r2, [r2, #0]
 80011b0:	40d3      	lsrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d904      	bls.n	80011c8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80011be:	4b3b      	ldr	r3, [pc, #236]	@ (80012ac <HW_TS_Init+0x19c>)
 80011c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011c4:	801a      	strh	r2, [r3, #0]
 80011c6:	e003      	b.n	80011d0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	b29a      	uxth	r2, r3
 80011cc:	4b37      	ldr	r3, [pc, #220]	@ (80012ac <HW_TS_Init+0x19c>)
 80011ce:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80011d0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80011d4:	f7ff fb9c 	bl	8000910 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80011d8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80011dc:	f7ff fb84 	bl	80008e8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d13d      	bne.n	8001262 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80011e6:	4b32      	ldr	r3, [pc, #200]	@ (80012b0 <HW_TS_Init+0x1a0>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80011ec:	4b31      	ldr	r3, [pc, #196]	@ (80012b4 <HW_TS_Init+0x1a4>)
 80011ee:	f04f 32ff 	mov.w	r2, #4294967295
 80011f2:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	77fb      	strb	r3, [r7, #31]
 80011f8:	e00c      	b.n	8001214 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80011fa:	7ffa      	ldrb	r2, [r7, #31]
 80011fc:	492e      	ldr	r1, [pc, #184]	@ (80012b8 <HW_TS_Init+0x1a8>)
 80011fe:	4613      	mov	r3, r2
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	4413      	add	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	440b      	add	r3, r1
 8001208:	330c      	adds	r3, #12
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800120e:	7ffb      	ldrb	r3, [r7, #31]
 8001210:	3301      	adds	r3, #1
 8001212:	77fb      	strb	r3, [r7, #31]
 8001214:	7ffb      	ldrb	r3, [r7, #31]
 8001216:	2b05      	cmp	r3, #5
 8001218:	d9ef      	bls.n	80011fa <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800121a:	4b28      	ldr	r3, [pc, #160]	@ (80012bc <HW_TS_Init+0x1ac>)
 800121c:	2206      	movs	r2, #6
 800121e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001220:	4b1d      	ldr	r3, [pc, #116]	@ (8001298 <HW_TS_Init+0x188>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	4b1c      	ldr	r3, [pc, #112]	@ (8001298 <HW_TS_Init+0x188>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800122e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001230:	4b19      	ldr	r3, [pc, #100]	@ (8001298 <HW_TS_Init+0x188>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	68db      	ldr	r3, [r3, #12]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	4b17      	ldr	r3, [pc, #92]	@ (8001298 <HW_TS_Init+0x188>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001240:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001242:	4b1f      	ldr	r3, [pc, #124]	@ (80012c0 <HW_TS_Init+0x1b0>)
 8001244:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001248:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800124a:	2003      	movs	r0, #3
 800124c:	f001 fde5 	bl	8002e1a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001250:	4b11      	ldr	r3, [pc, #68]	@ (8001298 <HW_TS_Init+0x188>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689a      	ldr	r2, [r3, #8]
 8001256:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <HW_TS_Init+0x188>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	e009      	b.n	8001276 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001262:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <HW_TS_Init+0x188>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800126c:	2b00      	cmp	r3, #0
 800126e:	d002      	beq.n	8001276 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001270:	2003      	movs	r0, #3
 8001272:	f001 fdc4 	bl	8002dfe <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001276:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <HW_TS_Init+0x188>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	22ff      	movs	r2, #255	@ 0xff
 800127c:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800127e:	2200      	movs	r2, #0
 8001280:	2103      	movs	r1, #3
 8001282:	2003      	movs	r0, #3
 8001284:	f001 fd79 	bl	8002d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001288:	2003      	movs	r0, #3
 800128a:	f001 fd90 	bl	8002dae <HAL_NVIC_EnableIRQ>

  return;
 800128e:	bf00      	nop
}
 8001290:	3720      	adds	r7, #32
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200001e8 	.word	0x200001e8
 800129c:	40002800 	.word	0x40002800
 80012a0:	20000141 	.word	0x20000141
 80012a4:	20000142 	.word	0x20000142
 80012a8:	20000144 	.word	0x20000144
 80012ac:	20000146 	.word	0x20000146
 80012b0:	20000140 	.word	0x20000140
 80012b4:	2000013c 	.word	0x2000013c
 80012b8:	200000a8 	.word	0x200000a8
 80012bc:	20000138 	.word	0x20000138
 80012c0:	58000800 	.word	0x58000800

080012c4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80012ce:	f3ef 8310 	mrs	r3, PRIMASK
 80012d2:	60fb      	str	r3, [r7, #12]
  return(result);
 80012d4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80012d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80012d8:	b672      	cpsid	i
}
 80012da:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80012dc:	2003      	movs	r0, #3
 80012de:	f001 fd74 	bl	8002dca <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80012e2:	4b34      	ldr	r3, [pc, #208]	@ (80013b4 <HW_TS_Stop+0xf0>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	22ca      	movs	r2, #202	@ 0xca
 80012e8:	625a      	str	r2, [r3, #36]	@ 0x24
 80012ea:	4b32      	ldr	r3, [pc, #200]	@ (80013b4 <HW_TS_Stop+0xf0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2253      	movs	r2, #83	@ 0x53
 80012f0:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80012f2:	79fa      	ldrb	r2, [r7, #7]
 80012f4:	4930      	ldr	r1, [pc, #192]	@ (80013b8 <HW_TS_Stop+0xf4>)
 80012f6:	4613      	mov	r3, r2
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	440b      	add	r3, r1
 8001300:	330c      	adds	r3, #12
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d142      	bne.n	8001390 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fc80 	bl	8000c14 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8001314:	4b29      	ldr	r3, [pc, #164]	@ (80013bc <HW_TS_Stop+0xf8>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800131a:	7cfb      	ldrb	r3, [r7, #19]
 800131c:	2b06      	cmp	r3, #6
 800131e:	d12f      	bne.n	8001380 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001320:	4b27      	ldr	r3, [pc, #156]	@ (80013c0 <HW_TS_Stop+0xfc>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800132c:	d107      	bne.n	800133e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800132e:	bf00      	nop
 8001330:	4b20      	ldr	r3, [pc, #128]	@ (80013b4 <HW_TS_Stop+0xf0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f8      	bne.n	8001330 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800133e:	4b1d      	ldr	r3, [pc, #116]	@ (80013b4 <HW_TS_Stop+0xf0>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	4b1b      	ldr	r3, [pc, #108]	@ (80013b4 <HW_TS_Stop+0xf0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800134c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800134e:	bf00      	nop
 8001350:	4b18      	ldr	r3, [pc, #96]	@ (80013b4 <HW_TS_Stop+0xf0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f8      	beq.n	8001350 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800135e:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <HW_TS_Stop+0xf0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4b13      	ldr	r3, [pc, #76]	@ (80013b4 <HW_TS_Stop+0xf0>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800136e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001370:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <HW_TS_Stop+0x100>)
 8001372:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001376:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001378:	2003      	movs	r0, #3
 800137a:	f001 fd4e 	bl	8002e1a <HAL_NVIC_ClearPendingIRQ>
 800137e:	e007      	b.n	8001390 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001380:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <HW_TS_Stop+0x104>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	7cfa      	ldrb	r2, [r7, #19]
 8001388:	429a      	cmp	r2, r3
 800138a:	d001      	beq.n	8001390 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800138c:	f7ff fd5e 	bl	8000e4c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001390:	4b08      	ldr	r3, [pc, #32]	@ (80013b4 <HW_TS_Stop+0xf0>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	22ff      	movs	r2, #255	@ 0xff
 8001396:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001398:	2003      	movs	r0, #3
 800139a:	f001 fd08 	bl	8002dae <HAL_NVIC_EnableIRQ>
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	f383 8810 	msr	PRIMASK, r3
}
 80013a8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80013aa:	bf00      	nop
}
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	200001e8 	.word	0x200001e8
 80013b8:	200000a8 	.word	0x200000a8
 80013bc:	20000138 	.word	0x20000138
 80013c0:	40002800 	.word	0x40002800
 80013c4:	58000800 	.word	0x58000800
 80013c8:	20000139 	.word	0x20000139

080013cc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b086      	sub	sp, #24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80013d8:	79fa      	ldrb	r2, [r7, #7]
 80013da:	493b      	ldr	r1, [pc, #236]	@ (80014c8 <HW_TS_Start+0xfc>)
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	440b      	add	r3, r1
 80013e6:	330c      	adds	r3, #12
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d103      	bne.n	80013f8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff66 	bl	80012c4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013f8:	f3ef 8310 	mrs	r3, PRIMASK
 80013fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80013fe:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001400:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001402:	b672      	cpsid	i
}
 8001404:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001406:	2003      	movs	r0, #3
 8001408:	f001 fcdf 	bl	8002dca <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800140c:	4b2f      	ldr	r3, [pc, #188]	@ (80014cc <HW_TS_Start+0x100>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	22ca      	movs	r2, #202	@ 0xca
 8001412:	625a      	str	r2, [r3, #36]	@ 0x24
 8001414:	4b2d      	ldr	r3, [pc, #180]	@ (80014cc <HW_TS_Start+0x100>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2253      	movs	r2, #83	@ 0x53
 800141a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800141c:	79fa      	ldrb	r2, [r7, #7]
 800141e:	492a      	ldr	r1, [pc, #168]	@ (80014c8 <HW_TS_Start+0xfc>)
 8001420:	4613      	mov	r3, r2
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	4413      	add	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	440b      	add	r3, r1
 800142a:	330c      	adds	r3, #12
 800142c:	2202      	movs	r2, #2
 800142e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001430:	79fa      	ldrb	r2, [r7, #7]
 8001432:	4925      	ldr	r1, [pc, #148]	@ (80014c8 <HW_TS_Start+0xfc>)
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	440b      	add	r3, r1
 800143e:	3308      	adds	r3, #8
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8001444:	79fa      	ldrb	r2, [r7, #7]
 8001446:	4920      	ldr	r1, [pc, #128]	@ (80014c8 <HW_TS_Start+0xfc>)
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	00db      	lsls	r3, r3, #3
 8001450:	440b      	add	r3, r1
 8001452:	3304      	adds	r3, #4
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fb30 	bl	8000ac0 <linkTimer>
 8001460:	4603      	mov	r3, r0
 8001462:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8001464:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <HW_TS_Start+0x104>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800146a:	4b1a      	ldr	r3, [pc, #104]	@ (80014d4 <HW_TS_Start+0x108>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	b2db      	uxtb	r3, r3
 8001470:	7c7a      	ldrb	r2, [r7, #17]
 8001472:	429a      	cmp	r2, r3
 8001474:	d002      	beq.n	800147c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8001476:	f7ff fce9 	bl	8000e4c <RescheduleTimerList>
 800147a:	e013      	b.n	80014a4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800147c:	79fa      	ldrb	r2, [r7, #7]
 800147e:	4912      	ldr	r1, [pc, #72]	@ (80014c8 <HW_TS_Start+0xfc>)
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	440b      	add	r3, r1
 800148a:	3308      	adds	r3, #8
 800148c:	6819      	ldr	r1, [r3, #0]
 800148e:	8a7b      	ldrh	r3, [r7, #18]
 8001490:	79fa      	ldrb	r2, [r7, #7]
 8001492:	1ac9      	subs	r1, r1, r3
 8001494:	480c      	ldr	r0, [pc, #48]	@ (80014c8 <HW_TS_Start+0xfc>)
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4403      	add	r3, r0
 80014a0:	3308      	adds	r3, #8
 80014a2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80014a4:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <HW_TS_Start+0x100>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	22ff      	movs	r2, #255	@ 0xff
 80014aa:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80014ac:	2003      	movs	r0, #3
 80014ae:	f001 fc7e 	bl	8002dae <HAL_NVIC_EnableIRQ>
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	f383 8810 	msr	PRIMASK, r3
}
 80014bc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80014be:	bf00      	nop
}
 80014c0:	3718      	adds	r7, #24
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	200000a8 	.word	0x200000a8
 80014cc:	200001e8 	.word	0x200001e8
 80014d0:	20000138 	.word	0x20000138
 80014d4:	20000139 	.word	0x20000139

080014d8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	460b      	mov	r3, r1
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4798      	blx	r3

  return;
 80014ea:	bf00      	nop
}
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <LL_RCC_LSE_SetDriveCapability>:
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80014fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001502:	f023 0218 	bic.w	r2, r3, #24
 8001506:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4313      	orrs	r3, r2
 800150e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <LL_AHB2_GRP1_EnableClock>:
{
 800151e:	b480      	push	{r7}
 8001520:	b085      	sub	sp, #20
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001526:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800152a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800152c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4313      	orrs	r3, r2
 8001534:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800153a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4013      	ands	r3, r2
 8001540:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001542:	68fb      	ldr	r3, [r7, #12]
}
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001554:	f000 fbb2 	bl	8001cbc <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001558:	f7fe fffe 	bl	8000558 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800155c:	f000 f812 	bl	8001584 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001560:	f000 f884 	bl	800166c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001564:	f000 f906 	bl	8001774 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001568:	f000 f954 	bl	8001814 <MX_GPIO_Init>
  MX_RTC_Init();
 800156c:	f000 f91e 	bl	80017ac <MX_RTC_Init>
  MX_ADC1_Init();
 8001570:	f000 f89c 	bl	80016ac <MX_ADC1_Init>
  MX_RF_Init();
 8001574:	f000 f912 	bl	800179c <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001578:	f7fe fffc 	bl	8000574 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 800157c:	f7ff f965 	bl	800084a <MX_APPE_Process>
 8001580:	e7fc      	b.n	800157c <main+0x2c>
	...

08001584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b09a      	sub	sp, #104	@ 0x68
 8001588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158a:	f107 0320 	add.w	r3, r7, #32
 800158e:	2248      	movs	r2, #72	@ 0x48
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f007 fa38 	bl	8008a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]
 80015a6:	615a      	str	r2, [r3, #20]
 80015a8:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 80015aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80015b8:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 80015ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f023 0303 	bic.w	r3, r3, #3
 80015c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015ce:	f001 fe97 	bl	8003300 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80015d2:	2010      	movs	r0, #16
 80015d4:	f7ff ff8d 	bl	80014f2 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d8:	4b23      	ldr	r3, [pc, #140]	@ (8001668 <SystemClock_Config+0xe4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015e0:	4a21      	ldr	r2, [pc, #132]	@ (8001668 <SystemClock_Config+0xe4>)
 80015e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001668 <SystemClock_Config+0xe4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015f0:	603b      	str	r3, [r7, #0]
 80015f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80015f4:	2327      	movs	r3, #39	@ 0x27
 80015f6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015fe:	2301      	movs	r3, #1
 8001600:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001602:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001608:	2301      	movs	r3, #1
 800160a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800160c:	2340      	movs	r3, #64	@ 0x40
 800160e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001610:	2300      	movs	r3, #0
 8001612:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001614:	2360      	movs	r3, #96	@ 0x60
 8001616:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001618:	2300      	movs	r3, #0
 800161a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800161c:	f107 0320 	add.w	r3, r7, #32
 8001620:	4618      	mov	r0, r3
 8001622:	f002 f9e9 	bl	80039f8 <HAL_RCC_OscConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800162c:	f000 f94a 	bl	80018c4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001630:	236f      	movs	r3, #111	@ 0x6f
 8001632:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001634:	2302      	movs	r3, #2
 8001636:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001644:	2300      	movs	r3, #0
 8001646:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2101      	movs	r1, #1
 8001650:	4618      	mov	r0, r3
 8001652:	f002 fd45 	bl	80040e0 <HAL_RCC_ClockConfig>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <SystemClock_Config+0xdc>
  {
    Error_Handler();
 800165c:	f000 f932 	bl	80018c4 <Error_Handler>
  }
}
 8001660:	bf00      	nop
 8001662:	3768      	adds	r7, #104	@ 0x68
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	58000400 	.word	0x58000400

0800166c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b094      	sub	sp, #80	@ 0x50
 8001670:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001672:	463b      	mov	r3, r7
 8001674:	2250      	movs	r2, #80	@ 0x50
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f007 f9c5 	bl	8008a08 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800167e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001682:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001684:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001688:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800168a:	2302      	movs	r3, #2
 800168c:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800168e:	2310      	movs	r3, #16
 8001690:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001692:	463b      	mov	r3, r7
 8001694:	4618      	mov	r0, r3
 8001696:	f003 f934 	bl	8004902 <HAL_RCCEx_PeriphCLKConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80016a0:	f000 f910 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80016a4:	bf00      	nop
 80016a6:	3750      	adds	r7, #80	@ 0x50
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016b2:	463b      	mov	r3, r7
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
 80016c0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016c2:	4b29      	ldr	r3, [pc, #164]	@ (8001768 <MX_ADC1_Init+0xbc>)
 80016c4:	4a29      	ldr	r2, [pc, #164]	@ (800176c <MX_ADC1_Init+0xc0>)
 80016c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016c8:	4b27      	ldr	r3, [pc, #156]	@ (8001768 <MX_ADC1_Init+0xbc>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016ce:	4b26      	ldr	r3, [pc, #152]	@ (8001768 <MX_ADC1_Init+0xbc>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016d4:	4b24      	ldr	r3, [pc, #144]	@ (8001768 <MX_ADC1_Init+0xbc>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016da:	4b23      	ldr	r3, [pc, #140]	@ (8001768 <MX_ADC1_Init+0xbc>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016e0:	4b21      	ldr	r3, [pc, #132]	@ (8001768 <MX_ADC1_Init+0xbc>)
 80016e2:	2204      	movs	r2, #4
 80016e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016e6:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <MX_ADC1_Init+0xbc>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001768 <MX_ADC1_Init+0xbc>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80016f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001768 <MX_ADC1_Init+0xbc>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <MX_ADC1_Init+0xbc>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001700:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <MX_ADC1_Init+0xbc>)
 8001702:	2200      	movs	r2, #0
 8001704:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001706:	4b18      	ldr	r3, [pc, #96]	@ (8001768 <MX_ADC1_Init+0xbc>)
 8001708:	2200      	movs	r2, #0
 800170a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800170c:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <MX_ADC1_Init+0xbc>)
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001714:	4b14      	ldr	r3, [pc, #80]	@ (8001768 <MX_ADC1_Init+0xbc>)
 8001716:	2200      	movs	r2, #0
 8001718:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800171a:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <MX_ADC1_Init+0xbc>)
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001722:	4811      	ldr	r0, [pc, #68]	@ (8001768 <MX_ADC1_Init+0xbc>)
 8001724:	f000 fcdc 	bl	80020e0 <HAL_ADC_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800172e:	f000 f8c9 	bl	80018c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001732:	4b0f      	ldr	r3, [pc, #60]	@ (8001770 <MX_ADC1_Init+0xc4>)
 8001734:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001736:	2306      	movs	r3, #6
 8001738:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800173e:	237f      	movs	r3, #127	@ 0x7f
 8001740:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001742:	2304      	movs	r3, #4
 8001744:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800174a:	463b      	mov	r3, r7
 800174c:	4619      	mov	r1, r3
 800174e:	4806      	ldr	r0, [pc, #24]	@ (8001768 <MX_ADC1_Init+0xbc>)
 8001750:	f000 fe12 	bl	8002378 <HAL_ADC_ConfigChannel>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800175a:	f000 f8b3 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000148 	.word	0x20000148
 800176c:	50040000 	.word	0x50040000
 8001770:	3ac04000 	.word	0x3ac04000

08001774 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8001778:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <MX_IPCC_Init+0x20>)
 800177a:	4a07      	ldr	r2, [pc, #28]	@ (8001798 <MX_IPCC_Init+0x24>)
 800177c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800177e:	4805      	ldr	r0, [pc, #20]	@ (8001794 <MX_IPCC_Init+0x20>)
 8001780:	f001 fd38 	bl	80031f4 <HAL_IPCC_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800178a:	f000 f89b 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200001ac 	.word	0x200001ac
 8001798:	58000c00 	.word	0x58000c00

0800179c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017b0:	4b16      	ldr	r3, [pc, #88]	@ (800180c <MX_RTC_Init+0x60>)
 80017b2:	4a17      	ldr	r2, [pc, #92]	@ (8001810 <MX_RTC_Init+0x64>)
 80017b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017b6:	4b15      	ldr	r3, [pc, #84]	@ (800180c <MX_RTC_Init+0x60>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80017bc:	4b13      	ldr	r3, [pc, #76]	@ (800180c <MX_RTC_Init+0x60>)
 80017be:	220f      	movs	r2, #15
 80017c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80017c2:	4b12      	ldr	r3, [pc, #72]	@ (800180c <MX_RTC_Init+0x60>)
 80017c4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80017c8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017ca:	4b10      	ldr	r3, [pc, #64]	@ (800180c <MX_RTC_Init+0x60>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017d0:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <MX_RTC_Init+0x60>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017d6:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <MX_RTC_Init+0x60>)
 80017d8:	2200      	movs	r2, #0
 80017da:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017dc:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <MX_RTC_Init+0x60>)
 80017de:	2200      	movs	r2, #0
 80017e0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017e2:	480a      	ldr	r0, [pc, #40]	@ (800180c <MX_RTC_Init+0x60>)
 80017e4:	f003 fb14 	bl	8004e10 <HAL_RTC_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80017ee:	f000 f869 	bl	80018c4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80017f2:	2200      	movs	r2, #0
 80017f4:	2100      	movs	r1, #0
 80017f6:	4805      	ldr	r0, [pc, #20]	@ (800180c <MX_RTC_Init+0x60>)
 80017f8:	f003 fc0a 	bl	8005010 <HAL_RTCEx_SetWakeUpTimer_IT>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001802:	f000 f85f 	bl	80018c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200001e8 	.word	0x200001e8
 8001810:	40002800 	.word	0x40002800

08001814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181a:	1d3b      	adds	r3, r7, #4
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001828:	2002      	movs	r0, #2
 800182a:	f7ff fe78 	bl	800151e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800182e:	2004      	movs	r0, #4
 8001830:	f7ff fe75 	bl	800151e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001834:	2008      	movs	r0, #8
 8001836:	f7ff fe72 	bl	800151e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Green_Led_GPIO_Port, Green_Led_Pin, GPIO_PIN_RESET);
 800183a:	2200      	movs	r2, #0
 800183c:	2120      	movs	r1, #32
 800183e:	481e      	ldr	r0, [pc, #120]	@ (80018b8 <MX_GPIO_Init+0xa4>)
 8001840:	f001 fc6a 	bl	8003118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Red_Led_Pin|Blue_Led_Pin, GPIO_PIN_RESET);
 8001844:	2200      	movs	r2, #0
 8001846:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 800184a:	481c      	ldr	r0, [pc, #112]	@ (80018bc <MX_GPIO_Init+0xa8>)
 800184c:	f001 fc64 	bl	8003118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Green_Led_Pin */
  GPIO_InitStruct.Pin = Green_Led_Pin;
 8001850:	2320      	movs	r3, #32
 8001852:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001854:	2301      	movs	r3, #1
 8001856:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2300      	movs	r3, #0
 800185e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(Green_Led_GPIO_Port, &GPIO_InitStruct);
 8001860:	1d3b      	adds	r3, r7, #4
 8001862:	4619      	mov	r1, r3
 8001864:	4814      	ldr	r0, [pc, #80]	@ (80018b8 <MX_GPIO_Init+0xa4>)
 8001866:	f001 fae7 	bl	8002e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_User_Pin SW2_User_Pin */
  GPIO_InitStruct.Pin = SW1_User_Pin|SW2_User_Pin;
 800186a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800186e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001870:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001874:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001876:	2301      	movs	r3, #1
 8001878:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	4619      	mov	r1, r3
 800187e:	4810      	ldr	r0, [pc, #64]	@ (80018c0 <MX_GPIO_Init+0xac>)
 8001880:	f001 fada 	bl	8002e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : Red_Led_Pin Blue_Led_Pin */
  GPIO_InitStruct.Pin = Red_Led_Pin|Blue_Led_Pin;
 8001884:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001888:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188a:	2301      	movs	r3, #1
 800188c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	4619      	mov	r1, r3
 800189a:	4808      	ldr	r0, [pc, #32]	@ (80018bc <MX_GPIO_Init+0xa8>)
 800189c:	f001 facc 	bl	8002e38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80018a0:	2200      	movs	r2, #0
 80018a2:	2100      	movs	r1, #0
 80018a4:	2028      	movs	r0, #40	@ 0x28
 80018a6:	f001 fa68 	bl	8002d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018aa:	2028      	movs	r0, #40	@ 0x28
 80018ac:	f001 fa7f 	bl	8002dae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018b0:	bf00      	nop
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	48000400 	.word	0x48000400
 80018bc:	48000c00 	.word	0x48000c00
 80018c0:	48000800 	.word	0x48000800

080018c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018c8:	b672      	cpsid	i
}
 80018ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <Error_Handler+0x8>

080018d0 <LL_RCC_EnableRTC>:
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80018d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <LL_AHB2_GRP1_EnableClock>:
{
 80018f2:	b480      	push	{r7}
 80018f4:	b085      	sub	sp, #20
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001900:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4313      	orrs	r3, r2
 8001908:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800190a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800190e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4013      	ands	r3, r2
 8001914:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001916:	68fb      	ldr	r3, [r7, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <LL_AHB3_GRP1_EnableClock>:
{
 8001924:	b480      	push	{r7}
 8001926:	b085      	sub	sp, #20
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800192c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001930:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001932:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4313      	orrs	r3, r2
 800193a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800193c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001940:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4013      	ands	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001948:	68fb      	ldr	r3, [r7, #12]
}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001956:	b480      	push	{r7}
 8001958:	b085      	sub	sp, #20
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800195e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001962:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001964:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4313      	orrs	r3, r2
 800196c:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800196e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001972:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4013      	ands	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800198c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001990:	f7ff ffc8 	bl	8001924 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8001994:	2200      	movs	r2, #0
 8001996:	2100      	movs	r1, #0
 8001998:	202e      	movs	r0, #46	@ 0x2e
 800199a:	f001 f9ee 	bl	8002d7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800199e:	202e      	movs	r0, #46	@ 0x2e
 80019a0:	f001 fa05 	bl	8002dae <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a4:	bf00      	nop
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b09c      	sub	sp, #112	@ 0x70
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	2250      	movs	r2, #80	@ 0x50
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f007 f81d 	bl	8008a08 <memset>
  if(hadc->Instance==ADC1)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a44 <HAL_ADC_MspInit+0x9c>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d130      	bne.n	8001a3a <HAL_ADC_MspInit+0x92>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019dc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80019de:	2318      	movs	r3, #24
 80019e0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80019e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019e6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80019e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80019ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80019ee:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80019f2:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 80019f4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80019f8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80019fa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80019fe:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	4618      	mov	r0, r3
 8001a06:	f002 ff7c 	bl	8004902 <HAL_RCCEx_PeriphCLKConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_ADC_MspInit+0x6c>
    {
      Error_Handler();
 8001a10:	f7ff ff58 	bl	80018c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a14:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001a18:	f7ff ff6b 	bl	80018f2 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a1c:	2004      	movs	r0, #4
 8001a1e:	f7ff ff68 	bl	80018f2 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a22:	2320      	movs	r3, #32
 8001a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a26:	2303      	movs	r3, #3
 8001a28:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001a32:	4619      	mov	r1, r3
 8001a34:	4804      	ldr	r0, [pc, #16]	@ (8001a48 <HAL_ADC_MspInit+0xa0>)
 8001a36:	f001 f9ff 	bl	8002e38 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a3a:	bf00      	nop
 8001a3c:	3770      	adds	r7, #112	@ 0x70
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	50040000 	.word	0x50040000
 8001a48:	48000800 	.word	0x48000800

08001a4c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a0d      	ldr	r2, [pc, #52]	@ (8001a90 <HAL_IPCC_MspInit+0x44>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d113      	bne.n	8001a86 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8001a5e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001a62:	f7ff ff5f 	bl	8001924 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2100      	movs	r1, #0
 8001a6a:	202c      	movs	r0, #44	@ 0x2c
 8001a6c:	f001 f985 	bl	8002d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001a70:	202c      	movs	r0, #44	@ 0x2c
 8001a72:	f001 f99c 	bl	8002dae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	202d      	movs	r0, #45	@ 0x2d
 8001a7c:	f001 f97d 	bl	8002d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8001a80:	202d      	movs	r0, #45	@ 0x2d
 8001a82:	f001 f994 	bl	8002dae <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	58000c00 	.word	0x58000c00

08001a94 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b096      	sub	sp, #88	@ 0x58
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	2250      	movs	r2, #80	@ 0x50
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f006 ffaf 	bl	8008a08 <memset>
  if(hrtc->Instance==RTC)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a12      	ldr	r2, [pc, #72]	@ (8001af8 <HAL_RTC_MspInit+0x64>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d11d      	bne.n	8001af0 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ab4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ab8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001aba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001abe:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ac0:	f107 0308 	add.w	r3, r7, #8
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f002 ff1c 	bl	8004902 <HAL_RCCEx_PeriphCLKConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001ad0:	f7ff fef8 	bl	80018c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001ad4:	f7ff fefc 	bl	80018d0 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001ad8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001adc:	f7ff ff3b 	bl	8001956 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	2003      	movs	r0, #3
 8001ae6:	f001 f948 	bl	8002d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8001aea:	2003      	movs	r0, #3
 8001aec:	f001 f95f 	bl	8002dae <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8001af0:	bf00      	nop
 8001af2:	3758      	adds	r7, #88	@ 0x58
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40002800 	.word	0x40002800

08001afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <NMI_Handler+0x4>

08001b04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <HardFault_Handler+0x4>

08001b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <MemManage_Handler+0x4>

08001b14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <BusFault_Handler+0x4>

08001b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <UsageFault_Handler+0x4>

08001b24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b52:	f000 f90d 	bl	8001d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001b5e:	f7ff fa0f 	bl	8000f80 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_User_Pin);
 8001b6a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001b6e:	f001 fb05 	bl	800317c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW2_User_Pin);
 8001b72:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001b76:	f001 fb01 	bl	800317c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8001b82:	f006 fb87 	bl	8008294 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8001b8e:	f006 fbb7 	bl	8008300 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8001b9a:	f001 fb07 	bl	80031ac <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
	...

08001ba4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001ba8:	4b24      	ldr	r3, [pc, #144]	@ (8001c3c <SystemInit+0x98>)
 8001baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bae:	4a23      	ldr	r2, [pc, #140]	@ (8001c3c <SystemInit+0x98>)
 8001bb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001bb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bcc:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001bd0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001bdc:	4b18      	ldr	r3, [pc, #96]	@ (8001c40 <SystemInit+0x9c>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bee:	f023 0305 	bic.w	r3, r3, #5
 8001bf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001bf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c02:	f023 0301 	bic.w	r3, r3, #1
 8001c06:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001c0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c0e:	4a0d      	ldr	r2, [pc, #52]	@ (8001c44 <SystemInit+0xa0>)
 8001c10:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c16:	4a0b      	ldr	r2, [pc, #44]	@ (8001c44 <SystemInit+0xa0>)
 8001c18:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c28:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c2e:	2200      	movs	r2, #0
 8001c30:	619a      	str	r2, [r3, #24]
}
 8001c32:	bf00      	nop
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00
 8001c40:	faf6fefb 	.word	0xfaf6fefb
 8001c44:	22041000 	.word	0x22041000

08001c48 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001c48:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c4a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c4c:	3304      	adds	r3, #4

08001c4e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c4e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c50:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001c52:	d3f9      	bcc.n	8001c48 <CopyDataInit>
  bx lr
 8001c54:	4770      	bx	lr

08001c56 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001c56:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001c58:	3004      	adds	r0, #4

08001c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001c5a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001c5c:	d3fb      	bcc.n	8001c56 <FillZerobss>
  bx lr
 8001c5e:	4770      	bx	lr

08001c60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c60:	480c      	ldr	r0, [pc, #48]	@ (8001c94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c62:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c64:	f7ff ff9e 	bl	8001ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001c68:	480b      	ldr	r0, [pc, #44]	@ (8001c98 <LoopForever+0x6>)
 8001c6a:	490c      	ldr	r1, [pc, #48]	@ (8001c9c <LoopForever+0xa>)
 8001c6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ca0 <LoopForever+0xe>)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f7ff ffed 	bl	8001c4e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001c74:	480b      	ldr	r0, [pc, #44]	@ (8001ca4 <LoopForever+0x12>)
 8001c76:	490c      	ldr	r1, [pc, #48]	@ (8001ca8 <LoopForever+0x16>)
 8001c78:	4a0c      	ldr	r2, [pc, #48]	@ (8001cac <LoopForever+0x1a>)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f7ff ffe7 	bl	8001c4e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001c80:	480b      	ldr	r0, [pc, #44]	@ (8001cb0 <LoopForever+0x1e>)
 8001c82:	490c      	ldr	r1, [pc, #48]	@ (8001cb4 <LoopForever+0x22>)
 8001c84:	2300      	movs	r3, #0
 8001c86:	f7ff ffe8 	bl	8001c5a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c8a:	f006 fec5 	bl	8008a18 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001c8e:	f7ff fc5f 	bl	8001550 <main>

08001c92 <LoopForever>:

LoopForever:
  b LoopForever
 8001c92:	e7fe      	b.n	8001c92 <LoopForever>
  ldr   r0, =_estack
 8001c94:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001c98:	20000008 	.word	0x20000008
 8001c9c:	20000040 	.word	0x20000040
 8001ca0:	08008d18 	.word	0x08008d18
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001ca4:	200301e4 	.word	0x200301e4
 8001ca8:	20030a67 	.word	0x20030a67
 8001cac:	08008d96 	.word	0x08008d96
  INIT_BSS _sbss, _ebss
 8001cb0:	2000008c 	.word	0x2000008c
 8001cb4:	200005d8 	.word	0x200005d8

08001cb8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cb8:	e7fe      	b.n	8001cb8 <ADC1_IRQHandler>
	...

08001cbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <HAL_Init+0x3c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a0b      	ldr	r2, [pc, #44]	@ (8001cf8 <HAL_Init+0x3c>)
 8001ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cd0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cd2:	2003      	movs	r0, #3
 8001cd4:	f001 f846 	bl	8002d64 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001cd8:	200f      	movs	r0, #15
 8001cda:	f000 f80f 	bl	8001cfc <HAL_InitTick>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	71fb      	strb	r3, [r7, #7]
 8001ce8:	e001      	b.n	8001cee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cea:	f7ff fe4d 	bl	8001988 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cee:	79fb      	ldrb	r3, [r7, #7]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	58004000 	.word	0x58004000

08001cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001d08:	4b17      	ldr	r3, [pc, #92]	@ (8001d68 <HAL_InitTick+0x6c>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d024      	beq.n	8001d5a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d10:	f002 fb92 	bl	8004438 <HAL_RCC_GetHCLKFreq>
 8001d14:	4602      	mov	r2, r0
 8001d16:	4b14      	ldr	r3, [pc, #80]	@ (8001d68 <HAL_InitTick+0x6c>)
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d20:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f001 f85c 	bl	8002de6 <HAL_SYSTICK_Config>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10f      	bne.n	8001d54 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b0f      	cmp	r3, #15
 8001d38:	d809      	bhi.n	8001d4e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d42:	f001 f81a 	bl	8002d7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d46:	4a09      	ldr	r2, [pc, #36]	@ (8001d6c <HAL_InitTick+0x70>)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6013      	str	r3, [r2, #0]
 8001d4c:	e007      	b.n	8001d5e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	e004      	b.n	8001d5e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
 8001d58:	e001      	b.n	8001d5e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000010 	.word	0x20000010
 8001d6c:	2000000c 	.word	0x2000000c

08001d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d74:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <HAL_IncTick+0x20>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <HAL_IncTick+0x24>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4413      	add	r3, r2
 8001d80:	4a04      	ldr	r2, [pc, #16]	@ (8001d94 <HAL_IncTick+0x24>)
 8001d82:	6013      	str	r3, [r2, #0]
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	20000010 	.word	0x20000010
 8001d94:	2000020c 	.word	0x2000020c

08001d98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d9c:	4b03      	ldr	r3, [pc, #12]	@ (8001dac <HAL_GetTick+0x14>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	2000020c 	.word	0x2000020c

08001db0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001db4:	4b03      	ldr	r3, [pc, #12]	@ (8001dc4 <HAL_GetTickPrio+0x14>)
 8001db6:	681b      	ldr	r3, [r3, #0]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	2000000c 	.word	0x2000000c

08001dc8 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	431a      	orrs	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	431a      	orrs	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	609a      	str	r2, [r3, #8]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
 8001e3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	3360      	adds	r3, #96	@ 0x60
 8001e42:	461a      	mov	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4b08      	ldr	r3, [pc, #32]	@ (8001e74 <LL_ADC_SetOffset+0x44>)
 8001e52:	4013      	ands	r3, r2
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001e68:	bf00      	nop
 8001e6a:	371c      	adds	r7, #28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	03fff000 	.word	0x03fff000

08001e78 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3360      	adds	r3, #96	@ 0x60
 8001e86:	461a      	mov	r2, r3
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b087      	sub	sp, #28
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	3360      	adds	r3, #96	@ 0x60
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ece:	bf00      	nop
 8001ed0:	371c      	adds	r7, #28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b087      	sub	sp, #28
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	3330      	adds	r3, #48	@ 0x30
 8001eea:	461a      	mov	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	0a1b      	lsrs	r3, r3, #8
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	f003 030c 	and.w	r3, r3, #12
 8001ef6:	4413      	add	r3, r2
 8001ef8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	211f      	movs	r1, #31
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	401a      	ands	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	0e9b      	lsrs	r3, r3, #26
 8001f12:	f003 011f 	and.w	r1, r3, #31
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	f003 031f 	and.w	r3, r3, #31
 8001f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f20:	431a      	orrs	r2, r3
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001f26:	bf00      	nop
 8001f28:	371c      	adds	r7, #28
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b087      	sub	sp, #28
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	3314      	adds	r3, #20
 8001f42:	461a      	mov	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	0e5b      	lsrs	r3, r3, #25
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	4413      	add	r3, r2
 8001f50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	0d1b      	lsrs	r3, r3, #20
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	2107      	movs	r1, #7
 8001f60:	fa01 f303 	lsl.w	r3, r1, r3
 8001f64:	43db      	mvns	r3, r3
 8001f66:	401a      	ands	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	0d1b      	lsrs	r3, r3, #20
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	431a      	orrs	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001f7c:	bf00      	nop
 8001f7e:	371c      	adds	r7, #28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0318 	and.w	r3, r3, #24
 8001faa:	4908      	ldr	r1, [pc, #32]	@ (8001fcc <LL_ADC_SetChannelSingleDiff+0x44>)
 8001fac:	40d9      	lsrs	r1, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	400b      	ands	r3, r1
 8001fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	0007ffff 	.word	0x0007ffff

08001fd0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001fe0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6093      	str	r3, [r2, #8]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002004:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002008:	d101      	bne.n	800200e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800202c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002030:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002054:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002058:	d101      	bne.n	800205e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <LL_ADC_IsEnabled+0x18>
 8002080:	2301      	movs	r3, #1
 8002082:	e000      	b.n	8002086 <LL_ADC_IsEnabled+0x1a>
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002092:	b480      	push	{r7}
 8002094:	b083      	sub	sp, #12
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	d101      	bne.n	80020aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0308 	and.w	r3, r3, #8
 80020c8:	2b08      	cmp	r3, #8
 80020ca:	d101      	bne.n	80020d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e12e      	b.n	800235c <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002108:	2b00      	cmp	r3, #0
 800210a:	d109      	bne.n	8002120 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff fc4b 	bl	80019a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff ff65 	bl	8001ff4 <LL_ADC_IsDeepPowerDownEnabled>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d004      	beq.n	800213a <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff4b 	bl	8001fd0 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff ff80 	bl	8002044 <LL_ADC_IsInternalRegulatorEnabled>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d115      	bne.n	8002176 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff64 	bl	800201c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002154:	4b83      	ldr	r3, [pc, #524]	@ (8002364 <HAL_ADC_Init+0x284>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	099b      	lsrs	r3, r3, #6
 800215a:	4a83      	ldr	r2, [pc, #524]	@ (8002368 <HAL_ADC_Init+0x288>)
 800215c:	fba2 2303 	umull	r2, r3, r2, r3
 8002160:	099b      	lsrs	r3, r3, #6
 8002162:	3301      	adds	r3, #1
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002168:	e002      	b.n	8002170 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	3b01      	subs	r3, #1
 800216e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f9      	bne.n	800216a <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff ff62 	bl	8002044 <LL_ADC_IsInternalRegulatorEnabled>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10d      	bne.n	80021a2 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800218a:	f043 0210 	orr.w	r2, r3, #16
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002196:	f043 0201 	orr.w	r2, r3, #1
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff ff73 	bl	8002092 <LL_ADC_REG_IsConversionOngoing>
 80021ac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 80c7 	bne.w	800234a <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	f040 80c3 	bne.w	800234a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021c8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80021cc:	f043 0202 	orr.w	r2, r3, #2
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff47 	bl	800206c <LL_ADC_IsEnabled>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10b      	bne.n	80021fc <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021e4:	4861      	ldr	r0, [pc, #388]	@ (800236c <HAL_ADC_Init+0x28c>)
 80021e6:	f7ff ff41 	bl	800206c <LL_ADC_IsEnabled>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d105      	bne.n	80021fc <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	4619      	mov	r1, r3
 80021f6:	485e      	ldr	r0, [pc, #376]	@ (8002370 <HAL_ADC_Init+0x290>)
 80021f8:	f7ff fde6 	bl	8001dc8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7e5b      	ldrb	r3, [r3, #25]
 8002200:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002206:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800220c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002212:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f893 3020 	ldrb.w	r3, [r3, #32]
 800221a:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 800221c:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f893 3020 	ldrb.w	r3, [r3, #32]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d106      	bne.n	800223c <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002232:	3b01      	subs	r3, #1
 8002234:	045b      	lsls	r3, r3, #17
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002240:	2b00      	cmp	r3, #0
 8002242:	d009      	beq.n	8002258 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002248:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002250:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	4b45      	ldr	r3, [pc, #276]	@ (8002374 <HAL_ADC_Init+0x294>)
 8002260:	4013      	ands	r3, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6812      	ldr	r2, [r2, #0]
 8002266:	69b9      	ldr	r1, [r7, #24]
 8002268:	430b      	orrs	r3, r1
 800226a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff ff0e 	bl	8002092 <LL_ADC_REG_IsConversionOngoing>
 8002276:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff1b 	bl	80020b8 <LL_ADC_INJ_IsConversionOngoing>
 8002282:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d13d      	bne.n	8002306 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d13a      	bne.n	8002306 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002294:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800229c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022ac:	f023 0302 	bic.w	r3, r3, #2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	69b9      	ldr	r1, [r7, #24]
 80022b6:	430b      	orrs	r3, r1
 80022b8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d118      	bne.n	80022f6 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80022ce:	f023 0304 	bic.w	r3, r3, #4
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80022da:	4311      	orrs	r1, r2
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80022e0:	4311      	orrs	r1, r2
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022e6:	430a      	orrs	r2, r1
 80022e8:	431a      	orrs	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f042 0201 	orr.w	r2, r2, #1
 80022f2:	611a      	str	r2, [r3, #16]
 80022f4:	e007      	b.n	8002306 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0201 	bic.w	r2, r2, #1
 8002304:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d10c      	bne.n	8002328 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002314:	f023 010f 	bic.w	r1, r3, #15
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	1e5a      	subs	r2, r3, #1
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	631a      	str	r2, [r3, #48]	@ 0x30
 8002326:	e007      	b.n	8002338 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 020f 	bic.w	r2, r2, #15
 8002336:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800233c:	f023 0303 	bic.w	r3, r3, #3
 8002340:	f043 0201 	orr.w	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	655a      	str	r2, [r3, #84]	@ 0x54
 8002348:	e007      	b.n	800235a <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800234e:	f043 0210 	orr.w	r2, r3, #16
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800235a:	7ffb      	ldrb	r3, [r7, #31]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3720      	adds	r7, #32
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	20000008 	.word	0x20000008
 8002368:	053e2d63 	.word	0x053e2d63
 800236c:	50040000 	.word	0x50040000
 8002370:	50040300 	.word	0x50040300
 8002374:	fff0c007 	.word	0xfff0c007

08002378 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b0b6      	sub	sp, #216	@ 0xd8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002382:	2300      	movs	r3, #0
 8002384:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_ADC_ConfigChannel+0x22>
 8002396:	2302      	movs	r3, #2
 8002398:	e39f      	b.n	8002ada <HAL_ADC_ConfigChannel+0x762>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7ff fe73 	bl	8002092 <LL_ADC_REG_IsConversionOngoing>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 8384 	bne.w	8002abc <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6818      	ldr	r0, [r3, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	6859      	ldr	r1, [r3, #4]
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	461a      	mov	r2, r3
 80023c2:	f7ff fd8a 	bl	8001eda <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fe61 	bl	8002092 <LL_ADC_REG_IsConversionOngoing>
 80023d0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fe6d 	bl	80020b8 <LL_ADC_INJ_IsConversionOngoing>
 80023de:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f040 81a6 	bne.w	8002738 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f040 81a1 	bne.w	8002738 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	6819      	ldr	r1, [r3, #0]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	461a      	mov	r2, r3
 8002404:	f7ff fd95 	bl	8001f32 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	695a      	ldr	r2, [r3, #20]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	08db      	lsrs	r3, r3, #3
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	2b04      	cmp	r3, #4
 8002428:	d00a      	beq.n	8002440 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6818      	ldr	r0, [r3, #0]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	6919      	ldr	r1, [r3, #16]
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800243a:	f7ff fcf9 	bl	8001e30 <LL_ADC_SetOffset>
 800243e:	e17b      	b.n	8002738 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2100      	movs	r1, #0
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff fd16 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 800244c:	4603      	mov	r3, r0
 800244e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10a      	bne.n	800246c <HAL_ADC_ConfigChannel+0xf4>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2100      	movs	r1, #0
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff fd0b 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 8002462:	4603      	mov	r3, r0
 8002464:	0e9b      	lsrs	r3, r3, #26
 8002466:	f003 021f 	and.w	r2, r3, #31
 800246a:	e01e      	b.n	80024aa <HAL_ADC_ConfigChannel+0x132>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2100      	movs	r1, #0
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff fd00 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 8002478:	4603      	mov	r3, r0
 800247a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002482:	fa93 f3a3 	rbit	r3, r3
 8002486:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 800248a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800248e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8002492:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 800249a:	2320      	movs	r3, #32
 800249c:	e004      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 800249e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80024a2:	fab3 f383 	clz	r3, r3
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	461a      	mov	r2, r3
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d105      	bne.n	80024c2 <HAL_ADC_ConfigChannel+0x14a>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	0e9b      	lsrs	r3, r3, #26
 80024bc:	f003 031f 	and.w	r3, r3, #31
 80024c0:	e018      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x17c>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ca:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80024d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80024de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 80024e6:	2320      	movs	r3, #32
 80024e8:	e004      	b.n	80024f4 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80024ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80024ee:	fab3 f383 	clz	r3, r3
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d106      	bne.n	8002506 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2200      	movs	r2, #0
 80024fe:	2100      	movs	r1, #0
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fccf 	bl	8001ea4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2101      	movs	r1, #1
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff fcb3 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 8002512:	4603      	mov	r3, r0
 8002514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10a      	bne.n	8002532 <HAL_ADC_ConfigChannel+0x1ba>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2101      	movs	r1, #1
 8002522:	4618      	mov	r0, r3
 8002524:	f7ff fca8 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 8002528:	4603      	mov	r3, r0
 800252a:	0e9b      	lsrs	r3, r3, #26
 800252c:	f003 021f 	and.w	r2, r3, #31
 8002530:	e01e      	b.n	8002570 <HAL_ADC_ConfigChannel+0x1f8>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2101      	movs	r1, #1
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fc9d 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 800253e:	4603      	mov	r3, r0
 8002540:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002544:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002548:	fa93 f3a3 	rbit	r3, r3
 800254c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002550:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002554:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002558:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002560:	2320      	movs	r3, #32
 8002562:	e004      	b.n	800256e <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002564:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002568:	fab3 f383 	clz	r3, r3
 800256c:	b2db      	uxtb	r3, r3
 800256e:	461a      	mov	r2, r3
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002578:	2b00      	cmp	r3, #0
 800257a:	d105      	bne.n	8002588 <HAL_ADC_ConfigChannel+0x210>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	0e9b      	lsrs	r3, r3, #26
 8002582:	f003 031f 	and.w	r3, r3, #31
 8002586:	e018      	b.n	80025ba <HAL_ADC_ConfigChannel+0x242>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800259c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80025a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80025a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 80025ac:	2320      	movs	r3, #32
 80025ae:	e004      	b.n	80025ba <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 80025b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80025b4:	fab3 f383 	clz	r3, r3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d106      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2200      	movs	r2, #0
 80025c4:	2101      	movs	r1, #1
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7ff fc6c 	bl	8001ea4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2102      	movs	r1, #2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fc50 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 80025d8:	4603      	mov	r3, r0
 80025da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10a      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x280>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2102      	movs	r1, #2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fc45 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 80025ee:	4603      	mov	r3, r0
 80025f0:	0e9b      	lsrs	r3, r3, #26
 80025f2:	f003 021f 	and.w	r2, r3, #31
 80025f6:	e01e      	b.n	8002636 <HAL_ADC_ConfigChannel+0x2be>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2102      	movs	r1, #2
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fc3a 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 8002604:	4603      	mov	r3, r0
 8002606:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002616:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800261a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800261e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002626:	2320      	movs	r3, #32
 8002628:	e004      	b.n	8002634 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 800262a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800262e:	fab3 f383 	clz	r3, r3
 8002632:	b2db      	uxtb	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800263e:	2b00      	cmp	r3, #0
 8002640:	d105      	bne.n	800264e <HAL_ADC_ConfigChannel+0x2d6>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	0e9b      	lsrs	r3, r3, #26
 8002648:	f003 031f 	and.w	r3, r3, #31
 800264c:	e016      	b.n	800267c <HAL_ADC_ConfigChannel+0x304>
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800265a:	fa93 f3a3 	rbit	r3, r3
 800265e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002660:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002662:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002666:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800266e:	2320      	movs	r3, #32
 8002670:	e004      	b.n	800267c <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002672:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002676:	fab3 f383 	clz	r3, r3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	429a      	cmp	r2, r3
 800267e:	d106      	bne.n	800268e <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2200      	movs	r2, #0
 8002686:	2102      	movs	r1, #2
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fc0b 	bl	8001ea4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2103      	movs	r1, #3
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fbef 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 800269a:	4603      	mov	r3, r0
 800269c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d10a      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x342>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2103      	movs	r1, #3
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff fbe4 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 80026b0:	4603      	mov	r3, r0
 80026b2:	0e9b      	lsrs	r3, r3, #26
 80026b4:	f003 021f 	and.w	r2, r3, #31
 80026b8:	e017      	b.n	80026ea <HAL_ADC_ConfigChannel+0x372>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2103      	movs	r1, #3
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fbd9 	bl	8001e78 <LL_ADC_GetOffsetChannel>
 80026c6:	4603      	mov	r3, r0
 80026c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026cc:	fa93 f3a3 	rbit	r3, r3
 80026d0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80026d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80026d4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80026d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d101      	bne.n	80026e0 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 80026dc:	2320      	movs	r3, #32
 80026de:	e003      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 80026e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80026e2:	fab3 f383 	clz	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d105      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x38a>
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	0e9b      	lsrs	r3, r3, #26
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	e011      	b.n	8002726 <HAL_ADC_ConfigChannel+0x3ae>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002708:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002710:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002712:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002714:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800271a:	2320      	movs	r3, #32
 800271c:	e003      	b.n	8002726 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 800271e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002720:	fab3 f383 	clz	r3, r3
 8002724:	b2db      	uxtb	r3, r3
 8002726:	429a      	cmp	r2, r3
 8002728:	d106      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2200      	movs	r2, #0
 8002730:	2103      	movs	r1, #3
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff fbb6 	bl	8001ea4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fc95 	bl	800206c <LL_ADC_IsEnabled>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	f040 81c2 	bne.w	8002ace <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	6819      	ldr	r1, [r3, #0]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	461a      	mov	r2, r3
 8002758:	f7ff fc16 	bl	8001f88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4a8e      	ldr	r2, [pc, #568]	@ (800299c <HAL_ADC_ConfigChannel+0x624>)
 8002762:	4293      	cmp	r3, r2
 8002764:	f040 8130 	bne.w	80029c8 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002774:	2b00      	cmp	r3, #0
 8002776:	d10b      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x418>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	0e9b      	lsrs	r3, r3, #26
 800277e:	3301      	adds	r3, #1
 8002780:	f003 031f 	and.w	r3, r3, #31
 8002784:	2b09      	cmp	r3, #9
 8002786:	bf94      	ite	ls
 8002788:	2301      	movls	r3, #1
 800278a:	2300      	movhi	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	e019      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x44c>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002796:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002798:	fa93 f3a3 	rbit	r3, r3
 800279c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800279e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027a0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80027a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 80027a8:	2320      	movs	r3, #32
 80027aa:	e003      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 80027ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027ae:	fab3 f383 	clz	r3, r3
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	3301      	adds	r3, #1
 80027b6:	f003 031f 	and.w	r3, r3, #31
 80027ba:	2b09      	cmp	r3, #9
 80027bc:	bf94      	ite	ls
 80027be:	2301      	movls	r3, #1
 80027c0:	2300      	movhi	r3, #0
 80027c2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d079      	beq.n	80028bc <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d107      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x46c>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	0e9b      	lsrs	r3, r3, #26
 80027da:	3301      	adds	r3, #1
 80027dc:	069b      	lsls	r3, r3, #26
 80027de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027e2:	e015      	b.n	8002810 <HAL_ADC_ConfigChannel+0x498>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027ec:	fa93 f3a3 	rbit	r3, r3
 80027f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80027f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027f4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80027f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80027fc:	2320      	movs	r3, #32
 80027fe:	e003      	b.n	8002808 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002802:	fab3 f383 	clz	r3, r3
 8002806:	b2db      	uxtb	r3, r3
 8002808:	3301      	adds	r3, #1
 800280a:	069b      	lsls	r3, r3, #26
 800280c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002818:	2b00      	cmp	r3, #0
 800281a:	d109      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x4b8>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	0e9b      	lsrs	r3, r3, #26
 8002822:	3301      	adds	r3, #1
 8002824:	f003 031f 	and.w	r3, r3, #31
 8002828:	2101      	movs	r1, #1
 800282a:	fa01 f303 	lsl.w	r3, r1, r3
 800282e:	e017      	b.n	8002860 <HAL_ADC_ConfigChannel+0x4e8>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002836:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002838:	fa93 f3a3 	rbit	r3, r3
 800283c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800283e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002840:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002848:	2320      	movs	r3, #32
 800284a:	e003      	b.n	8002854 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 800284c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800284e:	fab3 f383 	clz	r3, r3
 8002852:	b2db      	uxtb	r3, r3
 8002854:	3301      	adds	r3, #1
 8002856:	f003 031f 	and.w	r3, r3, #31
 800285a:	2101      	movs	r1, #1
 800285c:	fa01 f303 	lsl.w	r3, r1, r3
 8002860:	ea42 0103 	orr.w	r1, r2, r3
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10a      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x50e>
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	0e9b      	lsrs	r3, r3, #26
 8002876:	3301      	adds	r3, #1
 8002878:	f003 021f 	and.w	r2, r3, #31
 800287c:	4613      	mov	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4413      	add	r3, r2
 8002882:	051b      	lsls	r3, r3, #20
 8002884:	e018      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x540>
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002896:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800289e:	2320      	movs	r3, #32
 80028a0:	e003      	b.n	80028aa <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80028a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	3301      	adds	r3, #1
 80028ac:	f003 021f 	and.w	r2, r3, #31
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028b8:	430b      	orrs	r3, r1
 80028ba:	e080      	b.n	80029be <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d107      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x560>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	0e9b      	lsrs	r3, r3, #26
 80028ce:	3301      	adds	r3, #1
 80028d0:	069b      	lsls	r3, r3, #26
 80028d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028d6:	e015      	b.n	8002904 <HAL_ADC_ConfigChannel+0x58c>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80028e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028e8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80028ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80028f0:	2320      	movs	r3, #32
 80028f2:	e003      	b.n	80028fc <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80028f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	3301      	adds	r3, #1
 80028fe:	069b      	lsls	r3, r3, #26
 8002900:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290c:	2b00      	cmp	r3, #0
 800290e:	d109      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x5ac>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	0e9b      	lsrs	r3, r3, #26
 8002916:	3301      	adds	r3, #1
 8002918:	f003 031f 	and.w	r3, r3, #31
 800291c:	2101      	movs	r1, #1
 800291e:	fa01 f303 	lsl.w	r3, r1, r3
 8002922:	e017      	b.n	8002954 <HAL_ADC_ConfigChannel+0x5dc>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	fa93 f3a3 	rbit	r3, r3
 8002930:	61fb      	str	r3, [r7, #28]
  return result;
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 800293c:	2320      	movs	r3, #32
 800293e:	e003      	b.n	8002948 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002942:	fab3 f383 	clz	r3, r3
 8002946:	b2db      	uxtb	r3, r3
 8002948:	3301      	adds	r3, #1
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	2101      	movs	r1, #1
 8002950:	fa01 f303 	lsl.w	r3, r1, r3
 8002954:	ea42 0103 	orr.w	r1, r2, r3
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10d      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x608>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	0e9b      	lsrs	r3, r3, #26
 800296a:	3301      	adds	r3, #1
 800296c:	f003 021f 	and.w	r2, r3, #31
 8002970:	4613      	mov	r3, r2
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	4413      	add	r3, r2
 8002976:	3b1e      	subs	r3, #30
 8002978:	051b      	lsls	r3, r3, #20
 800297a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800297e:	e01d      	b.n	80029bc <HAL_ADC_ConfigChannel+0x644>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	fa93 f3a3 	rbit	r3, r3
 800298c:	613b      	str	r3, [r7, #16]
  return result;
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d103      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002998:	2320      	movs	r3, #32
 800299a:	e005      	b.n	80029a8 <HAL_ADC_ConfigChannel+0x630>
 800299c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	fab3 f383 	clz	r3, r3
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	3301      	adds	r3, #1
 80029aa:	f003 021f 	and.w	r2, r3, #31
 80029ae:	4613      	mov	r3, r2
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	4413      	add	r3, r2
 80029b4:	3b1e      	subs	r3, #30
 80029b6:	051b      	lsls	r3, r3, #20
 80029b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029bc:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029c2:	4619      	mov	r1, r3
 80029c4:	f7ff fab5 	bl	8001f32 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	4b45      	ldr	r3, [pc, #276]	@ (8002ae4 <HAL_ADC_ConfigChannel+0x76c>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d07c      	beq.n	8002ace <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029d4:	4844      	ldr	r0, [pc, #272]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x770>)
 80029d6:	f7ff fa1d 	bl	8001e14 <LL_ADC_GetCommonPathInternalCh>
 80029da:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029de:	4843      	ldr	r0, [pc, #268]	@ (8002aec <HAL_ADC_ConfigChannel+0x774>)
 80029e0:	f7ff fb44 	bl	800206c <LL_ADC_IsEnabled>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d15e      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a40      	ldr	r2, [pc, #256]	@ (8002af0 <HAL_ADC_ConfigChannel+0x778>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d127      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x6cc>
 80029f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80029f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d121      	bne.n	8002a44 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a39      	ldr	r2, [pc, #228]	@ (8002aec <HAL_ADC_ConfigChannel+0x774>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d161      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002a0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a0e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a12:	4619      	mov	r1, r3
 8002a14:	4834      	ldr	r0, [pc, #208]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x770>)
 8002a16:	f7ff f9ea 	bl	8001dee <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a1a:	4b36      	ldr	r3, [pc, #216]	@ (8002af4 <HAL_ADC_ConfigChannel+0x77c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	099b      	lsrs	r3, r3, #6
 8002a20:	4a35      	ldr	r2, [pc, #212]	@ (8002af8 <HAL_ADC_ConfigChannel+0x780>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	099b      	lsrs	r3, r3, #6
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	005b      	lsls	r3, r3, #1
 8002a2e:	4413      	add	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002a34:	e002      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f9      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a42:	e044      	b.n	8002ace <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a2c      	ldr	r2, [pc, #176]	@ (8002afc <HAL_ADC_ConfigChannel+0x784>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d113      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x6fe>
 8002a4e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10d      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a23      	ldr	r2, [pc, #140]	@ (8002aec <HAL_ADC_ConfigChannel+0x774>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d134      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002a64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	481e      	ldr	r0, [pc, #120]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x770>)
 8002a70:	f7ff f9bd 	bl	8001dee <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a74:	e02b      	b.n	8002ace <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a21      	ldr	r2, [pc, #132]	@ (8002b00 <HAL_ADC_ConfigChannel+0x788>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d126      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x756>
 8002a80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a84:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d120      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a16      	ldr	r2, [pc, #88]	@ (8002aec <HAL_ADC_ConfigChannel+0x774>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d11b      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002a96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002a9a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4811      	ldr	r0, [pc, #68]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x770>)
 8002aa2:	f7ff f9a4 	bl	8001dee <LL_ADC_SetCommonPathInternalCh>
 8002aa6:	e012      	b.n	8002ace <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aac:	f043 0220 	orr.w	r2, r3, #32
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002aba:	e008      	b.n	8002ace <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ac0:	f043 0220 	orr.w	r2, r3, #32
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8002ad6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	37d8      	adds	r7, #216	@ 0xd8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	80080000 	.word	0x80080000
 8002ae8:	50040300 	.word	0x50040300
 8002aec:	50040000 	.word	0x50040000
 8002af0:	c7520000 	.word	0xc7520000
 8002af4:	20000008 	.word	0x20000008
 8002af8:	053e2d63 	.word	0x053e2d63
 8002afc:	cb840000 	.word	0xcb840000
 8002b00:	80000001 	.word	0x80000001

08002b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b14:	4b0c      	ldr	r3, [pc, #48]	@ (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b20:	4013      	ands	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b36:	4a04      	ldr	r2, [pc, #16]	@ (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	60d3      	str	r3, [r2, #12]
}
 8002b3c:	bf00      	nop
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000ed00 	.word	0xe000ed00

08002b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b50:	4b04      	ldr	r3, [pc, #16]	@ (8002b64 <__NVIC_GetPriorityGrouping+0x18>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	f003 0307 	and.w	r3, r3, #7
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	db0b      	blt.n	8002b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	f003 021f 	and.w	r2, r3, #31
 8002b80:	4907      	ldr	r1, [pc, #28]	@ (8002ba0 <__NVIC_EnableIRQ+0x38>)
 8002b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	2001      	movs	r0, #1
 8002b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000e100 	.word	0xe000e100

08002ba4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	db12      	blt.n	8002bdc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bb6:	79fb      	ldrb	r3, [r7, #7]
 8002bb8:	f003 021f 	and.w	r2, r3, #31
 8002bbc:	490a      	ldr	r1, [pc, #40]	@ (8002be8 <__NVIC_DisableIRQ+0x44>)
 8002bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	2001      	movs	r0, #1
 8002bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002bca:	3320      	adds	r3, #32
 8002bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002bd0:	f3bf 8f4f 	dsb	sy
}
 8002bd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002bd6:	f3bf 8f6f 	isb	sy
}
 8002bda:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000e100 	.word	0xe000e100

08002bec <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	db0c      	blt.n	8002c18 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	f003 021f 	and.w	r2, r3, #31
 8002c04:	4907      	ldr	r1, [pc, #28]	@ (8002c24 <__NVIC_SetPendingIRQ+0x38>)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	2001      	movs	r0, #1
 8002c0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c12:	3340      	adds	r3, #64	@ 0x40
 8002c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	e000e100 	.word	0xe000e100

08002c28 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	db0c      	blt.n	8002c54 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	f003 021f 	and.w	r2, r3, #31
 8002c40:	4907      	ldr	r1, [pc, #28]	@ (8002c60 <__NVIC_ClearPendingIRQ+0x38>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	2001      	movs	r0, #1
 8002c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c4e:	3360      	adds	r3, #96	@ 0x60
 8002c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000e100 	.word	0xe000e100

08002c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	6039      	str	r1, [r7, #0]
 8002c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	db0a      	blt.n	8002c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	490c      	ldr	r1, [pc, #48]	@ (8002cb0 <__NVIC_SetPriority+0x4c>)
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	0112      	lsls	r2, r2, #4
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	440b      	add	r3, r1
 8002c88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c8c:	e00a      	b.n	8002ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	4908      	ldr	r1, [pc, #32]	@ (8002cb4 <__NVIC_SetPriority+0x50>)
 8002c94:	79fb      	ldrb	r3, [r7, #7]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	3b04      	subs	r3, #4
 8002c9c:	0112      	lsls	r2, r2, #4
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	761a      	strb	r2, [r3, #24]
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000e100 	.word	0xe000e100
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b089      	sub	sp, #36	@ 0x24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	f1c3 0307 	rsb	r3, r3, #7
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	bf28      	it	cs
 8002cd6:	2304      	movcs	r3, #4
 8002cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	3304      	adds	r3, #4
 8002cde:	2b06      	cmp	r3, #6
 8002ce0:	d902      	bls.n	8002ce8 <NVIC_EncodePriority+0x30>
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3b03      	subs	r3, #3
 8002ce6:	e000      	b.n	8002cea <NVIC_EncodePriority+0x32>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cec:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43da      	mvns	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d00:	f04f 31ff 	mov.w	r1, #4294967295
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0a:	43d9      	mvns	r1, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d10:	4313      	orrs	r3, r2
         );
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3724      	adds	r7, #36	@ 0x24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
	...

08002d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d30:	d301      	bcc.n	8002d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d32:	2301      	movs	r3, #1
 8002d34:	e00f      	b.n	8002d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d36:	4a0a      	ldr	r2, [pc, #40]	@ (8002d60 <SysTick_Config+0x40>)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d3e:	210f      	movs	r1, #15
 8002d40:	f04f 30ff 	mov.w	r0, #4294967295
 8002d44:	f7ff ff8e 	bl	8002c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d48:	4b05      	ldr	r3, [pc, #20]	@ (8002d60 <SysTick_Config+0x40>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d4e:	4b04      	ldr	r3, [pc, #16]	@ (8002d60 <SysTick_Config+0x40>)
 8002d50:	2207      	movs	r2, #7
 8002d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	e000e010 	.word	0xe000e010

08002d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff fec9 	bl	8002b04 <__NVIC_SetPriorityGrouping>
}
 8002d72:	bf00      	nop
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b086      	sub	sp, #24
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	4603      	mov	r3, r0
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d88:	f7ff fee0 	bl	8002b4c <__NVIC_GetPriorityGrouping>
 8002d8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	6978      	ldr	r0, [r7, #20]
 8002d94:	f7ff ff90 	bl	8002cb8 <NVIC_EncodePriority>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff5f 	bl	8002c64 <__NVIC_SetPriority>
}
 8002da6:	bf00      	nop
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b082      	sub	sp, #8
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fed3 	bl	8002b68 <__NVIC_EnableIRQ>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b082      	sub	sp, #8
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fee3 	bl	8002ba4 <__NVIC_DisableIRQ>
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f7ff ff96 	bl	8002d20 <SysTick_Config>
 8002df4:	4603      	mov	r3, r0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	4603      	mov	r3, r0
 8002e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f7ff feed 	bl	8002bec <__NVIC_SetPendingIRQ>
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}

08002e1a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002e1a:	b580      	push	{r7, lr}
 8002e1c:	b082      	sub	sp, #8
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4603      	mov	r3, r0
 8002e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff fefd 	bl	8002c28 <__NVIC_ClearPendingIRQ>
}
 8002e2e:	bf00      	nop
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e42:	2300      	movs	r3, #0
 8002e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e46:	e14c      	b.n	80030e2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	fa01 f303 	lsl.w	r3, r1, r3
 8002e54:	4013      	ands	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 813e 	beq.w	80030dc <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d005      	beq.n	8002e78 <HAL_GPIO_Init+0x40>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d130      	bne.n	8002eda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	2203      	movs	r2, #3
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002eae:	2201      	movs	r2, #1
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	091b      	lsrs	r3, r3, #4
 8002ec4:	f003 0201 	and.w	r2, r3, #1
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f003 0303 	and.w	r3, r3, #3
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d017      	beq.n	8002f16 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	2203      	movs	r2, #3
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	4013      	ands	r3, r2
 8002efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	689a      	ldr	r2, [r3, #8]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d123      	bne.n	8002f6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	08da      	lsrs	r2, r3, #3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	3208      	adds	r2, #8
 8002f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	220f      	movs	r2, #15
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4013      	ands	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	691a      	ldr	r2, [r3, #16]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	08da      	lsrs	r2, r3, #3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3208      	adds	r2, #8
 8002f64:	6939      	ldr	r1, [r7, #16]
 8002f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	2203      	movs	r2, #3
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 0203 	and.w	r2, r3, #3
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f000 8098 	beq.w	80030dc <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002fac:	4a54      	ldr	r2, [pc, #336]	@ (8003100 <HAL_GPIO_Init+0x2c8>)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	089b      	lsrs	r3, r3, #2
 8002fb2:	3302      	adds	r3, #2
 8002fb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	220f      	movs	r2, #15
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002fd6:	d019      	beq.n	800300c <HAL_GPIO_Init+0x1d4>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a4a      	ldr	r2, [pc, #296]	@ (8003104 <HAL_GPIO_Init+0x2cc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d013      	beq.n	8003008 <HAL_GPIO_Init+0x1d0>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a49      	ldr	r2, [pc, #292]	@ (8003108 <HAL_GPIO_Init+0x2d0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00d      	beq.n	8003004 <HAL_GPIO_Init+0x1cc>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a48      	ldr	r2, [pc, #288]	@ (800310c <HAL_GPIO_Init+0x2d4>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d007      	beq.n	8003000 <HAL_GPIO_Init+0x1c8>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a47      	ldr	r2, [pc, #284]	@ (8003110 <HAL_GPIO_Init+0x2d8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d101      	bne.n	8002ffc <HAL_GPIO_Init+0x1c4>
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	e008      	b.n	800300e <HAL_GPIO_Init+0x1d6>
 8002ffc:	2307      	movs	r3, #7
 8002ffe:	e006      	b.n	800300e <HAL_GPIO_Init+0x1d6>
 8003000:	2303      	movs	r3, #3
 8003002:	e004      	b.n	800300e <HAL_GPIO_Init+0x1d6>
 8003004:	2302      	movs	r3, #2
 8003006:	e002      	b.n	800300e <HAL_GPIO_Init+0x1d6>
 8003008:	2301      	movs	r3, #1
 800300a:	e000      	b.n	800300e <HAL_GPIO_Init+0x1d6>
 800300c:	2300      	movs	r3, #0
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	f002 0203 	and.w	r2, r2, #3
 8003014:	0092      	lsls	r2, r2, #2
 8003016:	4093      	lsls	r3, r2
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800301e:	4938      	ldr	r1, [pc, #224]	@ (8003100 <HAL_GPIO_Init+0x2c8>)
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	089b      	lsrs	r3, r3, #2
 8003024:	3302      	adds	r3, #2
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800302c:	4b39      	ldr	r3, [pc, #228]	@ (8003114 <HAL_GPIO_Init+0x2dc>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	43db      	mvns	r3, r3
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4013      	ands	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003050:	4a30      	ldr	r2, [pc, #192]	@ (8003114 <HAL_GPIO_Init+0x2dc>)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003056:	4b2f      	ldr	r3, [pc, #188]	@ (8003114 <HAL_GPIO_Init+0x2dc>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	43db      	mvns	r3, r3
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4013      	ands	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4313      	orrs	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800307a:	4a26      	ldr	r2, [pc, #152]	@ (8003114 <HAL_GPIO_Init+0x2dc>)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003080:	4b24      	ldr	r3, [pc, #144]	@ (8003114 <HAL_GPIO_Init+0x2dc>)
 8003082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003086:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	43db      	mvns	r3, r3
 800308c:	693a      	ldr	r2, [r7, #16]
 800308e:	4013      	ands	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030a6:	4a1b      	ldr	r2, [pc, #108]	@ (8003114 <HAL_GPIO_Init+0x2dc>)
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80030ae:	4b19      	ldr	r3, [pc, #100]	@ (8003114 <HAL_GPIO_Init+0x2dc>)
 80030b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4013      	ands	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030d4:	4a0f      	ldr	r2, [pc, #60]	@ (8003114 <HAL_GPIO_Init+0x2dc>)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	3301      	adds	r3, #1
 80030e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	fa22 f303 	lsr.w	r3, r2, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f47f aeab 	bne.w	8002e48 <HAL_GPIO_Init+0x10>
  }
}
 80030f2:	bf00      	nop
 80030f4:	bf00      	nop
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	40010000 	.word	0x40010000
 8003104:	48000400 	.word	0x48000400
 8003108:	48000800 	.word	0x48000800
 800310c:	48000c00 	.word	0x48000c00
 8003110:	48001000 	.word	0x48001000
 8003114:	58000800 	.word	0x58000800

08003118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	807b      	strh	r3, [r7, #2]
 8003124:	4613      	mov	r3, r2
 8003126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003128:	787b      	ldrb	r3, [r7, #1]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800312e:	887a      	ldrh	r2, [r7, #2]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003134:	e002      	b.n	800313c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003136:	887a      	ldrh	r2, [r7, #2]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800315a:	887a      	ldrh	r2, [r7, #2]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4013      	ands	r3, r2
 8003160:	041a      	lsls	r2, r3, #16
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	43d9      	mvns	r1, r3
 8003166:	887b      	ldrh	r3, [r7, #2]
 8003168:	400b      	ands	r3, r1
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	619a      	str	r2, [r3, #24]
}
 8003170:	bf00      	nop
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003186:	4b08      	ldr	r3, [pc, #32]	@ (80031a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003188:	68da      	ldr	r2, [r3, #12]
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	4013      	ands	r3, r2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d006      	beq.n	80031a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003192:	4a05      	ldr	r2, [pc, #20]	@ (80031a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003198:	88fb      	ldrh	r3, [r7, #6]
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd fb93 	bl	80008c6 <HAL_GPIO_EXTI_Callback>
  }
}
 80031a0:	bf00      	nop
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	58000800 	.word	0x58000800

080031ac <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80031b2:	4b0a      	ldr	r3, [pc, #40]	@ (80031dc <HAL_HSEM_IRQHandler+0x30>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80031b8:	4b08      	ldr	r3, [pc, #32]	@ (80031dc <HAL_HSEM_IRQHandler+0x30>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	43db      	mvns	r3, r3
 80031c0:	4906      	ldr	r1, [pc, #24]	@ (80031dc <HAL_HSEM_IRQHandler+0x30>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80031c6:	4a05      	ldr	r2, [pc, #20]	@ (80031dc <HAL_HSEM_IRQHandler+0x30>)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f807 	bl	80031e0 <HAL_HSEM_FreeCallback>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	58001500 	.word	0x58001500

080031e0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80031fc:	2300      	movs	r3, #0
 80031fe:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01e      	beq.n	8003244 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003206:	4b13      	ldr	r3, [pc, #76]	@ (8003254 <HAL_IPCC_Init+0x60>)
 8003208:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d102      	bne.n	800321c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7fe fc18 	bl	8001a4c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800321c:	68b8      	ldr	r0, [r7, #8]
 800321e:	f000 f85b 	bl	80032d8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f82c 	bl	800328c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8003242:	e001      	b.n	8003248 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003248:	7bfb      	ldrb	r3, [r7, #15]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	58000c00 	.word	0x58000c00

08003258 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	4613      	mov	r3, r2
 8003264:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003266:	bf00      	nop
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003272:	b480      	push	{r7}
 8003274:	b085      	sub	sp, #20
 8003276:	af00      	add	r7, sp, #0
 8003278:	60f8      	str	r0, [r7, #12]
 800327a:	60b9      	str	r1, [r7, #8]
 800327c:	4613      	mov	r3, r2
 800327e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003294:	2300      	movs	r3, #0
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	e00f      	b.n	80032ba <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	4a0b      	ldr	r2, [pc, #44]	@ (80032d0 <IPCC_SetDefaultCallbacks+0x44>)
 80032a4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	3306      	adds	r3, #6
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	4a08      	ldr	r2, [pc, #32]	@ (80032d4 <IPCC_SetDefaultCallbacks+0x48>)
 80032b2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	3301      	adds	r3, #1
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2b05      	cmp	r3, #5
 80032be:	d9ec      	bls.n	800329a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80032c0:	bf00      	nop
 80032c2:	bf00      	nop
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	08003259 	.word	0x08003259
 80032d4:	08003273 	.word	0x08003273

080032d8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 80032ec:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	223f      	movs	r2, #63	@ 0x3f
 80032f2:	609a      	str	r2, [r3, #8]
}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003300:	b480      	push	{r7}
 8003302:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003304:	4b05      	ldr	r3, [pc, #20]	@ (800331c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a04      	ldr	r2, [pc, #16]	@ (800331c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800330a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800330e:	6013      	str	r3, [r2, #0]
}
 8003310:	bf00      	nop
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	58000400 	.word	0x58000400

08003320 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003324:	4b04      	ldr	r3, [pc, #16]	@ (8003338 <HAL_PWREx_GetVoltageRange+0x18>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800332c:	4618      	mov	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	58000400 	.word	0x58000400

0800333c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800334a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800334e:	d101      	bne.n	8003354 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <LL_RCC_HSE_Enable>:
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800336e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003372:	6013      	str	r3, [r2, #0]
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <LL_RCC_HSE_Disable>:
{
 800337e:	b480      	push	{r7}
 8003380:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003382:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800338c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003390:	6013      	str	r3, [r2, #0]
}
 8003392:	bf00      	nop
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <LL_RCC_HSE_IsReady>:
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80033a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033ae:	d101      	bne.n	80033b4 <LL_RCC_HSE_IsReady+0x18>
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <LL_RCC_HSE_IsReady+0x1a>
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <LL_RCC_HSI_Enable>:
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80033c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033d2:	6013      	str	r3, [r2, #0]
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <LL_RCC_HSI_Disable>:
{
 80033de:	b480      	push	{r7}
 80033e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80033e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80033ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033f0:	6013      	str	r3, [r2, #0]
}
 80033f2:	bf00      	nop
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <LL_RCC_HSI_IsReady>:
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800340a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800340e:	d101      	bne.n	8003414 <LL_RCC_HSI_IsReady+0x18>
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <LL_RCC_HSI_IsReady+0x1a>
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003428:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	061b      	lsls	r3, r3, #24
 8003436:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800343a:	4313      	orrs	r3, r2
 800343c:	604b      	str	r3, [r1, #4]
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <LL_RCC_HSI48_Enable>:
{
 800344a:	b480      	push	{r7}
 800344c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800344e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003452:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003456:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003462:	bf00      	nop
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <LL_RCC_HSI48_Disable>:
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003474:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003478:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800347c:	f023 0301 	bic.w	r3, r3, #1
 8003480:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003484:	bf00      	nop
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <LL_RCC_HSI48_IsReady>:
{
 800348e:	b480      	push	{r7}
 8003490:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003496:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d101      	bne.n	80034a6 <LL_RCC_HSI48_IsReady+0x18>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <LL_RCC_HSI48_IsReady+0x1a>
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr

080034b2 <LL_RCC_LSE_Enable>:
{
 80034b2:	b480      	push	{r7}
 80034b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80034b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80034ca:	bf00      	nop
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <LL_RCC_LSE_Disable>:
{
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80034d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80034ec:	bf00      	nop
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <LL_RCC_LSE_EnableBypass>:
{
 80034f6:	b480      	push	{r7}
 80034f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80034fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003502:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003506:	f043 0304 	orr.w	r3, r3, #4
 800350a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800350e:	bf00      	nop
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <LL_RCC_LSE_DisableBypass>:
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800351c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003524:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003528:	f023 0304 	bic.w	r3, r3, #4
 800352c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <LL_RCC_LSE_IsReady>:
{
 800353a:	b480      	push	{r7}
 800353c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800353e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b02      	cmp	r3, #2
 800354c:	d101      	bne.n	8003552 <LL_RCC_LSE_IsReady+0x18>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <LL_RCC_LSE_IsReady+0x1a>
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <LL_RCC_LSI1_Enable>:
{
 800355e:	b480      	push	{r7}
 8003560:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800356a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003576:	bf00      	nop
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <LL_RCC_LSI1_Disable>:
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003588:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800358c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003590:	f023 0301 	bic.w	r3, r3, #1
 8003594:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003598:	bf00      	nop
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr

080035a2 <LL_RCC_LSI1_IsReady>:
{
 80035a2:	b480      	push	{r7}
 80035a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80035a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d101      	bne.n	80035ba <LL_RCC_LSI1_IsReady+0x18>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e000      	b.n	80035bc <LL_RCC_LSI1_IsReady+0x1a>
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr

080035c6 <LL_RCC_LSI2_Enable>:
{
 80035c6:	b480      	push	{r7}
 80035c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80035ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035d6:	f043 0304 	orr.w	r3, r3, #4
 80035da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80035de:	bf00      	nop
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <LL_RCC_LSI2_Disable>:
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80035ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035f8:	f023 0304 	bic.w	r3, r3, #4
 80035fc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8003600:	bf00      	nop
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <LL_RCC_LSI2_IsReady>:
{
 800360a:	b480      	push	{r7}
 800360c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800360e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003612:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b08      	cmp	r3, #8
 800361c:	d101      	bne.n	8003622 <LL_RCC_LSI2_IsReady+0x18>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <LL_RCC_LSI2_IsReady+0x1a>
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <LL_RCC_LSI2_SetTrimming>:
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800363a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800363e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	021b      	lsls	r3, r3, #8
 8003646:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <LL_RCC_MSI_Enable>:
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003660:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	6013      	str	r3, [r2, #0]
}
 8003670:	bf00      	nop
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <LL_RCC_MSI_Disable>:
{
 800367a:	b480      	push	{r7}
 800367c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800367e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003688:	f023 0301 	bic.w	r3, r3, #1
 800368c:	6013      	str	r3, [r2, #0]
}
 800368e:	bf00      	nop
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <LL_RCC_MSI_IsReady>:
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800369c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d101      	bne.n	80036ae <LL_RCC_MSI_IsReady+0x16>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <LL_RCC_MSI_IsReady+0x18>
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	46bd      	mov	sp, r7
 80036b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b8:	4770      	bx	lr

080036ba <LL_RCC_MSI_SetRange>:
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80036c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	600b      	str	r3, [r1, #0]
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <LL_RCC_MSI_GetRange>:
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80036e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80036f2:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2bb0      	cmp	r3, #176	@ 0xb0
 80036f8:	d901      	bls.n	80036fe <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80036fa:	23b0      	movs	r3, #176	@ 0xb0
 80036fc:	607b      	str	r3, [r7, #4]
  return msiRange;
 80036fe:	687b      	ldr	r3, [r7, #4]
}
 8003700:	4618      	mov	r0, r3
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <LL_RCC_MSI_SetCalibTrimming>:
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003714:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	021b      	lsls	r3, r3, #8
 8003722:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003726:	4313      	orrs	r3, r2
 8003728:	604b      	str	r3, [r1, #4]
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <LL_RCC_SetSysClkSource>:
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800373e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f023 0203 	bic.w	r2, r3, #3
 8003748:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4313      	orrs	r3, r2
 8003750:	608b      	str	r3, [r1, #8]
}
 8003752:	bf00      	nop
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <LL_RCC_GetSysClkSource>:
{
 800375e:	b480      	push	{r7}
 8003760:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 030c 	and.w	r3, r3, #12
}
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <LL_RCC_SetAHBPrescaler>:
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800377e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003788:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4313      	orrs	r3, r2
 8003790:	608b      	str	r3, [r1, #8]
}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr

0800379e <LL_C2_RCC_SetAHBPrescaler>:
{
 800379e:	b480      	push	{r7}
 80037a0:	b083      	sub	sp, #12
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80037a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037aa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80037ae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80037be:	bf00      	nop
 80037c0:	370c      	adds	r7, #12
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr

080037ca <LL_RCC_SetAHB4Prescaler>:
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80037d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80037d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80037da:	f023 020f 	bic.w	r2, r3, #15
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	091b      	lsrs	r3, r3, #4
 80037e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <LL_RCC_SetAPB1Prescaler>:
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003800:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800380a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4313      	orrs	r3, r2
 8003812:	608b      	str	r3, [r1, #8]
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <LL_RCC_SetAPB2Prescaler>:
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003832:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4313      	orrs	r3, r2
 800383a:	608b      	str	r3, [r1, #8]
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <LL_RCC_GetAHBPrescaler>:
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800384c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003856:	4618      	mov	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <LL_RCC_GetAHB4Prescaler>:
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003864:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003868:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003872:	4618      	mov	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <LL_RCC_PLL_Enable>:
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800388a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800388e:	6013      	str	r3, [r2, #0]
}
 8003890:	bf00      	nop
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <LL_RCC_PLL_Disable>:
{
 800389a:	b480      	push	{r7}
 800389c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800389e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038a8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038ac:	6013      	str	r3, [r2, #0]
}
 80038ae:	bf00      	nop
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <LL_RCC_PLL_IsReady>:
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80038bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038ca:	d101      	bne.n	80038d0 <LL_RCC_PLL_IsReady+0x18>
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <LL_RCC_PLL_IsReady+0x1a>
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <LL_RCC_PLL_GetN>:
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80038e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	0a1b      	lsrs	r3, r3, #8
 80038e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <LL_RCC_PLL_GetR>:
{
 80038f6:	b480      	push	{r7}
 80038f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80038fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8003904:	4618      	mov	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <LL_RCC_PLL_GetDivider>:
{
 800390e:	b480      	push	{r7}
 8003910:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800391c:	4618      	mov	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <LL_RCC_PLL_GetMainSource>:
{
 8003926:	b480      	push	{r7}
 8003928:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800392a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	f003 0303 	and.w	r3, r3, #3
}
 8003934:	4618      	mov	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <LL_RCC_IsActiveFlag_HPRE>:
{
 800393e:	b480      	push	{r7}
 8003940:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003942:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800394c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003950:	d101      	bne.n	8003956 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8003962:	b480      	push	{r7}
 8003964:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800396a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800396e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003972:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003976:	d101      	bne.n	800397c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003978:	2301      	movs	r3, #1
 800397a:	e000      	b.n	800397e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800398c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003990:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8003994:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003998:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800399c:	d101      	bne.n	80039a2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800399e:	2301      	movs	r3, #1
 80039a0:	e000      	b.n	80039a4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <LL_RCC_IsActiveFlag_PPRE1>:
{
 80039ae:	b480      	push	{r7}
 80039b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80039b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039c0:	d101      	bne.n	80039c6 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <LL_RCC_IsActiveFlag_PPRE2>:
{
 80039d2:	b480      	push	{r7}
 80039d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80039d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039e0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039e4:	d101      	bne.n	80039ea <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f8:	b590      	push	{r4, r7, lr}
 80039fa:	b08d      	sub	sp, #52	@ 0x34
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e363      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 808d 	beq.w	8003b32 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a18:	f7ff fea1 	bl	800375e <LL_RCC_GetSysClkSource>
 8003a1c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a1e:	f7ff ff82 	bl	8003926 <LL_RCC_PLL_GetMainSource>
 8003a22:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <HAL_RCC_OscConfig+0x3e>
 8003a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a2c:	2b0c      	cmp	r3, #12
 8003a2e:	d147      	bne.n	8003ac0 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d144      	bne.n	8003ac0 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e347      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8003a46:	f7ff fe4c 	bl	80036e2 <LL_RCC_MSI_GetRange>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	429c      	cmp	r4, r3
 8003a4e:	d914      	bls.n	8003a7a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 fd03 	bl	8004460 <RCC_SetFlashLatencyFromMSIRange>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e336      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff fe26 	bl	80036ba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7ff fe4a 	bl	800370c <LL_RCC_MSI_SetCalibTrimming>
 8003a78:	e013      	b.n	8003aa2 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff fe1b 	bl	80036ba <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7ff fe3f 	bl	800370c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fce4 	bl	8004460 <RCC_SetFlashLatencyFromMSIRange>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e317      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003aa2:	f000 fcc9 	bl	8004438 <HAL_RCC_GetHCLKFreq>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	4aa4      	ldr	r2, [pc, #656]	@ (8003d3c <HAL_RCC_OscConfig+0x344>)
 8003aaa:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003aac:	4ba4      	ldr	r3, [pc, #656]	@ (8003d40 <HAL_RCC_OscConfig+0x348>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7fe f923 	bl	8001cfc <HAL_InitTick>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d039      	beq.n	8003b30 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e308      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d01e      	beq.n	8003b06 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ac8:	f7ff fdc8 	bl	800365c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003acc:	f7fe f964 	bl	8001d98 <HAL_GetTick>
 8003ad0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ad4:	f7fe f960 	bl	8001d98 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e2f5      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003ae6:	f7ff fdd7 	bl	8003698 <LL_RCC_MSI_IsReady>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0f1      	beq.n	8003ad4 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7ff fde0 	bl	80036ba <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff fe04 	bl	800370c <LL_RCC_MSI_SetCalibTrimming>
 8003b04:	e015      	b.n	8003b32 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b06:	f7ff fdb8 	bl	800367a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b0a:	f7fe f945 	bl	8001d98 <HAL_GetTick>
 8003b0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b12:	f7fe f941 	bl	8001d98 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e2d6      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003b24:	f7ff fdb8 	bl	8003698 <LL_RCC_MSI_IsReady>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f1      	bne.n	8003b12 <HAL_RCC_OscConfig+0x11a>
 8003b2e:	e000      	b.n	8003b32 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003b30:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d047      	beq.n	8003bce <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b3e:	f7ff fe0e 	bl	800375e <LL_RCC_GetSysClkSource>
 8003b42:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b44:	f7ff feef 	bl	8003926 <LL_RCC_PLL_GetMainSource>
 8003b48:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d005      	beq.n	8003b5c <HAL_RCC_OscConfig+0x164>
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	2b0c      	cmp	r3, #12
 8003b54:	d108      	bne.n	8003b68 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d105      	bne.n	8003b68 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d134      	bne.n	8003bce <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e2b4      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b70:	d102      	bne.n	8003b78 <HAL_RCC_OscConfig+0x180>
 8003b72:	f7ff fbf5 	bl	8003360 <LL_RCC_HSE_Enable>
 8003b76:	e001      	b.n	8003b7c <HAL_RCC_OscConfig+0x184>
 8003b78:	f7ff fc01 	bl	800337e <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d012      	beq.n	8003baa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7fe f908 	bl	8001d98 <HAL_GetTick>
 8003b88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7fe f904 	bl	8001d98 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	@ 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e299      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003b9e:	f7ff fbfd 	bl	800339c <LL_RCC_HSE_IsReady>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0f1      	beq.n	8003b8c <HAL_RCC_OscConfig+0x194>
 8003ba8:	e011      	b.n	8003bce <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003baa:	f7fe f8f5 	bl	8001d98 <HAL_GetTick>
 8003bae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bb2:	f7fe f8f1 	bl	8001d98 <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b64      	cmp	r3, #100	@ 0x64
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e286      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003bc4:	f7ff fbea 	bl	800339c <LL_RCC_HSE_IsReady>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f1      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d04c      	beq.n	8003c74 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bda:	f7ff fdc0 	bl	800375e <LL_RCC_GetSysClkSource>
 8003bde:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003be0:	f7ff fea1 	bl	8003926 <LL_RCC_PLL_GetMainSource>
 8003be4:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d005      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x200>
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	2b0c      	cmp	r3, #12
 8003bf0:	d10e      	bne.n	8003c10 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d10b      	bne.n	8003c10 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d101      	bne.n	8003c04 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e266      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff fc09 	bl	8003420 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003c0e:	e031      	b.n	8003c74 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d019      	beq.n	8003c4c <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c18:	f7ff fbd2 	bl	80033c0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7fe f8bc 	bl	8001d98 <HAL_GetTick>
 8003c20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c24:	f7fe f8b8 	bl	8001d98 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e24d      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003c36:	f7ff fbe1 	bl	80033fc <LL_RCC_HSI_IsReady>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f1      	beq.n	8003c24 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff fbeb 	bl	8003420 <LL_RCC_HSI_SetCalibTrimming>
 8003c4a:	e013      	b.n	8003c74 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c4c:	f7ff fbc7 	bl	80033de <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fe f8a2 	bl	8001d98 <HAL_GetTick>
 8003c54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c58:	f7fe f89e 	bl	8001d98 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e233      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003c6a:	f7ff fbc7 	bl	80033fc <LL_RCC_HSI_IsReady>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1f1      	bne.n	8003c58 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d106      	bne.n	8003c8e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 80a3 	beq.w	8003dd4 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d076      	beq.n	8003d84 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0310 	and.w	r3, r3, #16
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d046      	beq.n	8003d30 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003ca2:	f7ff fc7e 	bl	80035a2 <LL_RCC_LSI1_IsReady>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d113      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003cac:	f7ff fc57 	bl	800355e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cb0:	f7fe f872 	bl	8001d98 <HAL_GetTick>
 8003cb4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003cb8:	f7fe f86e 	bl	8001d98 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e203      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003cca:	f7ff fc6a 	bl	80035a2 <LL_RCC_LSI1_IsReady>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0f1      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003cd4:	f7ff fc77 	bl	80035c6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd8:	f7fe f85e 	bl	8001d98 <HAL_GetTick>
 8003cdc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003ce0:	f7fe f85a 	bl	8001d98 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e1ef      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003cf2:	f7ff fc8a 	bl	800360a <LL_RCC_LSI2_IsReady>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0f1      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fc94 	bl	800362e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003d06:	f7ff fc3b 	bl	8003580 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0a:	f7fe f845 	bl	8001d98 <HAL_GetTick>
 8003d0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003d10:	e008      	b.n	8003d24 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003d12:	f7fe f841 	bl	8001d98 <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	2b02      	cmp	r3, #2
 8003d1e:	d901      	bls.n	8003d24 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e1d6      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003d24:	f7ff fc3d 	bl	80035a2 <LL_RCC_LSI1_IsReady>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f1      	bne.n	8003d12 <HAL_RCC_OscConfig+0x31a>
 8003d2e:	e051      	b.n	8003dd4 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003d30:	f7ff fc15 	bl	800355e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d34:	f7fe f830 	bl	8001d98 <HAL_GetTick>
 8003d38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003d3a:	e00c      	b.n	8003d56 <HAL_RCC_OscConfig+0x35e>
 8003d3c:	20000008 	.word	0x20000008
 8003d40:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003d44:	f7fe f828 	bl	8001d98 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e1bd      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003d56:	f7ff fc24 	bl	80035a2 <LL_RCC_LSI1_IsReady>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f1      	beq.n	8003d44 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003d60:	f7ff fc42 	bl	80035e8 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003d66:	f7fe f817 	bl	8001d98 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e1ac      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003d78:	f7ff fc47 	bl	800360a <LL_RCC_LSI2_IsReady>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f1      	bne.n	8003d66 <HAL_RCC_OscConfig+0x36e>
 8003d82:	e027      	b.n	8003dd4 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003d84:	f7ff fc30 	bl	80035e8 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d88:	f7fe f806 	bl	8001d98 <HAL_GetTick>
 8003d8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003d90:	f7fe f802 	bl	8001d98 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e197      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003da2:	f7ff fc32 	bl	800360a <LL_RCC_LSI2_IsReady>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1f1      	bne.n	8003d90 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003dac:	f7ff fbe8 	bl	8003580 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db0:	f7fd fff2 	bl	8001d98 <HAL_GetTick>
 8003db4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003db8:	f7fd ffee 	bl	8001d98 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e183      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003dca:	f7ff fbea 	bl	80035a2 <LL_RCC_LSI1_IsReady>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1f1      	bne.n	8003db8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d05b      	beq.n	8003e98 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de0:	4ba7      	ldr	r3, [pc, #668]	@ (8004080 <HAL_RCC_OscConfig+0x688>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d114      	bne.n	8003e16 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003dec:	f7ff fa88 	bl	8003300 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003df0:	f7fd ffd2 	bl	8001d98 <HAL_GetTick>
 8003df4:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df8:	f7fd ffce 	bl	8001d98 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e163      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e0a:	4b9d      	ldr	r3, [pc, #628]	@ (8004080 <HAL_RCC_OscConfig+0x688>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d102      	bne.n	8003e24 <HAL_RCC_OscConfig+0x42c>
 8003e1e:	f7ff fb48 	bl	80034b2 <LL_RCC_LSE_Enable>
 8003e22:	e00c      	b.n	8003e3e <HAL_RCC_OscConfig+0x446>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b05      	cmp	r3, #5
 8003e2a:	d104      	bne.n	8003e36 <HAL_RCC_OscConfig+0x43e>
 8003e2c:	f7ff fb63 	bl	80034f6 <LL_RCC_LSE_EnableBypass>
 8003e30:	f7ff fb3f 	bl	80034b2 <LL_RCC_LSE_Enable>
 8003e34:	e003      	b.n	8003e3e <HAL_RCC_OscConfig+0x446>
 8003e36:	f7ff fb4d 	bl	80034d4 <LL_RCC_LSE_Disable>
 8003e3a:	f7ff fb6d 	bl	8003518 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d014      	beq.n	8003e70 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e46:	f7fd ffa7 	bl	8001d98 <HAL_GetTick>
 8003e4a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003e4c:	e00a      	b.n	8003e64 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e4e:	f7fd ffa3 	bl	8001d98 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e136      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003e64:	f7ff fb69 	bl	800353a <LL_RCC_LSE_IsReady>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0ef      	beq.n	8003e4e <HAL_RCC_OscConfig+0x456>
 8003e6e:	e013      	b.n	8003e98 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e70:	f7fd ff92 	bl	8001d98 <HAL_GetTick>
 8003e74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003e76:	e00a      	b.n	8003e8e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e78:	f7fd ff8e 	bl	8001d98 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e121      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003e8e:	f7ff fb54 	bl	800353a <LL_RCC_LSE_IsReady>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1ef      	bne.n	8003e78 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d02c      	beq.n	8003efe <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d014      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003eac:	f7ff facd 	bl	800344a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb0:	f7fd ff72 	bl	8001d98 <HAL_GetTick>
 8003eb4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003eb8:	f7fd ff6e 	bl	8001d98 <HAL_GetTick>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e103      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003eca:	f7ff fae0 	bl	800348e <LL_RCC_HSI48_IsReady>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0f1      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x4c0>
 8003ed4:	e013      	b.n	8003efe <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ed6:	f7ff fac9 	bl	800346c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eda:	f7fd ff5d 	bl	8001d98 <HAL_GetTick>
 8003ede:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ee2:	f7fd ff59 	bl	8001d98 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e0ee      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003ef4:	f7ff facb 	bl	800348e <LL_RCC_HSI48_IsReady>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1f1      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80e4 	beq.w	80040d0 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f08:	f7ff fc29 	bl	800375e <LL_RCC_GetSysClkSource>
 8003f0c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003f0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	f040 80b4 	bne.w	8004088 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f003 0203 	and.w	r2, r3, #3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d123      	bne.n	8003f76 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d11c      	bne.n	8003f76 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	0a1b      	lsrs	r3, r3, #8
 8003f40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d114      	bne.n	8003f76 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d10d      	bne.n	8003f76 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d106      	bne.n	8003f76 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d05d      	beq.n	8004032 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	2b0c      	cmp	r3, #12
 8003f7a:	d058      	beq.n	800402e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e0a1      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f8e:	f7ff fc84 	bl	800389a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f92:	f7fd ff01 	bl	8001d98 <HAL_GetTick>
 8003f96:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f98:	e008      	b.n	8003fac <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9a:	f7fd fefd 	bl	8001d98 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d901      	bls.n	8003fac <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	e092      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1ef      	bne.n	8003f9a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fbe:	68da      	ldr	r2, [r3, #12]
 8003fc0:	4b30      	ldr	r3, [pc, #192]	@ (8004084 <HAL_RCC_OscConfig+0x68c>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003fcc:	4311      	orrs	r1, r2
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003fd2:	0212      	lsls	r2, r2, #8
 8003fd4:	4311      	orrs	r1, r2
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003fda:	4311      	orrs	r1, r2
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003fe0:	4311      	orrs	r1, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ff0:	f7ff fc44 	bl	800387c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ff4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ffe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004002:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004004:	f7fd fec8 	bl	8001d98 <HAL_GetTick>
 8004008:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400c:	f7fd fec4 	bl	8001d98 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e059      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800401e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0ef      	beq.n	800400c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800402c:	e050      	b.n	80040d0 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e04f      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004032:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d147      	bne.n	80040d0 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004040:	f7ff fc1c 	bl	800387c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800404e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004052:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004054:	f7fd fea0 	bl	8001d98 <HAL_GetTick>
 8004058:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800405c:	f7fd fe9c 	bl	8001d98 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e031      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800406e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0ef      	beq.n	800405c <HAL_RCC_OscConfig+0x664>
 800407c:	e028      	b.n	80040d0 <HAL_RCC_OscConfig+0x6d8>
 800407e:	bf00      	nop
 8004080:	58000400 	.word	0x58000400
 8004084:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	2b0c      	cmp	r3, #12
 800408c:	d01e      	beq.n	80040cc <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408e:	f7ff fc04 	bl	800389a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004092:	f7fd fe81 	bl	8001d98 <HAL_GetTick>
 8004096:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800409a:	f7fd fe7d 	bl	8001d98 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e012      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1ef      	bne.n	800409a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80040ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80040c4:	4b05      	ldr	r3, [pc, #20]	@ (80040dc <HAL_RCC_OscConfig+0x6e4>)
 80040c6:	4013      	ands	r3, r2
 80040c8:	60cb      	str	r3, [r1, #12]
 80040ca:	e001      	b.n	80040d0 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e000      	b.n	80040d2 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3734      	adds	r7, #52	@ 0x34
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd90      	pop	{r4, r7, pc}
 80040da:	bf00      	nop
 80040dc:	eefefffc 	.word	0xeefefffc

080040e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e12d      	b.n	8004350 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80040f4:	4b98      	ldr	r3, [pc, #608]	@ (8004358 <HAL_RCC_ClockConfig+0x278>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	683a      	ldr	r2, [r7, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d91b      	bls.n	800413a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004102:	4b95      	ldr	r3, [pc, #596]	@ (8004358 <HAL_RCC_ClockConfig+0x278>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f023 0207 	bic.w	r2, r3, #7
 800410a:	4993      	ldr	r1, [pc, #588]	@ (8004358 <HAL_RCC_ClockConfig+0x278>)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	4313      	orrs	r3, r2
 8004110:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004112:	f7fd fe41 	bl	8001d98 <HAL_GetTick>
 8004116:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004118:	e008      	b.n	800412c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800411a:	f7fd fe3d 	bl	8001d98 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e111      	b.n	8004350 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800412c:	4b8a      	ldr	r3, [pc, #552]	@ (8004358 <HAL_RCC_ClockConfig+0x278>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d1ef      	bne.n	800411a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0302 	and.w	r3, r3, #2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d016      	beq.n	8004174 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff fb13 	bl	8003776 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004150:	f7fd fe22 	bl	8001d98 <HAL_GetTick>
 8004154:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004156:	e008      	b.n	800416a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004158:	f7fd fe1e 	bl	8001d98 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b02      	cmp	r3, #2
 8004164:	d901      	bls.n	800416a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e0f2      	b.n	8004350 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800416a:	f7ff fbe8 	bl	800393e <LL_RCC_IsActiveFlag_HPRE>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f1      	beq.n	8004158 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0320 	and.w	r3, r3, #32
 800417c:	2b00      	cmp	r3, #0
 800417e:	d016      	beq.n	80041ae <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff fb0a 	bl	800379e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800418a:	f7fd fe05 	bl	8001d98 <HAL_GetTick>
 800418e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004192:	f7fd fe01 	bl	8001d98 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e0d5      	b.n	8004350 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80041a4:	f7ff fbdd 	bl	8003962 <LL_RCC_IsActiveFlag_C2HPRE>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0f1      	beq.n	8004192 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d016      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	4618      	mov	r0, r3
 80041c0:	f7ff fb03 	bl	80037ca <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80041c4:	f7fd fde8 	bl	8001d98 <HAL_GetTick>
 80041c8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80041ca:	e008      	b.n	80041de <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80041cc:	f7fd fde4 	bl	8001d98 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e0b8      	b.n	8004350 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80041de:	f7ff fbd3 	bl	8003988 <LL_RCC_IsActiveFlag_SHDHPRE>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0f1      	beq.n	80041cc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d016      	beq.n	8004222 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff fafd 	bl	80037f8 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80041fe:	f7fd fdcb 	bl	8001d98 <HAL_GetTick>
 8004202:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004204:	e008      	b.n	8004218 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004206:	f7fd fdc7 	bl	8001d98 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004214:	2303      	movs	r3, #3
 8004216:	e09b      	b.n	8004350 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004218:	f7ff fbc9 	bl	80039ae <LL_RCC_IsActiveFlag_PPRE1>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0f1      	beq.n	8004206 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d017      	beq.n	800425e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff faf3 	bl	8003820 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800423a:	f7fd fdad 	bl	8001d98 <HAL_GetTick>
 800423e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004240:	e008      	b.n	8004254 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004242:	f7fd fda9 	bl	8001d98 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e07d      	b.n	8004350 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004254:	f7ff fbbd 	bl	80039d2 <LL_RCC_IsActiveFlag_PPRE2>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0f1      	beq.n	8004242 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d043      	beq.n	80042f2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d106      	bne.n	8004280 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004272:	f7ff f893 	bl	800339c <LL_RCC_HSE_IsReady>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d11e      	bne.n	80042ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e067      	b.n	8004350 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b03      	cmp	r3, #3
 8004286:	d106      	bne.n	8004296 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004288:	f7ff fb16 	bl	80038b8 <LL_RCC_PLL_IsReady>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d113      	bne.n	80042ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e05c      	b.n	8004350 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800429e:	f7ff f9fb 	bl	8003698 <LL_RCC_MSI_IsReady>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d108      	bne.n	80042ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e051      	b.n	8004350 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80042ac:	f7ff f8a6 	bl	80033fc <LL_RCC_HSI_IsReady>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e04a      	b.n	8004350 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff fa39 	bl	8003736 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c4:	f7fd fd68 	bl	8001d98 <HAL_GetTick>
 80042c8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ca:	e00a      	b.n	80042e2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042cc:	f7fd fd64 	bl	8001d98 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042da:	4293      	cmp	r3, r2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e036      	b.n	8004350 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042e2:	f7ff fa3c 	bl	800375e <LL_RCC_GetSysClkSource>
 80042e6:	4602      	mov	r2, r0
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d1ec      	bne.n	80042cc <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042f2:	4b19      	ldr	r3, [pc, #100]	@ (8004358 <HAL_RCC_ClockConfig+0x278>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0307 	and.w	r3, r3, #7
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d21b      	bcs.n	8004338 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004300:	4b15      	ldr	r3, [pc, #84]	@ (8004358 <HAL_RCC_ClockConfig+0x278>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f023 0207 	bic.w	r2, r3, #7
 8004308:	4913      	ldr	r1, [pc, #76]	@ (8004358 <HAL_RCC_ClockConfig+0x278>)
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	4313      	orrs	r3, r2
 800430e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004310:	f7fd fd42 	bl	8001d98 <HAL_GetTick>
 8004314:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004316:	e008      	b.n	800432a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004318:	f7fd fd3e 	bl	8001d98 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e012      	b.n	8004350 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800432a:	4b0b      	ldr	r3, [pc, #44]	@ (8004358 <HAL_RCC_ClockConfig+0x278>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d1ef      	bne.n	8004318 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004338:	f000 f87e 	bl	8004438 <HAL_RCC_GetHCLKFreq>
 800433c:	4603      	mov	r3, r0
 800433e:	4a07      	ldr	r2, [pc, #28]	@ (800435c <HAL_RCC_ClockConfig+0x27c>)
 8004340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004342:	f7fd fd35 	bl	8001db0 <HAL_GetTickPrio>
 8004346:	4603      	mov	r3, r0
 8004348:	4618      	mov	r0, r3
 800434a:	f7fd fcd7 	bl	8001cfc <HAL_InitTick>
 800434e:	4603      	mov	r3, r0
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	58004000 	.word	0x58004000
 800435c:	20000008 	.word	0x20000008

08004360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004360:	b590      	push	{r4, r7, lr}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004366:	f7ff f9fa 	bl	800375e <LL_RCC_GetSysClkSource>
 800436a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10a      	bne.n	8004388 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004372:	f7ff f9b6 	bl	80036e2 <LL_RCC_MSI_GetRange>
 8004376:	4603      	mov	r3, r0
 8004378:	091b      	lsrs	r3, r3, #4
 800437a:	f003 030f 	and.w	r3, r3, #15
 800437e:	4a2b      	ldr	r2, [pc, #172]	@ (800442c <HAL_RCC_GetSysClockFreq+0xcc>)
 8004380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	e04b      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b04      	cmp	r3, #4
 800438c:	d102      	bne.n	8004394 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800438e:	4b28      	ldr	r3, [pc, #160]	@ (8004430 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	e045      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b08      	cmp	r3, #8
 8004398:	d10a      	bne.n	80043b0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800439a:	f7fe ffcf 	bl	800333c <LL_RCC_HSE_IsEnabledDiv2>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d102      	bne.n	80043aa <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80043a4:	4b22      	ldr	r3, [pc, #136]	@ (8004430 <HAL_RCC_GetSysClockFreq+0xd0>)
 80043a6:	60fb      	str	r3, [r7, #12]
 80043a8:	e03a      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80043aa:	4b22      	ldr	r3, [pc, #136]	@ (8004434 <HAL_RCC_GetSysClockFreq+0xd4>)
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	e037      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80043b0:	f7ff fab9 	bl	8003926 <LL_RCC_PLL_GetMainSource>
 80043b4:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d003      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0x64>
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b03      	cmp	r3, #3
 80043c0:	d003      	beq.n	80043ca <HAL_RCC_GetSysClockFreq+0x6a>
 80043c2:	e00d      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80043c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004430 <HAL_RCC_GetSysClockFreq+0xd0>)
 80043c6:	60bb      	str	r3, [r7, #8]
        break;
 80043c8:	e015      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80043ca:	f7fe ffb7 	bl	800333c <LL_RCC_HSE_IsEnabledDiv2>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d102      	bne.n	80043da <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80043d4:	4b16      	ldr	r3, [pc, #88]	@ (8004430 <HAL_RCC_GetSysClockFreq+0xd0>)
 80043d6:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80043d8:	e00d      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80043da:	4b16      	ldr	r3, [pc, #88]	@ (8004434 <HAL_RCC_GetSysClockFreq+0xd4>)
 80043dc:	60bb      	str	r3, [r7, #8]
        break;
 80043de:	e00a      	b.n	80043f6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80043e0:	f7ff f97f 	bl	80036e2 <LL_RCC_MSI_GetRange>
 80043e4:	4603      	mov	r3, r0
 80043e6:	091b      	lsrs	r3, r3, #4
 80043e8:	f003 030f 	and.w	r3, r3, #15
 80043ec:	4a0f      	ldr	r2, [pc, #60]	@ (800442c <HAL_RCC_GetSysClockFreq+0xcc>)
 80043ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f2:	60bb      	str	r3, [r7, #8]
        break;
 80043f4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80043f6:	f7ff fa71 	bl	80038dc <LL_RCC_PLL_GetN>
 80043fa:	4602      	mov	r2, r0
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	fb03 f402 	mul.w	r4, r3, r2
 8004402:	f7ff fa84 	bl	800390e <LL_RCC_PLL_GetDivider>
 8004406:	4603      	mov	r3, r0
 8004408:	091b      	lsrs	r3, r3, #4
 800440a:	3301      	adds	r3, #1
 800440c:	fbb4 f4f3 	udiv	r4, r4, r3
 8004410:	f7ff fa71 	bl	80038f6 <LL_RCC_PLL_GetR>
 8004414:	4603      	mov	r3, r0
 8004416:	0f5b      	lsrs	r3, r3, #29
 8004418:	3301      	adds	r3, #1
 800441a:	fbb4 f3f3 	udiv	r3, r4, r3
 800441e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004420:	68fb      	ldr	r3, [r7, #12]
}
 8004422:	4618      	mov	r0, r3
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	bd90      	pop	{r4, r7, pc}
 800442a:	bf00      	nop
 800442c:	08008c90 	.word	0x08008c90
 8004430:	00f42400 	.word	0x00f42400
 8004434:	01e84800 	.word	0x01e84800

08004438 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004438:	b598      	push	{r3, r4, r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800443c:	f7ff ff90 	bl	8004360 <HAL_RCC_GetSysClockFreq>
 8004440:	4604      	mov	r4, r0
 8004442:	f7ff fa01 	bl	8003848 <LL_RCC_GetAHBPrescaler>
 8004446:	4603      	mov	r3, r0
 8004448:	091b      	lsrs	r3, r3, #4
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	4a03      	ldr	r2, [pc, #12]	@ (800445c <HAL_RCC_GetHCLKFreq+0x24>)
 8004450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004454:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004458:	4618      	mov	r0, r3
 800445a:	bd98      	pop	{r3, r4, r7, pc}
 800445c:	08008c50 	.word	0x08008c50

08004460 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004460:	b590      	push	{r4, r7, lr}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2bb0      	cmp	r3, #176	@ 0xb0
 800446c:	d903      	bls.n	8004476 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800446e:	4b15      	ldr	r3, [pc, #84]	@ (80044c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	e007      	b.n	8004486 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	091b      	lsrs	r3, r3, #4
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	4a11      	ldr	r2, [pc, #68]	@ (80044c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004484:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004486:	f7ff f9eb 	bl	8003860 <LL_RCC_GetAHB4Prescaler>
 800448a:	4603      	mov	r3, r0
 800448c:	091b      	lsrs	r3, r3, #4
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	4a0d      	ldr	r2, [pc, #52]	@ (80044c8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004498:	68fa      	ldr	r2, [r7, #12]
 800449a:	fbb2 f3f3 	udiv	r3, r2, r3
 800449e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4a0a      	ldr	r2, [pc, #40]	@ (80044cc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80044a4:	fba2 2303 	umull	r2, r3, r2, r3
 80044a8:	0c9c      	lsrs	r4, r3, #18
 80044aa:	f7fe ff39 	bl	8003320 <HAL_PWREx_GetVoltageRange>
 80044ae:	4603      	mov	r3, r0
 80044b0:	4619      	mov	r1, r3
 80044b2:	4620      	mov	r0, r4
 80044b4:	f000 f80c 	bl	80044d0 <RCC_SetFlashLatency>
 80044b8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd90      	pop	{r4, r7, pc}
 80044c2:	bf00      	nop
 80044c4:	08008c90 	.word	0x08008c90
 80044c8:	08008c50 	.word	0x08008c50
 80044cc:	431bde83 	.word	0x431bde83

080044d0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80044d0:	b590      	push	{r4, r7, lr}
 80044d2:	b093      	sub	sp, #76	@ 0x4c
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80044da:	4b37      	ldr	r3, [pc, #220]	@ (80045b8 <RCC_SetFlashLatency+0xe8>)
 80044dc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80044e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80044e6:	4a35      	ldr	r2, [pc, #212]	@ (80045bc <RCC_SetFlashLatency+0xec>)
 80044e8:	f107 031c 	add.w	r3, r7, #28
 80044ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80044ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80044f2:	4b33      	ldr	r3, [pc, #204]	@ (80045c0 <RCC_SetFlashLatency+0xf0>)
 80044f4:	f107 040c 	add.w	r4, r7, #12
 80044f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80044fe:	2300      	movs	r3, #0
 8004500:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004508:	d11a      	bne.n	8004540 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800450a:	2300      	movs	r3, #0
 800450c:	643b      	str	r3, [r7, #64]	@ 0x40
 800450e:	e013      	b.n	8004538 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004510:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	3348      	adds	r3, #72	@ 0x48
 8004516:	443b      	add	r3, r7
 8004518:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	429a      	cmp	r2, r3
 8004520:	d807      	bhi.n	8004532 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	3348      	adds	r3, #72	@ 0x48
 8004528:	443b      	add	r3, r7
 800452a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800452e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004530:	e020      	b.n	8004574 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004534:	3301      	adds	r3, #1
 8004536:	643b      	str	r3, [r7, #64]	@ 0x40
 8004538:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800453a:	2b03      	cmp	r3, #3
 800453c:	d9e8      	bls.n	8004510 <RCC_SetFlashLatency+0x40>
 800453e:	e019      	b.n	8004574 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004540:	2300      	movs	r3, #0
 8004542:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004544:	e013      	b.n	800456e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	3348      	adds	r3, #72	@ 0x48
 800454c:	443b      	add	r3, r7
 800454e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	429a      	cmp	r2, r3
 8004556:	d807      	bhi.n	8004568 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004558:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	3348      	adds	r3, #72	@ 0x48
 800455e:	443b      	add	r3, r7
 8004560:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004564:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8004566:	e005      	b.n	8004574 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800456a:	3301      	adds	r3, #1
 800456c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800456e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004570:	2b02      	cmp	r3, #2
 8004572:	d9e8      	bls.n	8004546 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8004574:	4b13      	ldr	r3, [pc, #76]	@ (80045c4 <RCC_SetFlashLatency+0xf4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f023 0207 	bic.w	r2, r3, #7
 800457c:	4911      	ldr	r1, [pc, #68]	@ (80045c4 <RCC_SetFlashLatency+0xf4>)
 800457e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004580:	4313      	orrs	r3, r2
 8004582:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004584:	f7fd fc08 	bl	8001d98 <HAL_GetTick>
 8004588:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800458a:	e008      	b.n	800459e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800458c:	f7fd fc04 	bl	8001d98 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	2b02      	cmp	r3, #2
 8004598:	d901      	bls.n	800459e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e007      	b.n	80045ae <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800459e:	4b09      	ldr	r3, [pc, #36]	@ (80045c4 <RCC_SetFlashLatency+0xf4>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d1ef      	bne.n	800458c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	374c      	adds	r7, #76	@ 0x4c
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd90      	pop	{r4, r7, pc}
 80045b6:	bf00      	nop
 80045b8:	08008ab0 	.word	0x08008ab0
 80045bc:	08008ac0 	.word	0x08008ac0
 80045c0:	08008acc 	.word	0x08008acc
 80045c4:	58004000 	.word	0x58004000

080045c8 <LL_RCC_LSE_IsEnabled>:
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80045cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d4:	f003 0301 	and.w	r3, r3, #1
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d101      	bne.n	80045e0 <LL_RCC_LSE_IsEnabled+0x18>
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <LL_RCC_LSE_IsEnabled+0x1a>
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <LL_RCC_LSE_IsReady>:
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80045f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d101      	bne.n	8004604 <LL_RCC_LSE_IsReady+0x18>
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <LL_RCC_LSE_IsReady+0x1a>
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <LL_RCC_SetRFWKPClockSource>:
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004618:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800461c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004620:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004624:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <LL_RCC_SetSMPSClockSource>:
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004644:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464a:	f023 0203 	bic.w	r2, r3, #3
 800464e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4313      	orrs	r3, r2
 8004656:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <LL_RCC_SetSMPSPrescaler>:
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800466c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004672:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004676:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4313      	orrs	r3, r2
 800467e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <LL_RCC_SetUSARTClockSource>:
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004694:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469c:	f023 0203 	bic.w	r2, r3, #3
 80046a0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <LL_RCC_SetLPUARTClockSource>:
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80046c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046c8:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80046cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <LL_RCC_SetI2CClockSource>:
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80046ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	091b      	lsrs	r3, r3, #4
 80046f8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80046fc:	43db      	mvns	r3, r3
 80046fe:	401a      	ands	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8004708:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <LL_RCC_SetLPTIMClockSource>:
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004726:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800472a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	0c1b      	lsrs	r3, r3, #16
 8004732:	041b      	lsls	r3, r3, #16
 8004734:	43db      	mvns	r3, r3
 8004736:	401a      	ands	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	041b      	lsls	r3, r3, #16
 800473c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004740:	4313      	orrs	r3, r2
 8004742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <LL_RCC_SetSAIClockSource>:
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800475a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004762:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004766:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4313      	orrs	r3, r2
 800476e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <LL_RCC_SetRNGClockSource>:
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004786:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800478e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004792:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <LL_RCC_SetCLK48ClockSource>:
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80047b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <LL_RCC_SetUSBClockSource>:
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7ff ffe3 	bl	80047aa <LL_RCC_SetCLK48ClockSource>
}
 80047e4:	bf00      	nop
 80047e6:	3708      	adds	r7, #8
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <LL_RCC_SetADCClockSource>:
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80047f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047fc:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004800:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <LL_RCC_SetRTCClockSource>:
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004820:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004828:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800482c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <LL_RCC_GetRTCClockSource>:
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800484c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004850:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8004854:	4618      	mov	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <LL_RCC_ForceBackupDomainReset>:
{
 800485e:	b480      	push	{r7}
 8004860:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004862:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800486a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800486e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004872:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004876:	bf00      	nop
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800488c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004890:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8004898:	bf00      	nop
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <LL_RCC_PLLSAI1_Enable>:
{
 80048a2:	b480      	push	{r7}
 80048a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80048a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048b0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80048b4:	6013      	str	r3, [r2, #0]
}
 80048b6:	bf00      	nop
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <LL_RCC_PLLSAI1_Disable>:
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80048c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80048ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80048d2:	6013      	str	r3, [r2, #0]
}
 80048d4:	bf00      	nop
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <LL_RCC_PLLSAI1_IsReady>:
{
 80048de:	b480      	push	{r7}
 80048e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80048e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048f0:	d101      	bne.n	80048f6 <LL_RCC_PLLSAI1_IsReady+0x18>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b088      	sub	sp, #32
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800490a:	2300      	movs	r3, #0
 800490c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800490e:	2300      	movs	r3, #0
 8004910:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800491a:	2b00      	cmp	r3, #0
 800491c:	d034      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004922:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004926:	d021      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8004928:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800492c:	d81b      	bhi.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800492e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004932:	d01d      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8004934:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004938:	d815      	bhi.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00b      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800493e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004942:	d110      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004944:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800494e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004952:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004954:	e00d      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	3304      	adds	r3, #4
 800495a:	4618      	mov	r0, r3
 800495c:	f000 f947 	bl	8004bee <RCCEx_PLLSAI1_ConfigNP>
 8004960:	4603      	mov	r3, r0
 8004962:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004964:	e005      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	77fb      	strb	r3, [r7, #31]
        break;
 800496a:	e002      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800496c:	bf00      	nop
 800496e:	e000      	b.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004970:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004972:	7ffb      	ldrb	r3, [r7, #31]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d105      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff fee8 	bl	8004752 <LL_RCC_SetSAIClockSource>
 8004982:	e001      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004984:	7ffb      	ldrb	r3, [r7, #31]
 8004986:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004990:	2b00      	cmp	r3, #0
 8004992:	d046      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004994:	f7ff ff56 	bl	8004844 <LL_RCC_GetRTCClockSource>
 8004998:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d03c      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80049a4:	f7fe fcac 	bl	8003300 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d105      	bne.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7ff ff30 	bl	8004818 <LL_RCC_SetRTCClockSource>
 80049b8:	e02e      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80049ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80049c4:	f7ff ff4b 	bl	800485e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80049c8:	f7ff ff5a 	bl	8004880 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80049da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80049e4:	f7ff fdf0 	bl	80045c8 <LL_RCC_LSE_IsEnabled>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d114      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049ee:	f7fd f9d3 	bl	8001d98 <HAL_GetTick>
 80049f2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80049f4:	e00b      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f6:	f7fd f9cf 	bl	8001d98 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d902      	bls.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	77fb      	strb	r3, [r7, #31]
              break;
 8004a0c:	e004      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004a0e:	f7ff fded 	bl	80045ec <LL_RCC_LSE_IsReady>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d1ee      	bne.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004a18:	7ffb      	ldrb	r3, [r7, #31]
 8004a1a:	77bb      	strb	r3, [r7, #30]
 8004a1c:	e001      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a1e:	7ffb      	ldrb	r3, [r7, #31]
 8004a20:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d004      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff fe2a 	bl	800468c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d004      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7ff fe35 	bl	80046b8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0310 	and.w	r3, r3, #16
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d004      	beq.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7ff fe5d 	bl	800471e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0320 	and.w	r3, r3, #32
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d004      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7ff fe52 	bl	800471e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d004      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff fe2a 	bl	80046e4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0308 	and.w	r3, r3, #8
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d004      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff fe1f 	bl	80046e4 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d022      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7ff fe8d 	bl	80047d6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ac4:	d107      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004ac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ad0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ad4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ada:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ade:	d10b      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 f8dd 	bl	8004ca4 <RCCEx_PLLSAI1_ConfigNQ>
 8004aea:	4603      	mov	r3, r0
 8004aec:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004aee:	7ffb      	ldrb	r3, [r7, #31]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8004af4:	7ffb      	ldrb	r3, [r7, #31]
 8004af6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d02b      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b0c:	d008      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b16:	d003      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d105      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff fe2a 	bl	800477e <LL_RCC_SetRNGClockSource>
 8004b2a:	e00a      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	2000      	movs	r0, #0
 8004b38:	f7ff fe21 	bl	800477e <LL_RCC_SetRNGClockSource>
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f7ff fe34 	bl	80047aa <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b46:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8004b4a:	d107      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004b4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b56:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b5a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d022      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff fe3d 	bl	80047ec <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b7a:	d107      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004b86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b8a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b94:	d10b      	bne.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3304      	adds	r3, #4
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f000 f8dd 	bl	8004d5a <RCCEx_PLLSAI1_ConfigNR>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004ba4:	7ffb      	ldrb	r3, [r7, #31]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004baa:	7ffb      	ldrb	r3, [r7, #31]
 8004bac:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d004      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff fd26 	bl	8004610 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d009      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff fd45 	bl	8004664 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff fd2c 	bl	800463c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8004be4:	7fbb      	ldrb	r3, [r7, #30]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3720      	adds	r7, #32
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b084      	sub	sp, #16
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004bfa:	f7ff fe61 	bl	80048c0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004bfe:	f7fd f8cb 	bl	8001d98 <HAL_GetTick>
 8004c02:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004c04:	e009      	b.n	8004c1a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c06:	f7fd f8c7 	bl	8001d98 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d902      	bls.n	8004c1a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	73fb      	strb	r3, [r7, #15]
      break;
 8004c18:	e004      	b.n	8004c24 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004c1a:	f7ff fe60 	bl	80048de <LL_RCC_PLLSAI1_IsReady>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d1f0      	bne.n	8004c06 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d137      	bne.n	8004c9a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	021b      	lsls	r3, r3, #8
 8004c3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004c42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c54:	4313      	orrs	r3, r2
 8004c56:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004c58:	f7ff fe23 	bl	80048a2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c5c:	f7fd f89c 	bl	8001d98 <HAL_GetTick>
 8004c60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004c62:	e009      	b.n	8004c78 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c64:	f7fd f898 	bl	8001d98 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d902      	bls.n	8004c78 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	73fb      	strb	r3, [r7, #15]
        break;
 8004c76:	e004      	b.n	8004c82 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004c78:	f7ff fe31 	bl	80048de <LL_RCC_PLLSAI1_IsReady>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d1f0      	bne.n	8004c64 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d108      	bne.n	8004c9a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004c88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c8c:	691a      	ldr	r2, [r3, #16]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004c96:	4313      	orrs	r3, r2
 8004c98:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3710      	adds	r7, #16
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004cb0:	f7ff fe06 	bl	80048c0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004cb4:	f7fd f870 	bl	8001d98 <HAL_GetTick>
 8004cb8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004cba:	e009      	b.n	8004cd0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cbc:	f7fd f86c 	bl	8001d98 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d902      	bls.n	8004cd0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	73fb      	strb	r3, [r7, #15]
      break;
 8004cce:	e004      	b.n	8004cda <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004cd0:	f7ff fe05 	bl	80048de <LL_RCC_PLLSAI1_IsReady>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1f0      	bne.n	8004cbc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d137      	bne.n	8004d50 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004ce0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	021b      	lsls	r3, r3, #8
 8004cf0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004cf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004d0e:	f7ff fdc8 	bl	80048a2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d12:	f7fd f841 	bl	8001d98 <HAL_GetTick>
 8004d16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004d18:	e009      	b.n	8004d2e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d1a:	f7fd f83d 	bl	8001d98 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d902      	bls.n	8004d2e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	73fb      	strb	r3, [r7, #15]
        break;
 8004d2c:	e004      	b.n	8004d38 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004d2e:	f7ff fdd6 	bl	80048de <LL_RCC_PLLSAI1_IsReady>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d1f0      	bne.n	8004d1a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d108      	bne.n	8004d50 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004d3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d62:	2300      	movs	r3, #0
 8004d64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004d66:	f7ff fdab 	bl	80048c0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004d6a:	f7fd f815 	bl	8001d98 <HAL_GetTick>
 8004d6e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004d70:	e009      	b.n	8004d86 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d72:	f7fd f811 	bl	8001d98 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d902      	bls.n	8004d86 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	73fb      	strb	r3, [r7, #15]
      break;
 8004d84:	e004      	b.n	8004d90 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004d86:	f7ff fdaa 	bl	80048de <LL_RCC_PLLSAI1_IsReady>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1f0      	bne.n	8004d72 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d137      	bne.n	8004e06 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004d96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	021b      	lsls	r3, r3, #8
 8004da6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004daa:	4313      	orrs	r3, r2
 8004dac:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004dae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004dc4:	f7ff fd6d 	bl	80048a2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dc8:	f7fc ffe6 	bl	8001d98 <HAL_GetTick>
 8004dcc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004dce:	e009      	b.n	8004de4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dd0:	f7fc ffe2 	bl	8001d98 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d902      	bls.n	8004de4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	73fb      	strb	r3, [r7, #15]
        break;
 8004de2:	e004      	b.n	8004dee <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004de4:	f7ff fd7b 	bl	80048de <LL_RCC_PLLSAI1_IsReady>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d1f0      	bne.n	8004dd0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004dee:	7bfb      	ldrb	r3, [r7, #15]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d108      	bne.n	8004e06 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004df4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004df8:	691a      	ldr	r2, [r3, #16]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e02:	4313      	orrs	r3, r2
 8004e04:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e09f      	b.n	8004f62 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7fc fe2c 	bl	8001a94 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2202      	movs	r2, #2
 8004e40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004e44:	4b49      	ldr	r3, [pc, #292]	@ (8004f6c <HAL_RTC_Init+0x15c>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f003 0310 	and.w	r3, r3, #16
 8004e4c:	2b10      	cmp	r3, #16
 8004e4e:	d07e      	beq.n	8004f4e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	22ca      	movs	r2, #202	@ 0xca
 8004e56:	625a      	str	r2, [r3, #36]	@ 0x24
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2253      	movs	r2, #83	@ 0x53
 8004e5e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f8ab 	bl	8004fbc <RTC_EnterInitMode>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	22ff      	movs	r2, #255	@ 0xff
 8004e72:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2204      	movs	r2, #4
 8004e78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	73fb      	strb	r3, [r7, #15]
 8004e80:	e067      	b.n	8004f52 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6812      	ldr	r2, [r2, #0]
 8004e8c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004e90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e94:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6899      	ldr	r1, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	431a      	orrs	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	68d2      	ldr	r2, [r2, #12]
 8004ebc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	6919      	ldr	r1, [r3, #16]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	041a      	lsls	r2, r3, #16
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ee0:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0203 	bic.w	r2, r2, #3
 8004ef0:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	69da      	ldr	r2, [r3, #28]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	695b      	ldr	r3, [r3, #20]
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 0320 	and.w	r3, r3, #32
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d113      	bne.n	8004f40 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f829 	bl	8004f70 <HAL_RTC_WaitForSynchro>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00d      	beq.n	8004f40 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	22ff      	movs	r2, #255	@ 0xff
 8004f2a:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2204      	movs	r2, #4
 8004f30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e010      	b.n	8004f62 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	22ff      	movs	r2, #255	@ 0xff
 8004f46:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	73fb      	strb	r3, [r7, #15]
 8004f4c:	e001      	b.n	8004f52 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004f52:	7bfb      	ldrb	r3, [r7, #15]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d103      	bne.n	8004f60 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	40002800 	.word	0x40002800

08004f70 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68da      	ldr	r2, [r3, #12]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004f86:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8004f88:	f7fc ff06 	bl	8001d98 <HAL_GetTick>
 8004f8c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f8e:	e009      	b.n	8004fa4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f90:	f7fc ff02 	bl	8001d98 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e007      	b.n	8004fb4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d0ee      	beq.n	8004f90 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d119      	bne.n	8005006 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8004fda:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004fdc:	f7fc fedc 	bl	8001d98 <HAL_GetTick>
 8004fe0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004fe2:	e009      	b.n	8004ff8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004fe4:	f7fc fed8 	bl	8001d98 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004ff2:	d901      	bls.n	8004ff8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e007      	b.n	8005008 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005002:	2b00      	cmp	r3, #0
 8005004:	d0ee      	beq.n	8004fe4 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3710      	adds	r7, #16
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d101      	bne.n	800502a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005026:	2302      	movs	r3, #2
 8005028:	e0a8      	b.n	800517c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2202      	movs	r2, #2
 8005036:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	22ca      	movs	r2, #202	@ 0xca
 8005040:	625a      	str	r2, [r3, #36]	@ 0x24
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2253      	movs	r2, #83	@ 0x53
 8005048:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005054:	2b00      	cmp	r3, #0
 8005056:	d020      	beq.n	800509a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005058:	f7fc fe9e 	bl	8001d98 <HAL_GetTick>
 800505c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800505e:	e015      	b.n	800508c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005060:	f7fc fe9a 	bl	8001d98 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800506e:	d90d      	bls.n	800508c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	22ff      	movs	r2, #255	@ 0xff
 8005076:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2203      	movs	r2, #3
 800507c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e077      	b.n	800517c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f003 0304 	and.w	r3, r3, #4
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e2      	bne.n	8005060 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050a8:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80050ba:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80050bc:	f7fc fe6c 	bl	8001d98 <HAL_GetTick>
 80050c0:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80050c2:	e015      	b.n	80050f0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80050c4:	f7fc fe68 	bl	8001d98 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80050d2:	d90d      	bls.n	80050f0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	22ff      	movs	r2, #255	@ 0xff
 80050da:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2203      	movs	r2, #3
 80050e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e045      	b.n	800517c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	f003 0304 	and.w	r3, r3, #4
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0e2      	beq.n	80050c4 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689a      	ldr	r2, [r3, #8]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f022 0207 	bic.w	r2, r2, #7
 8005114:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	6899      	ldr	r1, [r3, #8]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	430a      	orrs	r2, r1
 8005124:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005126:	4b17      	ldr	r3, [pc, #92]	@ (8005184 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800512c:	4a15      	ldr	r2, [pc, #84]	@ (8005184 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800512e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005132:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005136:	4b13      	ldr	r3, [pc, #76]	@ (8005184 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a12      	ldr	r2, [pc, #72]	@ (8005184 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800513c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005140:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005150:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005160:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	22ff      	movs	r2, #255	@ 0xff
 8005168:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	58000800 	.word	0x58000800

08005188 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b088      	sub	sp, #32
 800518c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800518e:	2300      	movs	r3, #0
 8005190:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005192:	f107 0308 	add.w	r3, r7, #8
 8005196:	2218      	movs	r2, #24
 8005198:	2100      	movs	r1, #0
 800519a:	4618      	mov	r0, r3
 800519c:	f001 f92d 	bl	80063fa <Osal_MemSet>
  rq.ogf = 0x3f;
 80051a0:	233f      	movs	r3, #63	@ 0x3f
 80051a2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80051a4:	2381      	movs	r3, #129	@ 0x81
 80051a6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80051a8:	1dfb      	adds	r3, r7, #7
 80051aa:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80051ac:	2301      	movs	r3, #1
 80051ae:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80051b0:	f107 0308 	add.w	r3, r7, #8
 80051b4:	2100      	movs	r1, #0
 80051b6:	4618      	mov	r0, r3
 80051b8:	f001 fba8 	bl	800690c <hci_send_req>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	da01      	bge.n	80051c6 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80051c2:	23ff      	movs	r3, #255	@ 0xff
 80051c4:	e000      	b.n	80051c8 <aci_gap_set_non_discoverable+0x40>
  return status;
 80051c6:	79fb      	ldrb	r3, [r7, #7]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3720      	adds	r7, #32
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 80051d0:	b5b0      	push	{r4, r5, r7, lr}
 80051d2:	b0ce      	sub	sp, #312	@ 0x138
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	4605      	mov	r5, r0
 80051d8:	460c      	mov	r4, r1
 80051da:	4610      	mov	r0, r2
 80051dc:	4619      	mov	r1, r3
 80051de:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80051e2:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80051e6:	462a      	mov	r2, r5
 80051e8:	701a      	strb	r2, [r3, #0]
 80051ea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80051ee:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80051f2:	4622      	mov	r2, r4
 80051f4:	801a      	strh	r2, [r3, #0]
 80051f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80051fa:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 80051fe:	4602      	mov	r2, r0
 8005200:	801a      	strh	r2, [r3, #0]
 8005202:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005206:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800520a:	460a      	mov	r2, r1
 800520c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800520e:	f107 0310 	add.w	r3, r7, #16
 8005212:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8005216:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800521a:	3308      	adds	r3, #8
 800521c:	f107 0210 	add.w	r2, r7, #16
 8005220:	4413      	add	r3, r2
 8005222:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8005226:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800522a:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800522e:	4413      	add	r3, r2
 8005230:	3309      	adds	r3, #9
 8005232:	f107 0210 	add.w	r2, r7, #16
 8005236:	4413      	add	r3, r2
 8005238:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800523c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005240:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005244:	2200      	movs	r2, #0
 8005246:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005248:	2300      	movs	r3, #0
 800524a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800524e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005252:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005256:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800525a:	7812      	ldrb	r2, [r2, #0]
 800525c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800525e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005262:	3301      	adds	r3, #1
 8005264:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8005268:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800526c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005270:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 8005274:	8812      	ldrh	r2, [r2, #0]
 8005276:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800527a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800527e:	3302      	adds	r3, #2
 8005280:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8005284:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005288:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800528c:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 8005290:	8812      	ldrh	r2, [r2, #0]
 8005292:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8005296:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800529a:	3302      	adds	r3, #2
 800529c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80052a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80052a4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80052a8:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80052ac:	7812      	ldrb	r2, [r2, #0]
 80052ae:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80052b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80052b4:	3301      	adds	r3, #1
 80052b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 80052ba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80052be:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80052c2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80052c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80052c8:	3301      	adds	r3, #1
 80052ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 80052ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80052d2:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80052d6:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80052d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80052dc:	3301      	adds	r3, #1
 80052de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80052e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80052e6:	3308      	adds	r3, #8
 80052e8:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 80052ec:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 80052f0:	4618      	mov	r0, r3
 80052f2:	f001 f872 	bl	80063da <Osal_MemCpy>
    index_input += Local_Name_Length;
 80052f6:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80052fa:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80052fe:	4413      	add	r3, r2
 8005300:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8005304:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005308:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800530c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800530e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005312:	3301      	adds	r3, #1
 8005314:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 8005318:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800531c:	3301      	adds	r3, #1
 800531e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005322:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 8005326:	4618      	mov	r0, r3
 8005328:	f001 f857 	bl	80063da <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800532c:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8005330:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005334:	4413      	add	r3, r2
 8005336:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800533a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800533e:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 8005342:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005344:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005348:	3302      	adds	r3, #2
 800534a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800534e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005352:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 8005356:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8005358:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800535c:	3302      	adds	r3, #2
 800535e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005362:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005366:	2218      	movs	r2, #24
 8005368:	2100      	movs	r1, #0
 800536a:	4618      	mov	r0, r3
 800536c:	f001 f845 	bl	80063fa <Osal_MemSet>
  rq.ogf = 0x3f;
 8005370:	233f      	movs	r3, #63	@ 0x3f
 8005372:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 8005376:	2383      	movs	r3, #131	@ 0x83
 8005378:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800537c:	f107 0310 	add.w	r3, r7, #16
 8005380:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005384:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005388:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800538c:	f107 030f 	add.w	r3, r7, #15
 8005390:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005394:	2301      	movs	r3, #1
 8005396:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800539a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800539e:	2100      	movs	r1, #0
 80053a0:	4618      	mov	r0, r3
 80053a2:	f001 fab3 	bl	800690c <hci_send_req>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	da01      	bge.n	80053b0 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 80053ac:	23ff      	movs	r3, #255	@ 0xff
 80053ae:	e004      	b.n	80053ba <aci_gap_set_discoverable+0x1ea>
  return status;
 80053b0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80053b4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80053b8:	781b      	ldrb	r3, [r3, #0]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bdb0      	pop	{r4, r5, r7, pc}

080053c4 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b0cc      	sub	sp, #304	@ 0x130
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	4602      	mov	r2, r0
 80053cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80053d0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80053d4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 80053d6:	f107 0310 	add.w	r3, r7, #16
 80053da:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80053de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80053e2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80053e6:	2200      	movs	r2, #0
 80053e8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80053ea:	2300      	movs	r3, #0
 80053ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 80053f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80053f4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80053f8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80053fc:	7812      	ldrb	r2, [r2, #0]
 80053fe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005400:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005404:	3301      	adds	r3, #1
 8005406:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800540a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800540e:	2218      	movs	r2, #24
 8005410:	2100      	movs	r1, #0
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fff1 	bl	80063fa <Osal_MemSet>
  rq.ogf = 0x3f;
 8005418:	233f      	movs	r3, #63	@ 0x3f
 800541a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800541e:	2385      	movs	r3, #133	@ 0x85
 8005420:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005424:	f107 0310 	add.w	r3, r7, #16
 8005428:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800542c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005430:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005434:	f107 030f 	add.w	r3, r7, #15
 8005438:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800543c:	2301      	movs	r3, #1
 800543e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005442:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005446:	2100      	movs	r1, #0
 8005448:	4618      	mov	r0, r3
 800544a:	f001 fa5f 	bl	800690c <hci_send_req>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	da01      	bge.n	8005458 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 8005454:	23ff      	movs	r3, #255	@ 0xff
 8005456:	e004      	b.n	8005462 <aci_gap_set_io_capability+0x9e>
  return status;
 8005458:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800545c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005460:	781b      	ldrb	r3, [r3, #0]
}
 8005462:	4618      	mov	r0, r3
 8005464:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800546c:	b5b0      	push	{r4, r5, r7, lr}
 800546e:	b0cc      	sub	sp, #304	@ 0x130
 8005470:	af00      	add	r7, sp, #0
 8005472:	4605      	mov	r5, r0
 8005474:	460c      	mov	r4, r1
 8005476:	4610      	mov	r0, r2
 8005478:	4619      	mov	r1, r3
 800547a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800547e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005482:	462a      	mov	r2, r5
 8005484:	701a      	strb	r2, [r3, #0]
 8005486:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800548a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800548e:	4622      	mov	r2, r4
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005496:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800549a:	4602      	mov	r2, r0
 800549c:	701a      	strb	r2, [r3, #0]
 800549e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80054a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80054a6:	460a      	mov	r2, r1
 80054a8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 80054aa:	f107 0310 	add.w	r3, r7, #16
 80054ae:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80054b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80054b6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80054ba:	2200      	movs	r2, #0
 80054bc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80054be:	2300      	movs	r3, #0
 80054c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 80054c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80054c8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80054cc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80054d0:	7812      	ldrb	r2, [r2, #0]
 80054d2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80054d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80054d8:	3301      	adds	r3, #1
 80054da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 80054de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80054e2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80054e6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80054ea:	7812      	ldrb	r2, [r2, #0]
 80054ec:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80054ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80054f2:	3301      	adds	r3, #1
 80054f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 80054f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80054fc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005500:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005504:	7812      	ldrb	r2, [r2, #0]
 8005506:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005508:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800550c:	3301      	adds	r3, #1
 800550e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8005512:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005516:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800551a:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800551e:	7812      	ldrb	r2, [r2, #0]
 8005520:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8005522:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005526:	3301      	adds	r3, #1
 8005528:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800552c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005530:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8005534:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005536:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800553a:	3301      	adds	r3, #1
 800553c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8005540:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005544:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 8005548:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800554a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800554e:	3301      	adds	r3, #1
 8005550:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8005554:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005558:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800555c:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800555e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005562:	3301      	adds	r3, #1
 8005564:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 8005568:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800556c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8005570:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 8005574:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005578:	3304      	adds	r3, #4
 800557a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800557e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005582:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8005586:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8005588:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800558c:	3301      	adds	r3, #1
 800558e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005592:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005596:	2218      	movs	r2, #24
 8005598:	2100      	movs	r1, #0
 800559a:	4618      	mov	r0, r3
 800559c:	f000 ff2d 	bl	80063fa <Osal_MemSet>
  rq.ogf = 0x3f;
 80055a0:	233f      	movs	r3, #63	@ 0x3f
 80055a2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 80055a6:	2386      	movs	r3, #134	@ 0x86
 80055a8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80055ac:	f107 0310 	add.w	r3, r7, #16
 80055b0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80055b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80055b8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80055bc:	f107 030f 	add.w	r3, r7, #15
 80055c0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80055c4:	2301      	movs	r3, #1
 80055c6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80055ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80055ce:	2100      	movs	r1, #0
 80055d0:	4618      	mov	r0, r3
 80055d2:	f001 f99b 	bl	800690c <hci_send_req>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	da01      	bge.n	80055e0 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 80055dc:	23ff      	movs	r3, #255	@ 0xff
 80055de:	e004      	b.n	80055ea <aci_gap_set_authentication_requirement+0x17e>
  return status;
 80055e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80055e4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80055e8:	781b      	ldrb	r3, [r3, #0]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bdb0      	pop	{r4, r5, r7, pc}

080055f4 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b0cc      	sub	sp, #304	@ 0x130
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	4602      	mov	r2, r0
 80055fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005600:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005604:	6019      	str	r1, [r3, #0]
 8005606:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800560a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800560e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8005610:	f107 0310 	add.w	r3, r7, #16
 8005614:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005618:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800561c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005620:	2200      	movs	r2, #0
 8005622:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005624:	2300      	movs	r3, #0
 8005626:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800562a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800562e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005632:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005636:	8812      	ldrh	r2, [r2, #0]
 8005638:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800563a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800563e:	3302      	adds	r3, #2
 8005640:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 8005644:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005648:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800564c:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8005650:	6812      	ldr	r2, [r2, #0]
 8005652:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 8005656:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800565a:	3304      	adds	r3, #4
 800565c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005660:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005664:	2218      	movs	r2, #24
 8005666:	2100      	movs	r1, #0
 8005668:	4618      	mov	r0, r3
 800566a:	f000 fec6 	bl	80063fa <Osal_MemSet>
  rq.ogf = 0x3f;
 800566e:	233f      	movs	r3, #63	@ 0x3f
 8005670:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 8005674:	2388      	movs	r3, #136	@ 0x88
 8005676:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800567a:	f107 0310 	add.w	r3, r7, #16
 800567e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005682:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005686:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800568a:	f107 030f 	add.w	r3, r7, #15
 800568e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005692:	2301      	movs	r3, #1
 8005694:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005698:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800569c:	2100      	movs	r1, #0
 800569e:	4618      	mov	r0, r3
 80056a0:	f001 f934 	bl	800690c <hci_send_req>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	da01      	bge.n	80056ae <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 80056aa:	23ff      	movs	r3, #255	@ 0xff
 80056ac:	e004      	b.n	80056b8 <aci_gap_pass_key_resp+0xc4>
  return status;
 80056ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80056b2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80056b6:	781b      	ldrb	r3, [r3, #0]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 80056c2:	b590      	push	{r4, r7, lr}
 80056c4:	b0cd      	sub	sp, #308	@ 0x134
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	4604      	mov	r4, r0
 80056ca:	4608      	mov	r0, r1
 80056cc:	4611      	mov	r1, r2
 80056ce:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80056d2:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80056dc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80056e0:	4622      	mov	r2, r4
 80056e2:	701a      	strb	r2, [r3, #0]
 80056e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80056e8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80056ec:	4602      	mov	r2, r0
 80056ee:	701a      	strb	r2, [r3, #0]
 80056f0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80056f4:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80056f8:	460a      	mov	r2, r1
 80056fa:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80056fc:	f107 0310 	add.w	r3, r7, #16
 8005700:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005704:	f107 0308 	add.w	r3, r7, #8
 8005708:	2207      	movs	r2, #7
 800570a:	2100      	movs	r1, #0
 800570c:	4618      	mov	r0, r3
 800570e:	f000 fe74 	bl	80063fa <Osal_MemSet>
  int index_input = 0;
 8005712:	2300      	movs	r3, #0
 8005714:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 8005718:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800571c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005720:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8005724:	7812      	ldrb	r2, [r2, #0]
 8005726:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005728:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800572c:	3301      	adds	r3, #1
 800572e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8005732:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005736:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800573a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800573e:	7812      	ldrb	r2, [r2, #0]
 8005740:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8005742:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005746:	3301      	adds	r3, #1
 8005748:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800574c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005750:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005754:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8005758:	7812      	ldrb	r2, [r2, #0]
 800575a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800575c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005760:	3301      	adds	r3, #1
 8005762:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005766:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800576a:	2218      	movs	r2, #24
 800576c:	2100      	movs	r1, #0
 800576e:	4618      	mov	r0, r3
 8005770:	f000 fe43 	bl	80063fa <Osal_MemSet>
  rq.ogf = 0x3f;
 8005774:	233f      	movs	r3, #63	@ 0x3f
 8005776:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800577a:	238a      	movs	r3, #138	@ 0x8a
 800577c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005780:	f107 0310 	add.w	r3, r7, #16
 8005784:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005788:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800578c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8005790:	f107 0308 	add.w	r3, r7, #8
 8005794:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8005798:	2307      	movs	r3, #7
 800579a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800579e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80057a2:	2100      	movs	r1, #0
 80057a4:	4618      	mov	r0, r3
 80057a6:	f001 f8b1 	bl	800690c <hci_send_req>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	da01      	bge.n	80057b4 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 80057b0:	23ff      	movs	r3, #255	@ 0xff
 80057b2:	e02e      	b.n	8005812 <aci_gap_init+0x150>
  if ( resp.Status )
 80057b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80057b8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d005      	beq.n	80057ce <aci_gap_init+0x10c>
    return resp.Status;
 80057c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80057c6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	e021      	b.n	8005812 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80057ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80057d2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80057d6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80057da:	b29a      	uxth	r2, r3
 80057dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80057e0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80057e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80057ec:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80057f0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80057f4:	b29a      	uxth	r2, r3
 80057f6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80057fa:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80057fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005800:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8005804:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8005808:	b29a      	uxth	r2, r3
 800580a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800580e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8005818:	46bd      	mov	sp, r7
 800581a:	bd90      	pop	{r4, r7, pc}

0800581c <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b0cc      	sub	sp, #304	@ 0x130
 8005820:	af00      	add	r7, sp, #0
 8005822:	4602      	mov	r2, r0
 8005824:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005828:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800582c:	6019      	str	r1, [r3, #0]
 800582e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005832:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005836:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8005838:	f107 0310 	add.w	r3, r7, #16
 800583c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005840:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005844:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005848:	2200      	movs	r2, #0
 800584a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800584c:	2300      	movs	r3, #0
 800584e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 8005852:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005856:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800585a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800585e:	7812      	ldrb	r2, [r2, #0]
 8005860:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005862:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005866:	3301      	adds	r3, #1
 8005868:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800586c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005870:	1c58      	adds	r0, r3, #1
 8005872:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005876:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800587a:	781a      	ldrb	r2, [r3, #0]
 800587c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005880:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8005884:	6819      	ldr	r1, [r3, #0]
 8005886:	f000 fda8 	bl	80063da <Osal_MemCpy>
  index_input += AdvDataLen;
 800588a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800588e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005898:	4413      	add	r3, r2
 800589a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800589e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80058a2:	2218      	movs	r2, #24
 80058a4:	2100      	movs	r1, #0
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fda7 	bl	80063fa <Osal_MemSet>
  rq.ogf = 0x3f;
 80058ac:	233f      	movs	r3, #63	@ 0x3f
 80058ae:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 80058b2:	238e      	movs	r3, #142	@ 0x8e
 80058b4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80058b8:	f107 0310 	add.w	r3, r7, #16
 80058bc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80058c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80058c4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80058c8:	f107 030f 	add.w	r3, r7, #15
 80058cc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80058d0:	2301      	movs	r3, #1
 80058d2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80058d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80058da:	2100      	movs	r1, #0
 80058dc:	4618      	mov	r0, r3
 80058de:	f001 f815 	bl	800690c <hci_send_req>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	da01      	bge.n	80058ec <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80058e8:	23ff      	movs	r3, #255	@ 0xff
 80058ea:	e004      	b.n	80058f6 <aci_gap_update_adv_data+0xda>
  return status;
 80058ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80058f0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80058f4:	781b      	ldrb	r3, [r3, #0]
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b088      	sub	sp, #32
 8005904:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005906:	2300      	movs	r3, #0
 8005908:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800590a:	f107 0308 	add.w	r3, r7, #8
 800590e:	2218      	movs	r2, #24
 8005910:	2100      	movs	r1, #0
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fd71 	bl	80063fa <Osal_MemSet>
  rq.ogf = 0x3f;
 8005918:	233f      	movs	r3, #63	@ 0x3f
 800591a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800591c:	2392      	movs	r3, #146	@ 0x92
 800591e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005920:	1dfb      	adds	r3, r7, #7
 8005922:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005924:	2301      	movs	r3, #1
 8005926:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005928:	f107 0308 	add.w	r3, r7, #8
 800592c:	2100      	movs	r1, #0
 800592e:	4618      	mov	r0, r3
 8005930:	f000 ffec 	bl	800690c <hci_send_req>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	da01      	bge.n	800593e <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800593a:	23ff      	movs	r3, #255	@ 0xff
 800593c:	e000      	b.n	8005940 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800593e:	79fb      	ldrb	r3, [r7, #7]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3720      	adds	r7, #32
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b0cc      	sub	sp, #304	@ 0x130
 800594c:	af00      	add	r7, sp, #0
 800594e:	4602      	mov	r2, r0
 8005950:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005954:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005958:	801a      	strh	r2, [r3, #0]
 800595a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800595e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8005962:	460a      	mov	r2, r1
 8005964:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8005966:	f107 0310 	add.w	r3, r7, #16
 800596a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800596e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005972:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005976:	2200      	movs	r2, #0
 8005978:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800597a:	2300      	movs	r3, #0
 800597c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005980:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005984:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005988:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800598c:	8812      	ldrh	r2, [r2, #0]
 800598e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005990:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005994:	3302      	adds	r3, #2
 8005996:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800599a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800599e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80059a2:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80059a6:	7812      	ldrb	r2, [r2, #0]
 80059a8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80059aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80059ae:	3301      	adds	r3, #1
 80059b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80059b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80059b8:	2218      	movs	r2, #24
 80059ba:	2100      	movs	r1, #0
 80059bc:	4618      	mov	r0, r3
 80059be:	f000 fd1c 	bl	80063fa <Osal_MemSet>
  rq.ogf = 0x3f;
 80059c2:	233f      	movs	r3, #63	@ 0x3f
 80059c4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 80059c8:	23a5      	movs	r3, #165	@ 0xa5
 80059ca:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80059ce:	f107 0310 	add.w	r3, r7, #16
 80059d2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80059d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80059da:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80059de:	f107 030f 	add.w	r3, r7, #15
 80059e2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80059e6:	2301      	movs	r3, #1
 80059e8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80059ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80059f0:	2100      	movs	r1, #0
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 ff8a 	bl	800690c <hci_send_req>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	da01      	bge.n	8005a02 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80059fe:	23ff      	movs	r3, #255	@ 0xff
 8005a00:	e004      	b.n	8005a0c <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8005a02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005a06:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005a0a:	781b      	ldrb	r3, [r3, #0]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}

08005a16 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b088      	sub	sp, #32
 8005a1a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005a20:	f107 0308 	add.w	r3, r7, #8
 8005a24:	2218      	movs	r2, #24
 8005a26:	2100      	movs	r1, #0
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 fce6 	bl	80063fa <Osal_MemSet>
  rq.ogf = 0x3f;
 8005a2e:	233f      	movs	r3, #63	@ 0x3f
 8005a30:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8005a32:	f240 1301 	movw	r3, #257	@ 0x101
 8005a36:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8005a38:	1dfb      	adds	r3, r7, #7
 8005a3a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005a40:	f107 0308 	add.w	r3, r7, #8
 8005a44:	2100      	movs	r1, #0
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 ff60 	bl	800690c <hci_send_req>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	da01      	bge.n	8005a56 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8005a52:	23ff      	movs	r3, #255	@ 0xff
 8005a54:	e000      	b.n	8005a58 <aci_gatt_init+0x42>
  return status;
 8005a56:	79fb      	ldrb	r3, [r7, #7]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3720      	adds	r7, #32
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8005a60:	b590      	push	{r4, r7, lr}
 8005a62:	b0cf      	sub	sp, #316	@ 0x13c
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	4604      	mov	r4, r0
 8005a68:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8005a6c:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8005a70:	6001      	str	r1, [r0, #0]
 8005a72:	4610      	mov	r0, r2
 8005a74:	4619      	mov	r1, r3
 8005a76:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005a7a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005a7e:	4622      	mov	r2, r4
 8005a80:	701a      	strb	r2, [r3, #0]
 8005a82:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005a86:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	701a      	strb	r2, [r3, #0]
 8005a8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005a92:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005a96:	460a      	mov	r2, r1
 8005a98:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8005a9a:	f107 0310 	add.w	r3, r7, #16
 8005a9e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8005aa2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005aa6:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d00a      	beq.n	8005ac6 <aci_gatt_add_service+0x66>
 8005ab0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005ab4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d101      	bne.n	8005ac2 <aci_gatt_add_service+0x62>
 8005abe:	2311      	movs	r3, #17
 8005ac0:	e002      	b.n	8005ac8 <aci_gatt_add_service+0x68>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e000      	b.n	8005ac8 <aci_gatt_add_service+0x68>
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	f107 0210 	add.w	r2, r7, #16
 8005acc:	4413      	add	r3, r2
 8005ace:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005ad2:	f107 030c 	add.w	r3, r7, #12
 8005ad6:	2203      	movs	r2, #3
 8005ad8:	2100      	movs	r1, #0
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 fc8d 	bl	80063fa <Osal_MemSet>
  int index_input = 0;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8005ae6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005aea:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005aee:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8005af2:	7812      	ldrb	r2, [r2, #0]
 8005af4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8005af6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005afa:	3301      	adds	r3, #1
 8005afc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8005b00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005b04:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d002      	beq.n	8005b14 <aci_gatt_add_service+0xb4>
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d004      	beq.n	8005b1c <aci_gatt_add_service+0xbc>
 8005b12:	e007      	b.n	8005b24 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8005b14:	2302      	movs	r3, #2
 8005b16:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8005b1a:	e005      	b.n	8005b28 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8005b1c:	2310      	movs	r3, #16
 8005b1e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8005b22:	e001      	b.n	8005b28 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8005b24:	2397      	movs	r3, #151	@ 0x97
 8005b26:	e06c      	b.n	8005c02 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8005b28:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005b2c:	1c58      	adds	r0, r3, #1
 8005b2e:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8005b32:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005b36:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005b3a:	6819      	ldr	r1, [r3, #0]
 8005b3c:	f000 fc4d 	bl	80063da <Osal_MemCpy>
    index_input += size;
 8005b40:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8005b44:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005b48:	4413      	add	r3, r2
 8005b4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8005b4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005b52:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005b56:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005b5a:	7812      	ldrb	r2, [r2, #0]
 8005b5c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8005b5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b62:	3301      	adds	r3, #1
 8005b64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8005b68:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005b6c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8005b70:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8005b74:	7812      	ldrb	r2, [r2, #0]
 8005b76:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8005b78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005b82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005b86:	2218      	movs	r2, #24
 8005b88:	2100      	movs	r1, #0
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fc35 	bl	80063fa <Osal_MemSet>
  rq.ogf = 0x3f;
 8005b90:	233f      	movs	r3, #63	@ 0x3f
 8005b92:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8005b96:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8005b9a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005b9e:	f107 0310 	add.w	r3, r7, #16
 8005ba2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005ba6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005baa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8005bae:	f107 030c 	add.w	r3, r7, #12
 8005bb2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005bbc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f000 fea2 	bl	800690c <hci_send_req>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	da01      	bge.n	8005bd2 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8005bce:	23ff      	movs	r3, #255	@ 0xff
 8005bd0:	e017      	b.n	8005c02 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8005bd2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005bd6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d005      	beq.n	8005bec <aci_gatt_add_service+0x18c>
    return resp.Status;
 8005be0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005be4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	e00a      	b.n	8005c02 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8005bec:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8005bf0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005bf4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8005bfe:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd90      	pop	{r4, r7, pc}

08005c0c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8005c0c:	b590      	push	{r4, r7, lr}
 8005c0e:	b0d1      	sub	sp, #324	@ 0x144
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4604      	mov	r4, r0
 8005c14:	4608      	mov	r0, r1
 8005c16:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8005c1a:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8005c1e:	600a      	str	r2, [r1, #0]
 8005c20:	4619      	mov	r1, r3
 8005c22:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005c26:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8005c2a:	4622      	mov	r2, r4
 8005c2c:	801a      	strh	r2, [r3, #0]
 8005c2e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005c32:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005c36:	4602      	mov	r2, r0
 8005c38:	701a      	strb	r2, [r3, #0]
 8005c3a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005c3e:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8005c42:	460a      	mov	r2, r1
 8005c44:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8005c46:	f107 0318 	add.w	r3, r7, #24
 8005c4a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8005c4e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005c52:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d00a      	beq.n	8005c72 <aci_gatt_add_char+0x66>
 8005c5c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005c60:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d101      	bne.n	8005c6e <aci_gatt_add_char+0x62>
 8005c6a:	2313      	movs	r3, #19
 8005c6c:	e002      	b.n	8005c74 <aci_gatt_add_char+0x68>
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e000      	b.n	8005c74 <aci_gatt_add_char+0x68>
 8005c72:	2305      	movs	r3, #5
 8005c74:	f107 0218 	add.w	r2, r7, #24
 8005c78:	4413      	add	r3, r2
 8005c7a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8005c7e:	f107 0314 	add.w	r3, r7, #20
 8005c82:	2203      	movs	r2, #3
 8005c84:	2100      	movs	r1, #0
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 fbb7 	bl	80063fa <Osal_MemSet>
  int index_input = 0;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8005c92:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005c96:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005c9a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8005c9e:	8812      	ldrh	r2, [r2, #0]
 8005ca0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005ca2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005ca6:	3302      	adds	r3, #2
 8005ca8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8005cac:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005cb0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005cb4:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8005cb8:	7812      	ldrb	r2, [r2, #0]
 8005cba:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005cbc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8005cc6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005cca:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d002      	beq.n	8005cda <aci_gatt_add_char+0xce>
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d004      	beq.n	8005ce2 <aci_gatt_add_char+0xd6>
 8005cd8:	e007      	b.n	8005cea <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8005cda:	2302      	movs	r3, #2
 8005cdc:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8005ce0:	e005      	b.n	8005cee <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8005ce2:	2310      	movs	r3, #16
 8005ce4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8005ce8:	e001      	b.n	8005cee <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8005cea:	2397      	movs	r3, #151	@ 0x97
 8005cec:	e091      	b.n	8005e12 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8005cee:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8005cf2:	1cd8      	adds	r0, r3, #3
 8005cf4:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8005cf8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005cfc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8005d00:	6819      	ldr	r1, [r3, #0]
 8005d02:	f000 fb6a 	bl	80063da <Osal_MemCpy>
    index_input += size;
 8005d06:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8005d0a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8005d0e:	4413      	add	r3, r2
 8005d10:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8005d14:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005d18:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8005d1c:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8005d20:	8812      	ldrh	r2, [r2, #0]
 8005d22:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8005d24:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005d28:	3302      	adds	r3, #2
 8005d2a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8005d2e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005d32:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8005d36:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8005d38:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8005d42:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005d46:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8005d4a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8005d4c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005d50:	3301      	adds	r3, #1
 8005d52:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8005d56:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005d5a:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8005d5e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8005d60:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005d64:	3301      	adds	r3, #1
 8005d66:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8005d6a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005d6e:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8005d72:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8005d74:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005d78:	3301      	adds	r3, #1
 8005d7a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8005d7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8005d82:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8005d86:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8005d88:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005d92:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005d96:	2218      	movs	r2, #24
 8005d98:	2100      	movs	r1, #0
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fb2d 	bl	80063fa <Osal_MemSet>
  rq.ogf = 0x3f;
 8005da0:	233f      	movs	r3, #63	@ 0x3f
 8005da2:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8005da6:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8005daa:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8005dae:	f107 0318 	add.w	r3, r7, #24
 8005db2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8005db6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8005dba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8005dbe:	f107 0314 	add.w	r3, r7, #20
 8005dc2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005dcc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fd9a 	bl	800690c <hci_send_req>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	da01      	bge.n	8005de2 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8005dde:	23ff      	movs	r3, #255	@ 0xff
 8005de0:	e017      	b.n	8005e12 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8005de2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005de6:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d005      	beq.n	8005dfc <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8005df0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005df4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	e00a      	b.n	8005e12 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8005dfc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8005e00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005e04:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8005e08:	b29a      	uxth	r2, r3
 8005e0a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8005e0e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd90      	pop	{r4, r7, pc}

08005e1c <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8005e1c:	b5b0      	push	{r4, r5, r7, lr}
 8005e1e:	b0cc      	sub	sp, #304	@ 0x130
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	4605      	mov	r5, r0
 8005e24:	460c      	mov	r4, r1
 8005e26:	4610      	mov	r0, r2
 8005e28:	4619      	mov	r1, r3
 8005e2a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e2e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005e32:	462a      	mov	r2, r5
 8005e34:	801a      	strh	r2, [r3, #0]
 8005e36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8005e3e:	4622      	mov	r2, r4
 8005e40:	801a      	strh	r2, [r3, #0]
 8005e42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e46:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	701a      	strb	r2, [r3, #0]
 8005e4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e52:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8005e56:	460a      	mov	r2, r1
 8005e58:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8005e5a:	f107 0310 	add.w	r3, r7, #16
 8005e5e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005e62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005e66:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8005e74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005e78:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005e7c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005e80:	8812      	ldrh	r2, [r2, #0]
 8005e82:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005e84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005e88:	3302      	adds	r3, #2
 8005e8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8005e8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005e92:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005e96:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8005e9a:	8812      	ldrh	r2, [r2, #0]
 8005e9c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005e9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ea2:	3302      	adds	r3, #2
 8005ea4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8005ea8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005eac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005eb0:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8005eb4:	7812      	ldrb	r2, [r2, #0]
 8005eb6:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005eb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8005ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005ec6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005eca:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8005ece:	7812      	ldrb	r2, [r2, #0]
 8005ed0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8005ed2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8005edc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005ee0:	1d98      	adds	r0, r3, #6
 8005ee2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005ee6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	461a      	mov	r2, r3
 8005eee:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8005ef2:	f000 fa72 	bl	80063da <Osal_MemCpy>
  index_input += Char_Value_Length;
 8005ef6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005efa:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8005f04:	4413      	add	r3, r2
 8005f06:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005f0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005f0e:	2218      	movs	r2, #24
 8005f10:	2100      	movs	r1, #0
 8005f12:	4618      	mov	r0, r3
 8005f14:	f000 fa71 	bl	80063fa <Osal_MemSet>
  rq.ogf = 0x3f;
 8005f18:	233f      	movs	r3, #63	@ 0x3f
 8005f1a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8005f1e:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8005f22:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005f26:	f107 0310 	add.w	r3, r7, #16
 8005f2a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005f2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005f32:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005f36:	f107 030f 	add.w	r3, r7, #15
 8005f3a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005f44:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005f48:	2100      	movs	r1, #0
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fcde 	bl	800690c <hci_send_req>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	da01      	bge.n	8005f5a <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8005f56:	23ff      	movs	r3, #255	@ 0xff
 8005f58:	e004      	b.n	8005f64 <aci_gatt_update_char_value+0x148>
  return status;
 8005f5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f5e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005f62:	781b      	ldrb	r3, [r3, #0]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bdb0      	pop	{r4, r5, r7, pc}

08005f6e <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b0cc      	sub	sp, #304	@ 0x130
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	4602      	mov	r2, r0
 8005f76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f7a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8005f7e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8005f80:	f107 0310 	add.w	r3, r7, #16
 8005f84:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8005f88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8005f8c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8005f90:	2200      	movs	r2, #0
 8005f92:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8005f94:	2300      	movs	r3, #0
 8005f96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8005f9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8005f9e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8005fa2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8005fa6:	8812      	ldrh	r2, [r2, #0]
 8005fa8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8005faa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005fae:	3302      	adds	r3, #2
 8005fb0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8005fb4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005fb8:	2218      	movs	r2, #24
 8005fba:	2100      	movs	r1, #0
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f000 fa1c 	bl	80063fa <Osal_MemSet>
  rq.ogf = 0x3f;
 8005fc2:	233f      	movs	r3, #63	@ 0x3f
 8005fc4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8005fc8:	f240 1325 	movw	r3, #293	@ 0x125
 8005fcc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8005fd0:	f107 0310 	add.w	r3, r7, #16
 8005fd4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8005fd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8005fdc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8005fe0:	f107 030f 	add.w	r3, r7, #15
 8005fe4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8005fee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f000 fc89 	bl	800690c <hci_send_req>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	da01      	bge.n	8006004 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8006000:	23ff      	movs	r3, #255	@ 0xff
 8006002:	e004      	b.n	800600e <aci_gatt_confirm_indication+0xa0>
  return status;
 8006004:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006008:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800600c:	781b      	ldrb	r3, [r3, #0]
}
 800600e:	4618      	mov	r0, r3
 8006010:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b0cc      	sub	sp, #304	@ 0x130
 800601c:	af00      	add	r7, sp, #0
 800601e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006022:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800602c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006030:	4602      	mov	r2, r0
 8006032:	701a      	strb	r2, [r3, #0]
 8006034:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006038:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800603c:	460a      	mov	r2, r1
 800603e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8006040:	f107 0310 	add.w	r3, r7, #16
 8006044:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006048:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800604c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006050:	2200      	movs	r2, #0
 8006052:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006054:	2300      	movs	r3, #0
 8006056:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800605a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800605e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006062:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006066:	7812      	ldrb	r2, [r2, #0]
 8006068:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800606a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800606e:	3301      	adds	r3, #1
 8006070:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8006074:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006078:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800607c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006080:	7812      	ldrb	r2, [r2, #0]
 8006082:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006084:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006088:	3301      	adds	r3, #1
 800608a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800608e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006092:	1c98      	adds	r0, r3, #2
 8006094:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006098:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800609c:	781a      	ldrb	r2, [r3, #0]
 800609e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060a2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80060a6:	6819      	ldr	r1, [r3, #0]
 80060a8:	f000 f997 	bl	80063da <Osal_MemCpy>
  index_input += Length;
 80060ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80060b0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80060ba:	4413      	add	r3, r2
 80060bc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80060c0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80060c4:	2218      	movs	r2, #24
 80060c6:	2100      	movs	r1, #0
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 f996 	bl	80063fa <Osal_MemSet>
  rq.ogf = 0x3f;
 80060ce:	233f      	movs	r3, #63	@ 0x3f
 80060d0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 80060d4:	230c      	movs	r3, #12
 80060d6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80060da:	f107 0310 	add.w	r3, r7, #16
 80060de:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80060e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80060e6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80060ea:	f107 030f 	add.w	r3, r7, #15
 80060ee:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80060f2:	2301      	movs	r3, #1
 80060f4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80060f8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80060fc:	2100      	movs	r1, #0
 80060fe:	4618      	mov	r0, r3
 8006100:	f000 fc04 	bl	800690c <hci_send_req>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	da01      	bge.n	800610e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800610a:	23ff      	movs	r3, #255	@ 0xff
 800610c:	e004      	b.n	8006118 <aci_hal_write_config_data+0x100>
  return status;
 800610e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006112:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006116:	781b      	ldrb	r3, [r3, #0]
}
 8006118:	4618      	mov	r0, r3
 800611a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b0cc      	sub	sp, #304	@ 0x130
 8006126:	af00      	add	r7, sp, #0
 8006128:	4602      	mov	r2, r0
 800612a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800612e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8006132:	701a      	strb	r2, [r3, #0]
 8006134:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006138:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800613c:	460a      	mov	r2, r1
 800613e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8006140:	f107 0310 	add.w	r3, r7, #16
 8006144:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006148:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800614c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006150:	2200      	movs	r2, #0
 8006152:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006154:	2300      	movs	r3, #0
 8006156:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800615a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800615e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006162:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006166:	7812      	ldrb	r2, [r2, #0]
 8006168:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800616a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800616e:	3301      	adds	r3, #1
 8006170:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8006174:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006178:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800617c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006180:	7812      	ldrb	r2, [r2, #0]
 8006182:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006184:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006188:	3301      	adds	r3, #1
 800618a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800618e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006192:	2218      	movs	r2, #24
 8006194:	2100      	movs	r1, #0
 8006196:	4618      	mov	r0, r3
 8006198:	f000 f92f 	bl	80063fa <Osal_MemSet>
  rq.ogf = 0x3f;
 800619c:	233f      	movs	r3, #63	@ 0x3f
 800619e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 80061a2:	230f      	movs	r3, #15
 80061a4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80061a8:	f107 0310 	add.w	r3, r7, #16
 80061ac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80061b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80061b4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80061b8:	f107 030f 	add.w	r3, r7, #15
 80061bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80061c0:	2301      	movs	r3, #1
 80061c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80061c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80061ca:	2100      	movs	r1, #0
 80061cc:	4618      	mov	r0, r3
 80061ce:	f000 fb9d 	bl	800690c <hci_send_req>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	da01      	bge.n	80061dc <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80061d8:	23ff      	movs	r3, #255	@ 0xff
 80061da:	e004      	b.n	80061e6 <aci_hal_set_tx_power_level+0xc4>
  return status;
 80061dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80061e0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80061e4:	781b      	ldrb	r3, [r3, #0]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b0cc      	sub	sp, #304	@ 0x130
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	4602      	mov	r2, r0
 80061f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80061fc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006200:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8006202:	f107 0310 	add.w	r3, r7, #16
 8006206:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800620a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800620e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006212:	2200      	movs	r2, #0
 8006214:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006216:	2300      	movs	r3, #0
 8006218:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800621c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006220:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006224:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006228:	8812      	ldrh	r2, [r2, #0]
 800622a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800622c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006230:	3302      	adds	r3, #2
 8006232:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006236:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800623a:	2218      	movs	r2, #24
 800623c:	2100      	movs	r1, #0
 800623e:	4618      	mov	r0, r3
 8006240:	f000 f8db 	bl	80063fa <Osal_MemSet>
  rq.ogf = 0x3f;
 8006244:	233f      	movs	r3, #63	@ 0x3f
 8006246:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800624a:	2318      	movs	r3, #24
 800624c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006250:	f107 0310 	add.w	r3, r7, #16
 8006254:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8006258:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800625c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8006260:	f107 030f 	add.w	r3, r7, #15
 8006264:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8006268:	2301      	movs	r3, #1
 800626a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800626e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006272:	2100      	movs	r1, #0
 8006274:	4618      	mov	r0, r3
 8006276:	f000 fb49 	bl	800690c <hci_send_req>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	da01      	bge.n	8006284 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8006280:	23ff      	movs	r3, #255	@ 0xff
 8006282:	e004      	b.n	800628e <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8006284:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006288:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800628c:	781b      	ldrb	r3, [r3, #0]
}
 800628e:	4618      	mov	r0, r3
 8006290:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b088      	sub	sp, #32
 800629c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800629e:	2300      	movs	r3, #0
 80062a0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80062a2:	f107 0308 	add.w	r3, r7, #8
 80062a6:	2218      	movs	r2, #24
 80062a8:	2100      	movs	r1, #0
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 f8a5 	bl	80063fa <Osal_MemSet>
  rq.ogf = 0x03;
 80062b0:	2303      	movs	r3, #3
 80062b2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80062b4:	2303      	movs	r3, #3
 80062b6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80062b8:	1dfb      	adds	r3, r7, #7
 80062ba:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80062bc:	2301      	movs	r3, #1
 80062be:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80062c0:	f107 0308 	add.w	r3, r7, #8
 80062c4:	2100      	movs	r1, #0
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 fb20 	bl	800690c <hci_send_req>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	da01      	bge.n	80062d6 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80062d2:	23ff      	movs	r3, #255	@ 0xff
 80062d4:	e000      	b.n	80062d8 <hci_reset+0x40>
  return status;
 80062d6:	79fb      	ldrb	r3, [r7, #7]
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3720      	adds	r7, #32
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80062e0:	b590      	push	{r4, r7, lr}
 80062e2:	b0cd      	sub	sp, #308	@ 0x134
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	4604      	mov	r4, r0
 80062e8:	4608      	mov	r0, r1
 80062ea:	4611      	mov	r1, r2
 80062ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062f0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80062f4:	4622      	mov	r2, r4
 80062f6:	701a      	strb	r2, [r3, #0]
 80062f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80062fc:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8006300:	4602      	mov	r2, r0
 8006302:	701a      	strb	r2, [r3, #0]
 8006304:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8006308:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800630c:	460a      	mov	r2, r1
 800630e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8006310:	f107 0310 	add.w	r3, r7, #16
 8006314:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8006318:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800631c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8006320:	2200      	movs	r2, #0
 8006322:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8006324:	2300      	movs	r3, #0
 8006326:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800632a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800632e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006332:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8006336:	7812      	ldrb	r2, [r2, #0]
 8006338:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800633a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800633e:	3301      	adds	r3, #1
 8006340:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8006344:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006348:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800634c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8006350:	7812      	ldrb	r2, [r2, #0]
 8006352:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8006354:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006358:	3301      	adds	r3, #1
 800635a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800635e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8006362:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8006366:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800636a:	7812      	ldrb	r2, [r2, #0]
 800636c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800636e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8006372:	3301      	adds	r3, #1
 8006374:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8006378:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800637c:	2218      	movs	r2, #24
 800637e:	2100      	movs	r1, #0
 8006380:	4618      	mov	r0, r3
 8006382:	f000 f83a 	bl	80063fa <Osal_MemSet>
  rq.ogf = 0x08;
 8006386:	2308      	movs	r3, #8
 8006388:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800638c:	2331      	movs	r3, #49	@ 0x31
 800638e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8006392:	f107 0310 	add.w	r3, r7, #16
 8006396:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800639a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800639e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80063a2:	f107 030f 	add.w	r3, r7, #15
 80063a6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80063aa:	2301      	movs	r3, #1
 80063ac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80063b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80063b4:	2100      	movs	r1, #0
 80063b6:	4618      	mov	r0, r3
 80063b8:	f000 faa8 	bl	800690c <hci_send_req>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	da01      	bge.n	80063c6 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80063c2:	23ff      	movs	r3, #255	@ 0xff
 80063c4:	e004      	b.n	80063d0 <hci_le_set_default_phy+0xf0>
  return status;
 80063c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80063ca:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80063ce:	781b      	ldrb	r3, [r3, #0]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd90      	pop	{r4, r7, pc}

080063da <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b084      	sub	sp, #16
 80063de:	af00      	add	r7, sp, #0
 80063e0:	60f8      	str	r0, [r7, #12]
 80063e2:	60b9      	str	r1, [r7, #8]
 80063e4:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	68b9      	ldr	r1, [r7, #8]
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f002 fb38 	bl	8008a60 <memcpy>
 80063f0:	4603      	mov	r3, r0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	60f8      	str	r0, [r7, #12]
 8006402:	60b9      	str	r1, [r7, #8]
 8006404:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	68b9      	ldr	r1, [r7, #8]
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f002 fafc 	bl	8008a08 <memset>
 8006410:	4603      	mov	r3, r0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}

0800641a <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800641a:	b480      	push	{r7}
 800641c:	af00      	add	r7, sp, #0
  return;
 800641e:	bf00      	nop
}
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
  return;
 800642c:	bf00      	nop
}
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8006436:	b480      	push	{r7}
 8006438:	af00      	add	r7, sp, #0
  return;
 800643a:	bf00      	nop
}
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8006444:	b480      	push	{r7}
 8006446:	af00      	add	r7, sp, #0
  return;
 8006448:	bf00      	nop
}
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr

08006452 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8006452:	b480      	push	{r7}
 8006454:	af00      	add	r7, sp, #0
  return;
 8006456:	bf00      	nop
}
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8006460:	b480      	push	{r7}
 8006462:	af00      	add	r7, sp, #0
  return;
 8006464:	bf00      	nop
}
 8006466:	46bd      	mov	sp, r7
 8006468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646c:	4770      	bx	lr

0800646e <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800646e:	b480      	push	{r7}
 8006470:	af00      	add	r7, sp, #0
  return;
 8006472:	bf00      	nop
}
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0
  return;
 8006480:	bf00      	nop
}
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr

0800648a <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800648a:	b480      	push	{r7}
 800648c:	af00      	add	r7, sp, #0
  return;
 800648e:	bf00      	nop
}
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8006498:	b480      	push	{r7}
 800649a:	af00      	add	r7, sp, #0
  return;
 800649c:	bf00      	nop
}
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80064a6:	b480      	push	{r7}
 80064a8:	af00      	add	r7, sp, #0
  return;
 80064aa:	bf00      	nop
}
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr

080064b4 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 80064b4:	b480      	push	{r7}
 80064b6:	af00      	add	r7, sp, #0
  return;
 80064b8:	bf00      	nop
}
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 80064c2:	b480      	push	{r7}
 80064c4:	af00      	add	r7, sp, #0
  return;
 80064c6:	bf00      	nop
}
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
  return;
 80064d4:	bf00      	nop
}
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr

080064de <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 80064de:	b480      	push	{r7}
 80064e0:	af00      	add	r7, sp, #0
  return;
 80064e2:	bf00      	nop
}
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <MESH_Init>:
__WEAK void MESH_Init( void )
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
  return;
 80064f0:	bf00      	nop
}
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 80064fa:	b480      	push	{r7}
 80064fc:	af00      	add	r7, sp, #0
  return;
 80064fe:	bf00      	nop
}
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800650c:	4b04      	ldr	r3, [pc, #16]	@ (8006520 <SVCCTL_Init+0x18>)
 800650e:	2200      	movs	r2, #0
 8006510:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8006512:	4b04      	ldr	r3, [pc, #16]	@ (8006524 <SVCCTL_Init+0x1c>)
 8006514:	2200      	movs	r2, #0
 8006516:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8006518:	f000 f806 	bl	8006528 <SVCCTL_SvcInit>

  return;
 800651c:	bf00      	nop
}
 800651e:	bd80      	pop	{r7, pc}
 8006520:	20000040 	.word	0x20000040
 8006524:	20000060 	.word	0x20000060

08006528 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	af00      	add	r7, sp, #0
  BAS_Init();
 800652c:	f7ff ff75 	bl	800641a <BAS_Init>

  BLS_Init();
 8006530:	f7ff ff7a 	bl	8006428 <BLS_Init>

  CRS_STM_Init();
 8006534:	f7ff ff7f 	bl	8006436 <CRS_STM_Init>

  DIS_Init();
 8006538:	f7ff ff84 	bl	8006444 <DIS_Init>

  EDS_STM_Init();
 800653c:	f7ff ff89 	bl	8006452 <EDS_STM_Init>

  HIDS_Init();
 8006540:	f7ff ff8e 	bl	8006460 <HIDS_Init>

  HRS_Init();
 8006544:	f7ff ff93 	bl	800646e <HRS_Init>

  HTS_Init();
 8006548:	f7ff ff98 	bl	800647c <HTS_Init>

  IAS_Init();
 800654c:	f7ff ff9d 	bl	800648a <IAS_Init>

  LLS_Init();
 8006550:	f7ff ffa2 	bl	8006498 <LLS_Init>

  TPS_Init();
 8006554:	f7ff ffa7 	bl	80064a6 <TPS_Init>

  MOTENV_STM_Init();
 8006558:	f7ff ffac 	bl	80064b4 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800655c:	f7ff ffb1 	bl	80064c2 <P2PS_STM_Init>

  ZDD_STM_Init();
 8006560:	f7ff ffb6 	bl	80064d0 <ZDD_STM_Init>

  OTAS_STM_Init();
 8006564:	f7ff ffbb 	bl	80064de <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8006568:	f7ff ffc7 	bl	80064fa <BVOPUS_STM_Init>

  MESH_Init();
 800656c:	f7ff ffbe 	bl	80064ec <MESH_Init>

  SVCCTL_InitCustomSvc();
 8006570:	f001 fbf4 	bl	8007d5c <SVCCTL_InitCustomSvc>
  
  return;
 8006574:	bf00      	nop
}
 8006576:	bd80      	pop	{r7, pc}

08006578 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8006578:	b480      	push	{r7}
 800657a:	b083      	sub	sp, #12
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8006580:	4b09      	ldr	r3, [pc, #36]	@ (80065a8 <SVCCTL_RegisterSvcHandler+0x30>)
 8006582:	7f1b      	ldrb	r3, [r3, #28]
 8006584:	4619      	mov	r1, r3
 8006586:	4a08      	ldr	r2, [pc, #32]	@ (80065a8 <SVCCTL_RegisterSvcHandler+0x30>)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800658e:	4b06      	ldr	r3, [pc, #24]	@ (80065a8 <SVCCTL_RegisterSvcHandler+0x30>)
 8006590:	7f1b      	ldrb	r3, [r3, #28]
 8006592:	3301      	adds	r3, #1
 8006594:	b2da      	uxtb	r2, r3
 8006596:	4b04      	ldr	r3, [pc, #16]	@ (80065a8 <SVCCTL_RegisterSvcHandler+0x30>)
 8006598:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800659a:	bf00      	nop
}
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	20000040 	.word	0x20000040

080065ac <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	3301      	adds	r3, #1
 80065b8:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 80065ba:	2300      	movs	r3, #0
 80065bc:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	2bff      	cmp	r3, #255	@ 0xff
 80065c4:	d125      	bne.n	8006612 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	3302      	adds	r3, #2
 80065ca:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80065d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065da:	d118      	bne.n	800660e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80065dc:	2300      	movs	r3, #0
 80065de:	757b      	strb	r3, [r7, #21]
 80065e0:	e00d      	b.n	80065fe <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80065e2:	7d7b      	ldrb	r3, [r7, #21]
 80065e4:	4a1a      	ldr	r2, [pc, #104]	@ (8006650 <SVCCTL_UserEvtRx+0xa4>)
 80065e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	4798      	blx	r3
 80065ee:	4603      	mov	r3, r0
 80065f0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80065f2:	7dfb      	ldrb	r3, [r7, #23]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d108      	bne.n	800660a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80065f8:	7d7b      	ldrb	r3, [r7, #21]
 80065fa:	3301      	adds	r3, #1
 80065fc:	757b      	strb	r3, [r7, #21]
 80065fe:	4b14      	ldr	r3, [pc, #80]	@ (8006650 <SVCCTL_UserEvtRx+0xa4>)
 8006600:	7f1b      	ldrb	r3, [r3, #28]
 8006602:	7d7a      	ldrb	r2, [r7, #21]
 8006604:	429a      	cmp	r2, r3
 8006606:	d3ec      	bcc.n	80065e2 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8006608:	e002      	b.n	8006610 <SVCCTL_UserEvtRx+0x64>
              break;
 800660a:	bf00      	nop
          break;
 800660c:	e000      	b.n	8006610 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800660e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8006610:	e000      	b.n	8006614 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8006612:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8006614:	7dfb      	ldrb	r3, [r7, #23]
 8006616:	2b02      	cmp	r3, #2
 8006618:	d00f      	beq.n	800663a <SVCCTL_UserEvtRx+0x8e>
 800661a:	2b02      	cmp	r3, #2
 800661c:	dc10      	bgt.n	8006640 <SVCCTL_UserEvtRx+0x94>
 800661e:	2b00      	cmp	r3, #0
 8006620:	d002      	beq.n	8006628 <SVCCTL_UserEvtRx+0x7c>
 8006622:	2b01      	cmp	r3, #1
 8006624:	d006      	beq.n	8006634 <SVCCTL_UserEvtRx+0x88>
 8006626:	e00b      	b.n	8006640 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f000 ff85 	bl	8007538 <SVCCTL_App_Notification>
 800662e:	4603      	mov	r3, r0
 8006630:	75bb      	strb	r3, [r7, #22]
      break;
 8006632:	e008      	b.n	8006646 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006634:	2301      	movs	r3, #1
 8006636:	75bb      	strb	r3, [r7, #22]
      break;
 8006638:	e005      	b.n	8006646 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800663a:	2300      	movs	r3, #0
 800663c:	75bb      	strb	r3, [r7, #22]
      break;
 800663e:	e002      	b.n	8006646 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8006640:	2301      	movs	r3, #1
 8006642:	75bb      	strb	r3, [r7, #22]
      break;
 8006644:	bf00      	nop
  }

  return (return_status);
 8006646:	7dbb      	ldrb	r3, [r7, #22]
}
 8006648:	4618      	mov	r0, r3
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	20000040 	.word	0x20000040

08006654 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b088      	sub	sp, #32
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800665c:	f107 030c 	add.w	r3, r7, #12
 8006660:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	212e      	movs	r1, #46	@ 0x2e
 800666c:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8006670:	f000 fae8 	bl	8006c44 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	330b      	adds	r3, #11
 8006678:	78db      	ldrb	r3, [r3, #3]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3720      	adds	r7, #32
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8006682:	b580      	push	{r7, lr}
 8006684:	b088      	sub	sp, #32
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800668a:	f107 030c 	add.w	r3, r7, #12
 800668e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	210f      	movs	r1, #15
 800669a:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800669e:	f000 fad1 	bl	8006c44 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	330b      	adds	r3, #11
 80066a6:	78db      	ldrb	r3, [r3, #3]
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3720      	adds	r7, #32
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b088      	sub	sp, #32
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80066b8:	f107 030c 	add.w	r3, r7, #12
 80066bc:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	2110      	movs	r1, #16
 80066c4:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 80066c8:	f000 fabc 	bl	8006c44 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	330b      	adds	r3, #11
 80066d0:	78db      	ldrb	r3, [r3, #3]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3720      	adds	r7, #32
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
	...

080066dc <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80066dc:	b480      	push	{r7}
 80066de:	b08b      	sub	sp, #44	@ 0x2c
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80066e4:	2300      	movs	r3, #0
 80066e6:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80066e8:	2300      	movs	r3, #0
 80066ea:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80066ec:	2300      	movs	r3, #0
 80066ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80066f0:	2300      	movs	r3, #0
 80066f2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80066f4:	2300      	movs	r3, #0
 80066f6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80066f8:	2300      	movs	r3, #0
 80066fa:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80066fc:	2300      	movs	r3, #0
 80066fe:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8006700:	2300      	movs	r3, #0
 8006702:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8006704:	4b4a      	ldr	r3, [pc, #296]	@ (8006830 <SHCI_GetWirelessFwInfo+0x154>)
 8006706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006708:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800670c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006716:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a44      	ldr	r2, [pc, #272]	@ (8006834 <SHCI_GetWirelessFwInfo+0x158>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d10f      	bne.n	8006748 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	69db      	ldr	r3, [r3, #28]
 8006738:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	617b      	str	r3, [r7, #20]
 8006746:	e01a      	b.n	800677e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8006750:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8006754:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006780:	0e1b      	lsrs	r3, r3, #24
 8006782:	b2da      	uxtb	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8006788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678a:	0c1b      	lsrs	r3, r3, #16
 800678c:	b2da      	uxtb	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8006792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006794:	0a1b      	lsrs	r3, r3, #8
 8006796:	b2da      	uxtb	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800679c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679e:	091b      	lsrs	r3, r3, #4
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 80067ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	f003 030f 	and.w	r3, r3, #15
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	0e1b      	lsrs	r3, r3, #24
 80067be:	b2da      	uxtb	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80067c4:	6a3b      	ldr	r3, [r7, #32]
 80067c6:	0c1b      	lsrs	r3, r3, #16
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	0a1b      	lsrs	r3, r3, #8
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	b2da      	uxtb	r2, r3
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	0e1b      	lsrs	r3, r3, #24
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	0c1b      	lsrs	r3, r3, #16
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	0a1b      	lsrs	r3, r3, #8
 8006800:	b2da      	uxtb	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	0e1b      	lsrs	r3, r3, #24
 800680a:	b2da      	uxtb	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	0c1b      	lsrs	r3, r3, #16
 8006814:	b2da      	uxtb	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	b2da      	uxtb	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8006822:	2300      	movs	r3, #0
}
 8006824:	4618      	mov	r0, r3
 8006826:	372c      	adds	r7, #44	@ 0x2c
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	58004000 	.word	0x58004000
 8006834:	a94656b9 	.word	0xa94656b9

08006838 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	4a08      	ldr	r2, [pc, #32]	@ (8006868 <hci_init+0x30>)
 8006848:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800684a:	4a08      	ldr	r2, [pc, #32]	@ (800686c <hci_init+0x34>)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8006850:	4806      	ldr	r0, [pc, #24]	@ (800686c <hci_init+0x34>)
 8006852:	f000 f979 	bl	8006b48 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4618      	mov	r0, r3
 800685c:	f000 f8da 	bl	8006a14 <TlInit>

  return;
 8006860:	bf00      	nop
}
 8006862:	3708      	adds	r7, #8
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	20000238 	.word	0x20000238
 800686c:	20000210 	.word	0x20000210

08006870 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8006876:	4822      	ldr	r0, [pc, #136]	@ (8006900 <hci_user_evt_proc+0x90>)
 8006878:	f000 fd32 	bl	80072e0 <LST_is_empty>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d12b      	bne.n	80068da <hci_user_evt_proc+0x6a>
 8006882:	4b20      	ldr	r3, [pc, #128]	@ (8006904 <hci_user_evt_proc+0x94>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d027      	beq.n	80068da <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800688a:	f107 030c 	add.w	r3, r7, #12
 800688e:	4619      	mov	r1, r3
 8006890:	481b      	ldr	r0, [pc, #108]	@ (8006900 <hci_user_evt_proc+0x90>)
 8006892:	f000 fdb4 	bl	80073fe <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8006896:	4b1c      	ldr	r3, [pc, #112]	@ (8006908 <hci_user_evt_proc+0x98>)
 8006898:	69db      	ldr	r3, [r3, #28]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00c      	beq.n	80068b8 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80068a2:	2301      	movs	r3, #1
 80068a4:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80068a6:	4b18      	ldr	r3, [pc, #96]	@ (8006908 <hci_user_evt_proc+0x98>)
 80068a8:	69db      	ldr	r3, [r3, #28]
 80068aa:	1d3a      	adds	r2, r7, #4
 80068ac:	4610      	mov	r0, r2
 80068ae:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80068b0:	793a      	ldrb	r2, [r7, #4]
 80068b2:	4b14      	ldr	r3, [pc, #80]	@ (8006904 <hci_user_evt_proc+0x94>)
 80068b4:	701a      	strb	r2, [r3, #0]
 80068b6:	e002      	b.n	80068be <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80068b8:	4b12      	ldr	r3, [pc, #72]	@ (8006904 <hci_user_evt_proc+0x94>)
 80068ba:	2201      	movs	r2, #1
 80068bc:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80068be:	4b11      	ldr	r3, [pc, #68]	@ (8006904 <hci_user_evt_proc+0x94>)
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d004      	beq.n	80068d0 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 fc0d 	bl	80070e8 <TL_MM_EvtDone>
 80068ce:	e004      	b.n	80068da <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4619      	mov	r1, r3
 80068d4:	480a      	ldr	r0, [pc, #40]	@ (8006900 <hci_user_evt_proc+0x90>)
 80068d6:	f000 fd25 	bl	8007324 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80068da:	4809      	ldr	r0, [pc, #36]	@ (8006900 <hci_user_evt_proc+0x90>)
 80068dc:	f000 fd00 	bl	80072e0 <LST_is_empty>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d107      	bne.n	80068f6 <hci_user_evt_proc+0x86>
 80068e6:	4b07      	ldr	r3, [pc, #28]	@ (8006904 <hci_user_evt_proc+0x94>)
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80068ee:	4804      	ldr	r0, [pc, #16]	@ (8006900 <hci_user_evt_proc+0x90>)
 80068f0:	f001 f84e 	bl	8007990 <hci_notify_asynch_evt>
  }


  return;
 80068f4:	bf00      	nop
 80068f6:	bf00      	nop
}
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	20000068 	.word	0x20000068
 8006904:	20000074 	.word	0x20000074
 8006908:	20000210 	.word	0x20000210

0800690c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b088      	sub	sp, #32
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	460b      	mov	r3, r1
 8006916:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8006918:	2000      	movs	r0, #0
 800691a:	f000 f8d1 	bl	8006ac0 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800691e:	2300      	movs	r3, #0
 8006920:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	885b      	ldrh	r3, [r3, #2]
 8006926:	b21b      	sxth	r3, r3
 8006928:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800692c:	b21a      	sxth	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	881b      	ldrh	r3, [r3, #0]
 8006932:	029b      	lsls	r3, r3, #10
 8006934:	b21b      	sxth	r3, r3
 8006936:	4313      	orrs	r3, r2
 8006938:	b21b      	sxth	r3, r3
 800693a:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800693c:	4b33      	ldr	r3, [pc, #204]	@ (8006a0c <hci_send_req+0x100>)
 800693e:	2201      	movs	r2, #1
 8006940:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	b2d9      	uxtb	r1, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689a      	ldr	r2, [r3, #8]
 800694c:	8bbb      	ldrh	r3, [r7, #28]
 800694e:	4618      	mov	r0, r3
 8006950:	f000 f890 	bl	8006a74 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8006954:	e04e      	b.n	80069f4 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8006956:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800695a:	f001 f830 	bl	80079be <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800695e:	e043      	b.n	80069e8 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8006960:	f107 030c 	add.w	r3, r7, #12
 8006964:	4619      	mov	r1, r3
 8006966:	482a      	ldr	r0, [pc, #168]	@ (8006a10 <hci_send_req+0x104>)
 8006968:	f000 fd49 	bl	80073fe <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	7a5b      	ldrb	r3, [r3, #9]
 8006970:	2b0f      	cmp	r3, #15
 8006972:	d114      	bne.n	800699e <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	330b      	adds	r3, #11
 8006978:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	885b      	ldrh	r3, [r3, #2]
 800697e:	b29b      	uxth	r3, r3
 8006980:	8bba      	ldrh	r2, [r7, #28]
 8006982:	429a      	cmp	r2, r3
 8006984:	d104      	bne.n	8006990 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	7812      	ldrb	r2, [r2, #0]
 800698e:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	785b      	ldrb	r3, [r3, #1]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d027      	beq.n	80069e8 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8006998:	2301      	movs	r3, #1
 800699a:	77fb      	strb	r3, [r7, #31]
 800699c:	e024      	b.n	80069e8 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	330b      	adds	r3, #11
 80069a2:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	8bba      	ldrh	r2, [r7, #28]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d114      	bne.n	80069dc <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	7a9b      	ldrb	r3, [r3, #10]
 80069b6:	3b03      	subs	r3, #3
 80069b8:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	695a      	ldr	r2, [r3, #20]
 80069be:	7dfb      	ldrb	r3, [r7, #23]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	bfa8      	it	ge
 80069c4:	461a      	movge	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6918      	ldr	r0, [r3, #16]
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	1cd9      	adds	r1, r3, #3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	695b      	ldr	r3, [r3, #20]
 80069d6:	461a      	mov	r2, r3
 80069d8:	f002 f842 	bl	8008a60 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80069e4:	2301      	movs	r3, #1
 80069e6:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80069e8:	4809      	ldr	r0, [pc, #36]	@ (8006a10 <hci_send_req+0x104>)
 80069ea:	f000 fc79 	bl	80072e0 <LST_is_empty>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0b5      	beq.n	8006960 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80069f4:	7ffb      	ldrb	r3, [r7, #31]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d0ad      	beq.n	8006956 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80069fa:	2001      	movs	r0, #1
 80069fc:	f000 f860 	bl	8006ac0 <NotifyCmdStatus>

  return 0;
 8006a00:	2300      	movs	r3, #0
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	3720      	adds	r7, #32
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	2000023c 	.word	0x2000023c
 8006a10:	20000230 	.word	0x20000230

08006a14 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8006a1c:	480f      	ldr	r0, [pc, #60]	@ (8006a5c <TlInit+0x48>)
 8006a1e:	f000 fc4f 	bl	80072c0 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8006a22:	4a0f      	ldr	r2, [pc, #60]	@ (8006a60 <TlInit+0x4c>)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8006a28:	480e      	ldr	r0, [pc, #56]	@ (8006a64 <TlInit+0x50>)
 8006a2a:	f000 fc49 	bl	80072c0 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8006a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8006a68 <TlInit+0x54>)
 8006a30:	2201      	movs	r2, #1
 8006a32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8006a34:	4b0d      	ldr	r3, [pc, #52]	@ (8006a6c <TlInit+0x58>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00a      	beq.n	8006a52 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8006a40:	4b0b      	ldr	r3, [pc, #44]	@ (8006a70 <TlInit+0x5c>)
 8006a42:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8006a44:	4b09      	ldr	r3, [pc, #36]	@ (8006a6c <TlInit+0x58>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f107 0208 	add.w	r2, r7, #8
 8006a4c:	4610      	mov	r0, r2
 8006a4e:	4798      	blx	r3
  }

  return;
 8006a50:	bf00      	nop
 8006a52:	bf00      	nop
}
 8006a54:	3718      	adds	r7, #24
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20000230 	.word	0x20000230
 8006a60:	20000070 	.word	0x20000070
 8006a64:	20000068 	.word	0x20000068
 8006a68:	20000074 	.word	0x20000074
 8006a6c:	20000210 	.word	0x20000210
 8006a70:	08006b01 	.word	0x08006b01

08006a74 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b082      	sub	sp, #8
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	603a      	str	r2, [r7, #0]
 8006a7e:	80fb      	strh	r3, [r7, #6]
 8006a80:	460b      	mov	r3, r1
 8006a82:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8006a84:	4b0c      	ldr	r3, [pc, #48]	@ (8006ab8 <SendCmd+0x44>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	88fa      	ldrh	r2, [r7, #6]
 8006a8a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8006a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8006ab8 <SendCmd+0x44>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	797a      	ldrb	r2, [r7, #5]
 8006a94:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8006a96:	4b08      	ldr	r3, [pc, #32]	@ (8006ab8 <SendCmd+0x44>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	330c      	adds	r3, #12
 8006a9c:	797a      	ldrb	r2, [r7, #5]
 8006a9e:	6839      	ldr	r1, [r7, #0]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f001 ffdd 	bl	8008a60 <memcpy>

  hciContext.io.Send(0,0);
 8006aa6:	4b05      	ldr	r3, [pc, #20]	@ (8006abc <SendCmd+0x48>)
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	2100      	movs	r1, #0
 8006aac:	2000      	movs	r0, #0
 8006aae:	4798      	blx	r3

  return;
 8006ab0:	bf00      	nop
}
 8006ab2:	3708      	adds	r7, #8
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	20000070 	.word	0x20000070
 8006abc:	20000210 	.word	0x20000210

08006ac0 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8006aca:	79fb      	ldrb	r3, [r7, #7]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d108      	bne.n	8006ae2 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8006ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8006afc <NotifyCmdStatus+0x3c>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d00d      	beq.n	8006af4 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8006ad8:	4b08      	ldr	r3, [pc, #32]	@ (8006afc <NotifyCmdStatus+0x3c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2000      	movs	r0, #0
 8006ade:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8006ae0:	e008      	b.n	8006af4 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8006ae2:	4b06      	ldr	r3, [pc, #24]	@ (8006afc <NotifyCmdStatus+0x3c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d004      	beq.n	8006af4 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8006aea:	4b04      	ldr	r3, [pc, #16]	@ (8006afc <NotifyCmdStatus+0x3c>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2001      	movs	r0, #1
 8006af0:	4798      	blx	r3
  return;
 8006af2:	bf00      	nop
 8006af4:	bf00      	nop
}
 8006af6:	3708      	adds	r7, #8
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	20000238 	.word	0x20000238

08006b00 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	7a5b      	ldrb	r3, [r3, #9]
 8006b0c:	2b0f      	cmp	r3, #15
 8006b0e:	d003      	beq.n	8006b18 <TlEvtReceived+0x18>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	7a5b      	ldrb	r3, [r3, #9]
 8006b14:	2b0e      	cmp	r3, #14
 8006b16:	d107      	bne.n	8006b28 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8006b18:	6879      	ldr	r1, [r7, #4]
 8006b1a:	4809      	ldr	r0, [pc, #36]	@ (8006b40 <TlEvtReceived+0x40>)
 8006b1c:	f000 fc28 	bl	8007370 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8006b20:	2000      	movs	r0, #0
 8006b22:	f000 ff41 	bl	80079a8 <hci_cmd_resp_release>
 8006b26:	e006      	b.n	8006b36 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8006b28:	6879      	ldr	r1, [r7, #4]
 8006b2a:	4806      	ldr	r0, [pc, #24]	@ (8006b44 <TlEvtReceived+0x44>)
 8006b2c:	f000 fc20 	bl	8007370 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006b30:	4804      	ldr	r0, [pc, #16]	@ (8006b44 <TlEvtReceived+0x44>)
 8006b32:	f000 ff2d 	bl	8007990 <hci_notify_asynch_evt>
  }

  return;
 8006b36:	bf00      	nop
}
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	20000230 	.word	0x20000230
 8006b44:	20000068 	.word	0x20000068

08006b48 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a05      	ldr	r2, [pc, #20]	@ (8006b68 <hci_register_io_bus+0x20>)
 8006b54:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a04      	ldr	r2, [pc, #16]	@ (8006b6c <hci_register_io_bus+0x24>)
 8006b5a:	611a      	str	r2, [r3, #16]

  return;
 8006b5c:	bf00      	nop
}
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	08006e61 	.word	0x08006e61
 8006b6c:	08006ec9 	.word	0x08006ec9

08006b70 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	4a08      	ldr	r2, [pc, #32]	@ (8006ba0 <shci_init+0x30>)
 8006b80:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8006b82:	4a08      	ldr	r2, [pc, #32]	@ (8006ba4 <shci_init+0x34>)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8006b88:	4806      	ldr	r0, [pc, #24]	@ (8006ba4 <shci_init+0x34>)
 8006b8a:	f000 f915 	bl	8006db8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f000 f898 	bl	8006cc8 <TlInit>

  return;
 8006b98:	bf00      	nop
}
 8006b9a:	3708      	adds	r7, #8
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	20000260 	.word	0x20000260
 8006ba4:	20000240 	.word	0x20000240

08006ba8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006bae:	4822      	ldr	r0, [pc, #136]	@ (8006c38 <shci_user_evt_proc+0x90>)
 8006bb0:	f000 fb96 	bl	80072e0 <LST_is_empty>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d12b      	bne.n	8006c12 <shci_user_evt_proc+0x6a>
 8006bba:	4b20      	ldr	r3, [pc, #128]	@ (8006c3c <shci_user_evt_proc+0x94>)
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d027      	beq.n	8006c12 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8006bc2:	f107 030c 	add.w	r3, r7, #12
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	481b      	ldr	r0, [pc, #108]	@ (8006c38 <shci_user_evt_proc+0x90>)
 8006bca:	f000 fc18 	bl	80073fe <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8006bce:	4b1c      	ldr	r3, [pc, #112]	@ (8006c40 <shci_user_evt_proc+0x98>)
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00c      	beq.n	8006bf0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8006bde:	4b18      	ldr	r3, [pc, #96]	@ (8006c40 <shci_user_evt_proc+0x98>)
 8006be0:	69db      	ldr	r3, [r3, #28]
 8006be2:	1d3a      	adds	r2, r7, #4
 8006be4:	4610      	mov	r0, r2
 8006be6:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8006be8:	793a      	ldrb	r2, [r7, #4]
 8006bea:	4b14      	ldr	r3, [pc, #80]	@ (8006c3c <shci_user_evt_proc+0x94>)
 8006bec:	701a      	strb	r2, [r3, #0]
 8006bee:	e002      	b.n	8006bf6 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006bf0:	4b12      	ldr	r3, [pc, #72]	@ (8006c3c <shci_user_evt_proc+0x94>)
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8006bf6:	4b11      	ldr	r3, [pc, #68]	@ (8006c3c <shci_user_evt_proc+0x94>)
 8006bf8:	781b      	ldrb	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d004      	beq.n	8006c08 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f000 fa71 	bl	80070e8 <TL_MM_EvtDone>
 8006c06:	e004      	b.n	8006c12 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	480a      	ldr	r0, [pc, #40]	@ (8006c38 <shci_user_evt_proc+0x90>)
 8006c0e:	f000 fb89 	bl	8007324 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8006c12:	4809      	ldr	r0, [pc, #36]	@ (8006c38 <shci_user_evt_proc+0x90>)
 8006c14:	f000 fb64 	bl	80072e0 <LST_is_empty>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d107      	bne.n	8006c2e <shci_user_evt_proc+0x86>
 8006c1e:	4b07      	ldr	r3, [pc, #28]	@ (8006c3c <shci_user_evt_proc+0x94>)
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d003      	beq.n	8006c2e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8006c26:	4804      	ldr	r0, [pc, #16]	@ (8006c38 <shci_user_evt_proc+0x90>)
 8006c28:	f7f9 fe2b 	bl	8000882 <shci_notify_asynch_evt>
  }


  return;
 8006c2c:	bf00      	nop
 8006c2e:	bf00      	nop
}
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	20000078 	.word	0x20000078
 8006c3c:	20000088 	.word	0x20000088
 8006c40:	20000240 	.word	0x20000240

08006c44 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b084      	sub	sp, #16
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60ba      	str	r2, [r7, #8]
 8006c4c:	607b      	str	r3, [r7, #4]
 8006c4e:	4603      	mov	r3, r0
 8006c50:	81fb      	strh	r3, [r7, #14]
 8006c52:	460b      	mov	r3, r1
 8006c54:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8006c56:	2000      	movs	r0, #0
 8006c58:	f000 f868 	bl	8006d2c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8006c5c:	4b17      	ldr	r3, [pc, #92]	@ (8006cbc <shci_send+0x78>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	89fa      	ldrh	r2, [r7, #14]
 8006c62:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8006c66:	4b15      	ldr	r3, [pc, #84]	@ (8006cbc <shci_send+0x78>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	7b7a      	ldrb	r2, [r7, #13]
 8006c6c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8006c6e:	4b13      	ldr	r3, [pc, #76]	@ (8006cbc <shci_send+0x78>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	330c      	adds	r3, #12
 8006c74:	7b7a      	ldrb	r2, [r7, #13]
 8006c76:	68b9      	ldr	r1, [r7, #8]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f001 fef1 	bl	8008a60 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8006c7e:	4b10      	ldr	r3, [pc, #64]	@ (8006cc0 <shci_send+0x7c>)
 8006c80:	2201      	movs	r2, #1
 8006c82:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8006c84:	4b0f      	ldr	r3, [pc, #60]	@ (8006cc4 <shci_send+0x80>)
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	2100      	movs	r1, #0
 8006c8a:	2000      	movs	r0, #0
 8006c8c:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8006c8e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8006c92:	f7f9 fe0d 	bl	80008b0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f103 0008 	add.w	r0, r3, #8
 8006c9c:	4b07      	ldr	r3, [pc, #28]	@ (8006cbc <shci_send+0x78>)
 8006c9e:	6819      	ldr	r1, [r3, #0]
 8006ca0:	4b06      	ldr	r3, [pc, #24]	@ (8006cbc <shci_send+0x78>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	789b      	ldrb	r3, [r3, #2]
 8006ca6:	3303      	adds	r3, #3
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f001 fed9 	bl	8008a60 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006cae:	2001      	movs	r0, #1
 8006cb0:	f000 f83c 	bl	8006d2c <Cmd_SetStatus>

  return;
 8006cb4:	bf00      	nop
}
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	20000084 	.word	0x20000084
 8006cc0:	20000264 	.word	0x20000264
 8006cc4:	20000240 	.word	0x20000240

08006cc8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b086      	sub	sp, #24
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8006cd0:	4a10      	ldr	r2, [pc, #64]	@ (8006d14 <TlInit+0x4c>)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8006cd6:	4810      	ldr	r0, [pc, #64]	@ (8006d18 <TlInit+0x50>)
 8006cd8:	f000 faf2 	bl	80072c0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8006cdc:	2001      	movs	r0, #1
 8006cde:	f000 f825 	bl	8006d2c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8006ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8006d1c <TlInit+0x54>)
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8006ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8006d20 <TlInit+0x58>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00c      	beq.n	8006d0a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8006cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8006d24 <TlInit+0x5c>)
 8006cf6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8006cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8006d28 <TlInit+0x60>)
 8006cfa:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8006cfc:	4b08      	ldr	r3, [pc, #32]	@ (8006d20 <TlInit+0x58>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f107 020c 	add.w	r2, r7, #12
 8006d04:	4610      	mov	r0, r2
 8006d06:	4798      	blx	r3
  }

  return;
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
}
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	20000084 	.word	0x20000084
 8006d18:	20000078 	.word	0x20000078
 8006d1c:	20000088 	.word	0x20000088
 8006d20:	20000240 	.word	0x20000240
 8006d24:	08006d7d 	.word	0x08006d7d
 8006d28:	08006d95 	.word	0x08006d95

08006d2c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	4603      	mov	r3, r0
 8006d34:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8006d36:	79fb      	ldrb	r3, [r7, #7]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10b      	bne.n	8006d54 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8006d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8006d74 <Cmd_SetStatus+0x48>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d003      	beq.n	8006d4c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8006d44:	4b0b      	ldr	r3, [pc, #44]	@ (8006d74 <Cmd_SetStatus+0x48>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2000      	movs	r0, #0
 8006d4a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8006d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d78 <Cmd_SetStatus+0x4c>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8006d52:	e00b      	b.n	8006d6c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8006d54:	4b08      	ldr	r3, [pc, #32]	@ (8006d78 <Cmd_SetStatus+0x4c>)
 8006d56:	2201      	movs	r2, #1
 8006d58:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8006d5a:	4b06      	ldr	r3, [pc, #24]	@ (8006d74 <Cmd_SetStatus+0x48>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d004      	beq.n	8006d6c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8006d62:	4b04      	ldr	r3, [pc, #16]	@ (8006d74 <Cmd_SetStatus+0x48>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2001      	movs	r0, #1
 8006d68:	4798      	blx	r3
  return;
 8006d6a:	bf00      	nop
 8006d6c:	bf00      	nop
}
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	20000260 	.word	0x20000260
 8006d78:	20000080 	.word	0x20000080

08006d7c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8006d84:	2000      	movs	r0, #0
 8006d86:	f7f9 fd88 	bl	800089a <shci_cmd_resp_release>

  return;
 8006d8a:	bf00      	nop
}
 8006d8c:	3708      	adds	r7, #8
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
	...

08006d94 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b082      	sub	sp, #8
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8006d9c:	6879      	ldr	r1, [r7, #4]
 8006d9e:	4805      	ldr	r0, [pc, #20]	@ (8006db4 <TlUserEvtReceived+0x20>)
 8006da0:	f000 fae6 	bl	8007370 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8006da4:	4803      	ldr	r0, [pc, #12]	@ (8006db4 <TlUserEvtReceived+0x20>)
 8006da6:	f7f9 fd6c 	bl	8000882 <shci_notify_asynch_evt>

  return;
 8006daa:	bf00      	nop
}
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	20000078 	.word	0x20000078

08006db8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a05      	ldr	r2, [pc, #20]	@ (8006dd8 <shci_register_io_bus+0x20>)
 8006dc4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a04      	ldr	r2, [pc, #16]	@ (8006ddc <shci_register_io_bus+0x24>)
 8006dca:	611a      	str	r2, [r3, #16]

  return;
 8006dcc:	bf00      	nop
}
 8006dce:	370c      	adds	r7, #12
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr
 8006dd8:	08006f75 	.word	0x08006f75
 8006ddc:	08006fc9 	.word	0x08006fc9

08006de0 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8006de4:	f001 fac2 	bl	800836c <HW_IPCC_Enable>

  return;
 8006de8:	bf00      	nop
}
 8006dea:	bd80      	pop	{r7, pc}

08006dec <TL_Init>:


void TL_Init( void )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8006df0:	4b10      	ldr	r3, [pc, #64]	@ (8006e34 <TL_Init+0x48>)
 8006df2:	4a11      	ldr	r2, [pc, #68]	@ (8006e38 <TL_Init+0x4c>)
 8006df4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8006df6:	4b0f      	ldr	r3, [pc, #60]	@ (8006e34 <TL_Init+0x48>)
 8006df8:	4a10      	ldr	r2, [pc, #64]	@ (8006e3c <TL_Init+0x50>)
 8006dfa:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8006dfc:	4b0d      	ldr	r3, [pc, #52]	@ (8006e34 <TL_Init+0x48>)
 8006dfe:	4a10      	ldr	r2, [pc, #64]	@ (8006e40 <TL_Init+0x54>)
 8006e00:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8006e02:	4b0c      	ldr	r3, [pc, #48]	@ (8006e34 <TL_Init+0x48>)
 8006e04:	4a0f      	ldr	r2, [pc, #60]	@ (8006e44 <TL_Init+0x58>)
 8006e06:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8006e08:	4b0a      	ldr	r3, [pc, #40]	@ (8006e34 <TL_Init+0x48>)
 8006e0a:	4a0f      	ldr	r2, [pc, #60]	@ (8006e48 <TL_Init+0x5c>)
 8006e0c:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8006e0e:	4b09      	ldr	r3, [pc, #36]	@ (8006e34 <TL_Init+0x48>)
 8006e10:	4a0e      	ldr	r2, [pc, #56]	@ (8006e4c <TL_Init+0x60>)
 8006e12:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8006e14:	4b07      	ldr	r3, [pc, #28]	@ (8006e34 <TL_Init+0x48>)
 8006e16:	4a0e      	ldr	r2, [pc, #56]	@ (8006e50 <TL_Init+0x64>)
 8006e18:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8006e1a:	4b06      	ldr	r3, [pc, #24]	@ (8006e34 <TL_Init+0x48>)
 8006e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8006e54 <TL_Init+0x68>)
 8006e1e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8006e20:	4b04      	ldr	r3, [pc, #16]	@ (8006e34 <TL_Init+0x48>)
 8006e22:	4a0d      	ldr	r2, [pc, #52]	@ (8006e58 <TL_Init+0x6c>)
 8006e24:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8006e26:	4b03      	ldr	r3, [pc, #12]	@ (8006e34 <TL_Init+0x48>)
 8006e28:	4a0c      	ldr	r2, [pc, #48]	@ (8006e5c <TL_Init+0x70>)
 8006e2a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8006e2c:	f001 fab2 	bl	8008394 <HW_IPCC_Init>

  return;
 8006e30:	bf00      	nop
}
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	20030000 	.word	0x20030000
 8006e38:	20030028 	.word	0x20030028
 8006e3c:	20030048 	.word	0x20030048
 8006e40:	20030058 	.word	0x20030058
 8006e44:	20030068 	.word	0x20030068
 8006e48:	20030070 	.word	0x20030070
 8006e4c:	20030078 	.word	0x20030078
 8006e50:	20030080 	.word	0x20030080
 8006e54:	2003009c 	.word	0x2003009c
 8006e58:	200300a0 	.word	0x200300a0
 8006e5c:	200300ac 	.word	0x200300ac

08006e60 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8006e6c:	4811      	ldr	r0, [pc, #68]	@ (8006eb4 <TL_BLE_Init+0x54>)
 8006e6e:	f000 fa27 	bl	80072c0 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8006e72:	4b11      	ldr	r3, [pc, #68]	@ (8006eb8 <TL_BLE_Init+0x58>)
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	689a      	ldr	r2, [r3, #8]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	68da      	ldr	r2, [r3, #12]
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	4a0c      	ldr	r2, [pc, #48]	@ (8006ebc <TL_BLE_Init+0x5c>)
 8006e8c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	4a08      	ldr	r2, [pc, #32]	@ (8006eb4 <TL_BLE_Init+0x54>)
 8006e92:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8006e94:	f001 fa94 	bl	80083c0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a08      	ldr	r2, [pc, #32]	@ (8006ec0 <TL_BLE_Init+0x60>)
 8006e9e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	4a07      	ldr	r2, [pc, #28]	@ (8006ec4 <TL_BLE_Init+0x64>)
 8006ea6:	6013      	str	r3, [r2, #0]

  return 0;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	200300c8 	.word	0x200300c8
 8006eb8:	20030000 	.word	0x20030000
 8006ebc:	20030a58 	.word	0x20030a58
 8006ec0:	20000270 	.word	0x20000270
 8006ec4:	20000274 	.word	0x20000274

08006ec8 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8006ed4:	4b09      	ldr	r3, [pc, #36]	@ (8006efc <TL_BLE_SendCmd+0x34>)
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2201      	movs	r2, #1
 8006edc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8006ede:	4b07      	ldr	r3, [pc, #28]	@ (8006efc <TL_BLE_SendCmd+0x34>)
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	2001      	movs	r0, #1
 8006ee8:	f000 f96c 	bl	80071c4 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8006eec:	f001 fa72 	bl	80083d4 <HW_IPCC_BLE_SendCmd>

  return 0;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3708      	adds	r7, #8
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	20030000 	.word	0x20030000

08006f00 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b082      	sub	sp, #8
 8006f04:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8006f06:	e01c      	b.n	8006f42 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8006f08:	1d3b      	adds	r3, r7, #4
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	4812      	ldr	r0, [pc, #72]	@ (8006f58 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8006f0e:	f000 fa76 	bl	80073fe <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	7a5b      	ldrb	r3, [r3, #9]
 8006f16:	2b0f      	cmp	r3, #15
 8006f18:	d003      	beq.n	8006f22 <HW_IPCC_BLE_RxEvtNot+0x22>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	7a5b      	ldrb	r3, [r3, #9]
 8006f1e:	2b0e      	cmp	r3, #14
 8006f20:	d105      	bne.n	8006f2e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4619      	mov	r1, r3
 8006f26:	2002      	movs	r0, #2
 8006f28:	f000 f94c 	bl	80071c4 <OutputDbgTrace>
 8006f2c:	e004      	b.n	8006f38 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	4619      	mov	r1, r3
 8006f32:	2003      	movs	r0, #3
 8006f34:	f000 f946 	bl	80071c4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8006f38:	4b08      	ldr	r3, [pc, #32]	@ (8006f5c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	4610      	mov	r0, r2
 8006f40:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8006f42:	4805      	ldr	r0, [pc, #20]	@ (8006f58 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8006f44:	f000 f9cc 	bl	80072e0 <LST_is_empty>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d0dc      	beq.n	8006f08 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8006f4e:	bf00      	nop
}
 8006f50:	3708      	adds	r7, #8
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	200300c8 	.word	0x200300c8
 8006f5c:	20000270 	.word	0x20000270

08006f60 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8006f64:	4b02      	ldr	r3, [pc, #8]	@ (8006f70 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4798      	blx	r3

  return;
 8006f6a:	bf00      	nop
}
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	20000274 	.word	0x20000274

08006f74 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8006f80:	480d      	ldr	r0, [pc, #52]	@ (8006fb8 <TL_SYS_Init+0x44>)
 8006f82:	f000 f99d 	bl	80072c0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8006f86:	4b0d      	ldr	r3, [pc, #52]	@ (8006fbc <TL_SYS_Init+0x48>)
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	689a      	ldr	r2, [r3, #8]
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4a08      	ldr	r2, [pc, #32]	@ (8006fb8 <TL_SYS_Init+0x44>)
 8006f98:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8006f9a:	f001 fa3d 	bl	8008418 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a07      	ldr	r2, [pc, #28]	@ (8006fc0 <TL_SYS_Init+0x4c>)
 8006fa4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	4a06      	ldr	r2, [pc, #24]	@ (8006fc4 <TL_SYS_Init+0x50>)
 8006fac:	6013      	str	r3, [r2, #0]

  return 0;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}
 8006fb8:	200300d0 	.word	0x200300d0
 8006fbc:	20030000 	.word	0x20030000
 8006fc0:	20000278 	.word	0x20000278
 8006fc4:	2000027c 	.word	0x2000027c

08006fc8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8006fd4:	4b09      	ldr	r3, [pc, #36]	@ (8006ffc <TL_SYS_SendCmd+0x34>)
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2210      	movs	r2, #16
 8006fdc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8006fde:	4b07      	ldr	r3, [pc, #28]	@ (8006ffc <TL_SYS_SendCmd+0x34>)
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	2004      	movs	r0, #4
 8006fe8:	f000 f8ec 	bl	80071c4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8006fec:	f001 fa1e 	bl	800842c <HW_IPCC_SYS_SendCmd>

  return 0;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20030000 	.word	0x20030000

08007000 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007004:	4b07      	ldr	r3, [pc, #28]	@ (8007024 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4619      	mov	r1, r3
 800700c:	2005      	movs	r0, #5
 800700e:	f000 f8d9 	bl	80071c4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8007012:	4b05      	ldr	r3, [pc, #20]	@ (8007028 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a03      	ldr	r2, [pc, #12]	@ (8007024 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8007018:	68d2      	ldr	r2, [r2, #12]
 800701a:	6812      	ldr	r2, [r2, #0]
 800701c:	4610      	mov	r0, r2
 800701e:	4798      	blx	r3

  return;
 8007020:	bf00      	nop
}
 8007022:	bd80      	pop	{r7, pc}
 8007024:	20030000 	.word	0x20030000
 8007028:	20000278 	.word	0x20000278

0800702c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007032:	e00e      	b.n	8007052 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8007034:	1d3b      	adds	r3, r7, #4
 8007036:	4619      	mov	r1, r3
 8007038:	480b      	ldr	r0, [pc, #44]	@ (8007068 <HW_IPCC_SYS_EvtNot+0x3c>)
 800703a:	f000 f9e0 	bl	80073fe <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4619      	mov	r1, r3
 8007042:	2006      	movs	r0, #6
 8007044:	f000 f8be 	bl	80071c4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8007048:	4b08      	ldr	r3, [pc, #32]	@ (800706c <HW_IPCC_SYS_EvtNot+0x40>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	4610      	mov	r0, r2
 8007050:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8007052:	4805      	ldr	r0, [pc, #20]	@ (8007068 <HW_IPCC_SYS_EvtNot+0x3c>)
 8007054:	f000 f944 	bl	80072e0 <LST_is_empty>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d0ea      	beq.n	8007034 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800705e:	bf00      	nop
}
 8007060:	3708      	adds	r7, #8
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	200300d0 	.word	0x200300d0
 800706c:	2000027c 	.word	0x2000027c

08007070 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8007078:	4817      	ldr	r0, [pc, #92]	@ (80070d8 <TL_MM_Init+0x68>)
 800707a:	f000 f921 	bl	80072c0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800707e:	4817      	ldr	r0, [pc, #92]	@ (80070dc <TL_MM_Init+0x6c>)
 8007080:	f000 f91e 	bl	80072c0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8007084:	4b16      	ldr	r3, [pc, #88]	@ (80070e0 <TL_MM_Init+0x70>)
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	4a16      	ldr	r2, [pc, #88]	@ (80070e4 <TL_MM_Init+0x74>)
 800708a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800708c:	4b15      	ldr	r3, [pc, #84]	@ (80070e4 <TL_MM_Init+0x74>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	6892      	ldr	r2, [r2, #8]
 8007094:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8007096:	4b13      	ldr	r3, [pc, #76]	@ (80070e4 <TL_MM_Init+0x74>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	68d2      	ldr	r2, [r2, #12]
 800709e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80070a0:	4b10      	ldr	r3, [pc, #64]	@ (80070e4 <TL_MM_Init+0x74>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a0c      	ldr	r2, [pc, #48]	@ (80070d8 <TL_MM_Init+0x68>)
 80070a6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80070a8:	4b0e      	ldr	r3, [pc, #56]	@ (80070e4 <TL_MM_Init+0x74>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6812      	ldr	r2, [r2, #0]
 80070b0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80070b2:	4b0c      	ldr	r3, [pc, #48]	@ (80070e4 <TL_MM_Init+0x74>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	6852      	ldr	r2, [r2, #4]
 80070ba:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80070bc:	4b09      	ldr	r3, [pc, #36]	@ (80070e4 <TL_MM_Init+0x74>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	6912      	ldr	r2, [r2, #16]
 80070c4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80070c6:	4b07      	ldr	r3, [pc, #28]	@ (80070e4 <TL_MM_Init+0x74>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	6952      	ldr	r2, [r2, #20]
 80070ce:	619a      	str	r2, [r3, #24]

  return;
 80070d0:	bf00      	nop
}
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	200300b8 	.word	0x200300b8
 80070dc:	20000268 	.word	0x20000268
 80070e0:	20030000 	.word	0x20030000
 80070e4:	20000280 	.word	0x20000280

080070e8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80070f0:	6879      	ldr	r1, [r7, #4]
 80070f2:	4807      	ldr	r0, [pc, #28]	@ (8007110 <TL_MM_EvtDone+0x28>)
 80070f4:	f000 f93c 	bl	8007370 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80070f8:	6879      	ldr	r1, [r7, #4]
 80070fa:	2000      	movs	r0, #0
 80070fc:	f000 f862 	bl	80071c4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8007100:	4804      	ldr	r0, [pc, #16]	@ (8007114 <TL_MM_EvtDone+0x2c>)
 8007102:	f001 f9b9 	bl	8008478 <HW_IPCC_MM_SendFreeBuf>

  return;
 8007106:	bf00      	nop
}
 8007108:	3708      	adds	r7, #8
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	20000268 	.word	0x20000268
 8007114:	08007119 	.word	0x08007119

08007118 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b082      	sub	sp, #8
 800711c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800711e:	e00c      	b.n	800713a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8007120:	1d3b      	adds	r3, r7, #4
 8007122:	4619      	mov	r1, r3
 8007124:	480a      	ldr	r0, [pc, #40]	@ (8007150 <SendFreeBuf+0x38>)
 8007126:	f000 f96a 	bl	80073fe <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800712a:	4b0a      	ldr	r3, [pc, #40]	@ (8007154 <SendFreeBuf+0x3c>)
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	4611      	mov	r1, r2
 8007134:	4618      	mov	r0, r3
 8007136:	f000 f91b 	bl	8007370 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800713a:	4805      	ldr	r0, [pc, #20]	@ (8007150 <SendFreeBuf+0x38>)
 800713c:	f000 f8d0 	bl	80072e0 <LST_is_empty>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d0ec      	beq.n	8007120 <SendFreeBuf+0x8>
  }

  return;
 8007146:	bf00      	nop
}
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	20000268 	.word	0x20000268
 8007154:	20030000 	.word	0x20030000

08007158 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800715c:	4805      	ldr	r0, [pc, #20]	@ (8007174 <TL_TRACES_Init+0x1c>)
 800715e:	f000 f8af 	bl	80072c0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8007162:	4b05      	ldr	r3, [pc, #20]	@ (8007178 <TL_TRACES_Init+0x20>)
 8007164:	695b      	ldr	r3, [r3, #20]
 8007166:	4a03      	ldr	r2, [pc, #12]	@ (8007174 <TL_TRACES_Init+0x1c>)
 8007168:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800716a:	f001 f9bb 	bl	80084e4 <HW_IPCC_TRACES_Init>

  return;
 800716e:	bf00      	nop
}
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	200300c0 	.word	0x200300c0
 8007178:	20030000 	.word	0x20030000

0800717c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007182:	e008      	b.n	8007196 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8007184:	1d3b      	adds	r3, r7, #4
 8007186:	4619      	mov	r1, r3
 8007188:	4808      	ldr	r0, [pc, #32]	@ (80071ac <HW_IPCC_TRACES_EvtNot+0x30>)
 800718a:	f000 f938 	bl	80073fe <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	4618      	mov	r0, r3
 8007192:	f000 f80d 	bl	80071b0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8007196:	4805      	ldr	r0, [pc, #20]	@ (80071ac <HW_IPCC_TRACES_EvtNot+0x30>)
 8007198:	f000 f8a2 	bl	80072e0 <LST_is_empty>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d0f0      	beq.n	8007184 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80071a2:	bf00      	nop
}
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	200300c0 	.word	0x200300c0

080071b0 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	4603      	mov	r3, r0
 80071cc:	6039      	str	r1, [r7, #0]
 80071ce:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80071d0:	79fb      	ldrb	r3, [r7, #7]
 80071d2:	2b06      	cmp	r3, #6
 80071d4:	d845      	bhi.n	8007262 <OutputDbgTrace+0x9e>
 80071d6:	a201      	add	r2, pc, #4	@ (adr r2, 80071dc <OutputDbgTrace+0x18>)
 80071d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071dc:	080071f9 	.word	0x080071f9
 80071e0:	0800721d 	.word	0x0800721d
 80071e4:	08007223 	.word	0x08007223
 80071e8:	08007237 	.word	0x08007237
 80071ec:	08007243 	.word	0x08007243
 80071f0:	08007249 	.word	0x08007249
 80071f4:	08007257 	.word	0x08007257
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	7a5b      	ldrb	r3, [r3, #9]
 8007200:	2bff      	cmp	r3, #255	@ 0xff
 8007202:	d005      	beq.n	8007210 <OutputDbgTrace+0x4c>
 8007204:	2bff      	cmp	r3, #255	@ 0xff
 8007206:	dc05      	bgt.n	8007214 <OutputDbgTrace+0x50>
 8007208:	2b0e      	cmp	r3, #14
 800720a:	d005      	beq.n	8007218 <OutputDbgTrace+0x54>
 800720c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800720e:	e001      	b.n	8007214 <OutputDbgTrace+0x50>
          break;
 8007210:	bf00      	nop
 8007212:	e027      	b.n	8007264 <OutputDbgTrace+0xa0>
          break;
 8007214:	bf00      	nop
 8007216:	e025      	b.n	8007264 <OutputDbgTrace+0xa0>
          break;
 8007218:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800721a:	e023      	b.n	8007264 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007220:	e020      	b.n	8007264 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	7a5b      	ldrb	r3, [r3, #9]
 800722a:	2b0e      	cmp	r3, #14
 800722c:	d001      	beq.n	8007232 <OutputDbgTrace+0x6e>
 800722e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007230:	e000      	b.n	8007234 <OutputDbgTrace+0x70>
          break;
 8007232:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007234:	e016      	b.n	8007264 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	7a5b      	ldrb	r3, [r3, #9]
 800723e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007240:	e010      	b.n	8007264 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007246:	e00d      	b.n	8007264 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	7a5b      	ldrb	r3, [r3, #9]
 8007250:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007252:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007254:	e006      	b.n	8007264 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	7a5b      	ldrb	r3, [r3, #9]
 800725e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007260:	e000      	b.n	8007264 <OutputDbgTrace+0xa0>

    default:
      break;
 8007262:	bf00      	nop
  }

  return;
 8007264:	bf00      	nop
}
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	4603      	mov	r3, r0
 8007278:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800727a:	4b0f      	ldr	r3, [pc, #60]	@ (80072b8 <OTP_Read+0x48>)
 800727c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800727e:	e002      	b.n	8007286 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	3b08      	subs	r3, #8
 8007284:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	3307      	adds	r3, #7
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	79fa      	ldrb	r2, [r7, #7]
 800728e:	429a      	cmp	r2, r3
 8007290:	d003      	beq.n	800729a <OTP_Read+0x2a>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4a09      	ldr	r2, [pc, #36]	@ (80072bc <OTP_Read+0x4c>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d1f2      	bne.n	8007280 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	3307      	adds	r3, #7
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	79fa      	ldrb	r2, [r7, #7]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d001      	beq.n	80072aa <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80072aa:	68fb      	ldr	r3, [r7, #12]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr
 80072b8:	1fff73f8 	.word	0x1fff73f8
 80072bc:	1fff7000 	.word	0x1fff7000

080072c0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	605a      	str	r2, [r3, #4]
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072e8:	f3ef 8310 	mrs	r3, PRIMASK
 80072ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80072ee:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80072f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80072f2:	b672      	cpsid	i
}
 80072f4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d102      	bne.n	8007306 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8007300:	2301      	movs	r3, #1
 8007302:	75fb      	strb	r3, [r7, #23]
 8007304:	e001      	b.n	800730a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8007306:	2300      	movs	r3, #0
 8007308:	75fb      	strb	r3, [r7, #23]
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	f383 8810 	msr	PRIMASK, r3
}
 8007314:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8007316:	7dfb      	ldrb	r3, [r7, #23]
}
 8007318:	4618      	mov	r0, r3
 800731a:	371c      	adds	r7, #28
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8007324:	b480      	push	{r7}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800732e:	f3ef 8310 	mrs	r3, PRIMASK
 8007332:	60fb      	str	r3, [r7, #12]
  return(result);
 8007334:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007336:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007338:	b672      	cpsid	i
}
 800733a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	683a      	ldr	r2, [r7, #0]
 800734e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	683a      	ldr	r2, [r7, #0]
 8007356:	605a      	str	r2, [r3, #4]
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f383 8810 	msr	PRIMASK, r3
}
 8007362:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007364:	bf00      	nop
 8007366:	371c      	adds	r7, #28
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8007370:	b480      	push	{r7}
 8007372:	b087      	sub	sp, #28
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800737a:	f3ef 8310 	mrs	r3, PRIMASK
 800737e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007380:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007382:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007384:	b672      	cpsid	i
}
 8007386:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685a      	ldr	r2, [r3, #4]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	683a      	ldr	r2, [r7, #0]
 800739a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	683a      	ldr	r2, [r7, #0]
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	f383 8810 	msr	PRIMASK, r3
}
 80073ae:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80073b0:	bf00      	nop
 80073b2:	371c      	adds	r7, #28
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 80073bc:	b480      	push	{r7}
 80073be:	b087      	sub	sp, #28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073c4:	f3ef 8310 	mrs	r3, PRIMASK
 80073c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80073ca:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80073cc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80073ce:	b672      	cpsid	i
}
 80073d0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	6812      	ldr	r2, [r2, #0]
 80073da:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	6852      	ldr	r2, [r2, #4]
 80073e4:	605a      	str	r2, [r3, #4]
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f383 8810 	msr	PRIMASK, r3
}
 80073f0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80073f2:	bf00      	nop
 80073f4:	371c      	adds	r7, #28
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b086      	sub	sp, #24
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007408:	f3ef 8310 	mrs	r3, PRIMASK
 800740c:	60fb      	str	r3, [r7, #12]
  return(result);
 800740e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007410:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007412:	b672      	cpsid	i
}
 8007414:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4618      	mov	r0, r3
 8007424:	f7ff ffca 	bl	80073bc <LST_remove_node>
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	f383 8810 	msr	PRIMASK, r3
}
 8007432:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007434:	bf00      	nop
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}

0800743c <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800743c:	b480      	push	{r7}
 800743e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8007440:	4b03      	ldr	r3, [pc, #12]	@ (8007450 <LL_FLASH_GetUDN+0x14>)
 8007442:	681b      	ldr	r3, [r3, #0]
}
 8007444:	4618      	mov	r0, r3
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	1fff7580 	.word	0x1fff7580

08007454 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8007454:	b480      	push	{r7}
 8007456:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8007458:	4b03      	ldr	r3, [pc, #12]	@ (8007468 <LL_FLASH_GetDeviceID+0x14>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	b2db      	uxtb	r3, r3
}
 800745e:	4618      	mov	r0, r3
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	1fff7584 	.word	0x1fff7584

0800746c <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8007470:	4b03      	ldr	r3, [pc, #12]	@ (8007480 <LL_FLASH_GetSTCompanyID+0x14>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	0a1b      	lsrs	r3, r3, #8
}
 8007476:	4618      	mov	r0, r3
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	1fff7584 	.word	0x1fff7584

08007484 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8007484:	b5b0      	push	{r4, r5, r7, lr}
 8007486:	b090      	sub	sp, #64	@ 0x40
 8007488:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800748a:	2392      	movs	r3, #146	@ 0x92
 800748c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8007490:	4b25      	ldr	r3, [pc, #148]	@ (8007528 <APP_BLE_Init+0xa4>)
 8007492:	1d3c      	adds	r4, r7, #4
 8007494:	461d      	mov	r5, r3
 8007496:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800749a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800749c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800749e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80074a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074a2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80074a6:	c403      	stmia	r4!, {r0, r1}
 80074a8:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80074aa:	f000 f913 	bl	80076d4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80074ae:	2101      	movs	r1, #1
 80074b0:	2002      	movs	r0, #2
 80074b2:	f001 f83f 	bl	8008534 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80074b6:	4a1d      	ldr	r2, [pc, #116]	@ (800752c <APP_BLE_Init+0xa8>)
 80074b8:	2100      	movs	r1, #0
 80074ba:	2002      	movs	r0, #2
 80074bc:	f001 f966 	bl	800878c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80074c0:	1d3b      	adds	r3, r7, #4
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7ff f8c6 	bl	8006654 <SHCI_C2_BLE_Init>
 80074c8:	4603      	mov	r3, r0
 80074ca:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 80074ce:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80074d6:	f7fa f9f5 	bl	80018c4 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80074da:	f000 f911 	bl	8007700 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80074de:	f7ff f813 	bl	8006508 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80074e2:	4b13      	ldr	r3, [pc, #76]	@ (8007530 <APP_BLE_Init+0xac>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80074ea:	4b11      	ldr	r3, [pc, #68]	@ (8007530 <APP_BLE_Init+0xac>)
 80074ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80074f0:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80074f2:	4a10      	ldr	r2, [pc, #64]	@ (8007534 <APP_BLE_Init+0xb0>)
 80074f4:	2100      	movs	r1, #0
 80074f6:	2001      	movs	r0, #1
 80074f8:	f001 f948 	bl	800878c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80074fc:	2006      	movs	r0, #6
 80074fe:	f7fe fe77 	bl	80061f0 <aci_hal_set_radio_activity_mask>
 8007502:	4603      	mov	r3, r0
 8007504:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8007508:	f000 faf4 	bl	8007af4 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800750c:	4b08      	ldr	r3, [pc, #32]	@ (8007530 <APP_BLE_Init+0xac>)
 800750e:	2200      	movs	r2, #0
 8007510:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8007512:	4b07      	ldr	r3, [pc, #28]	@ (8007530 <APP_BLE_Init+0xac>)
 8007514:	2200      	movs	r2, #0
 8007516:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8007518:	2001      	movs	r0, #1
 800751a:	f000 f9a5 	bl	8007868 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800751e:	bf00      	nop
}
 8007520:	3740      	adds	r7, #64	@ 0x40
 8007522:	46bd      	mov	sp, r7
 8007524:	bdb0      	pop	{r4, r5, r7, pc}
 8007526:	bf00      	nop
 8007528:	08008adc 	.word	0x08008adc
 800752c:	08006871 	.word	0x08006871
 8007530:	2000028c 	.word	0x2000028c
 8007534:	08007951 	.word	0x08007951

08007538 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b08a      	sub	sp, #40	@ 0x28
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8007540:	2392      	movs	r3, #146	@ 0x92
 8007542:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	3301      	adds	r3, #1
 800754a:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800754c:	6a3b      	ldr	r3, [r7, #32]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	2bff      	cmp	r3, #255	@ 0xff
 8007552:	d053      	beq.n	80075fc <SVCCTL_App_Notification+0xc4>
 8007554:	2bff      	cmp	r3, #255	@ 0xff
 8007556:	f300 80af 	bgt.w	80076b8 <SVCCTL_App_Notification+0x180>
 800755a:	2b05      	cmp	r3, #5
 800755c:	d002      	beq.n	8007564 <SVCCTL_App_Notification+0x2c>
 800755e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007560:	d020      	beq.n	80075a4 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8007562:	e0a9      	b.n	80076b8 <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8007564:	6a3b      	ldr	r3, [r7, #32]
 8007566:	3302      	adds	r3, #2
 8007568:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007570:	b29a      	uxth	r2, r3
 8007572:	4b55      	ldr	r3, [pc, #340]	@ (80076c8 <SVCCTL_App_Notification+0x190>)
 8007574:	8adb      	ldrh	r3, [r3, #22]
 8007576:	429a      	cmp	r2, r3
 8007578:	d106      	bne.n	8007588 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800757a:	4b53      	ldr	r3, [pc, #332]	@ (80076c8 <SVCCTL_App_Notification+0x190>)
 800757c:	2200      	movs	r2, #0
 800757e:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8007580:	4b51      	ldr	r3, [pc, #324]	@ (80076c8 <SVCCTL_App_Notification+0x190>)
 8007582:	2200      	movs	r2, #0
 8007584:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8007588:	2001      	movs	r0, #1
 800758a:	f000 f96d 	bl	8007868 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800758e:	4b4f      	ldr	r3, [pc, #316]	@ (80076cc <SVCCTL_App_Notification+0x194>)
 8007590:	2201      	movs	r2, #1
 8007592:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8007594:	4b4c      	ldr	r3, [pc, #304]	@ (80076c8 <SVCCTL_App_Notification+0x190>)
 8007596:	8ada      	ldrh	r2, [r3, #22]
 8007598:	4b4c      	ldr	r3, [pc, #304]	@ (80076cc <SVCCTL_App_Notification+0x194>)
 800759a:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800759c:	484b      	ldr	r0, [pc, #300]	@ (80076cc <SVCCTL_App_Notification+0x194>)
 800759e:	f000 fa95 	bl	8007acc <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80075a2:	e08c      	b.n	80076be <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	3302      	adds	r3, #2
 80075a8:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	781b      	ldrb	r3, [r3, #0]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d001      	beq.n	80075b6 <SVCCTL_App_Notification+0x7e>
 80075b2:	2b03      	cmp	r3, #3
          break;
 80075b4:	e021      	b.n	80075fa <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	3301      	adds	r3, #1
 80075ba:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 80075bc:	4b42      	ldr	r3, [pc, #264]	@ (80076c8 <SVCCTL_App_Notification+0x190>)
 80075be:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80075c2:	2b04      	cmp	r3, #4
 80075c4:	d104      	bne.n	80075d0 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 80075c6:	4b40      	ldr	r3, [pc, #256]	@ (80076c8 <SVCCTL_App_Notification+0x190>)
 80075c8:	2206      	movs	r2, #6
 80075ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80075ce:	e003      	b.n	80075d8 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80075d0:	4b3d      	ldr	r3, [pc, #244]	@ (80076c8 <SVCCTL_App_Notification+0x190>)
 80075d2:	2205      	movs	r2, #5
 80075d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80075de:	b29a      	uxth	r2, r3
 80075e0:	4b39      	ldr	r3, [pc, #228]	@ (80076c8 <SVCCTL_App_Notification+0x190>)
 80075e2:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80075e4:	4b39      	ldr	r3, [pc, #228]	@ (80076cc <SVCCTL_App_Notification+0x194>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80075ea:	4b37      	ldr	r3, [pc, #220]	@ (80076c8 <SVCCTL_App_Notification+0x190>)
 80075ec:	8ada      	ldrh	r2, [r3, #22]
 80075ee:	4b37      	ldr	r3, [pc, #220]	@ (80076cc <SVCCTL_App_Notification+0x194>)
 80075f0:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 80075f2:	4836      	ldr	r0, [pc, #216]	@ (80076cc <SVCCTL_App_Notification+0x194>)
 80075f4:	f000 fa6a 	bl	8007acc <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80075f8:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80075fa:	e060      	b.n	80076be <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	3302      	adds	r3, #2
 8007600:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	881b      	ldrh	r3, [r3, #0]
 8007606:	b29b      	uxth	r3, r3
 8007608:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800760c:	4293      	cmp	r3, r2
 800760e:	d047      	beq.n	80076a0 <SVCCTL_App_Notification+0x168>
 8007610:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8007614:	4293      	cmp	r3, r2
 8007616:	dc51      	bgt.n	80076bc <SVCCTL_App_Notification+0x184>
 8007618:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800761c:	d046      	beq.n	80076ac <SVCCTL_App_Notification+0x174>
 800761e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007622:	dc4b      	bgt.n	80076bc <SVCCTL_App_Notification+0x184>
 8007624:	2b04      	cmp	r3, #4
 8007626:	d043      	beq.n	80076b0 <SVCCTL_App_Notification+0x178>
 8007628:	2b04      	cmp	r3, #4
 800762a:	db47      	blt.n	80076bc <SVCCTL_App_Notification+0x184>
 800762c:	f240 420a 	movw	r2, #1034	@ 0x40a
 8007630:	4293      	cmp	r3, r2
 8007632:	dc43      	bgt.n	80076bc <SVCCTL_App_Notification+0x184>
 8007634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007638:	dd40      	ble.n	80076bc <SVCCTL_App_Notification+0x184>
 800763a:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800763e:	2b09      	cmp	r3, #9
 8007640:	d83c      	bhi.n	80076bc <SVCCTL_App_Notification+0x184>
 8007642:	a201      	add	r2, pc, #4	@ (adr r2, 8007648 <SVCCTL_App_Notification+0x110>)
 8007644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007648:	08007699 	.word	0x08007699
 800764c:	08007671 	.word	0x08007671
 8007650:	080076bd 	.word	0x080076bd
 8007654:	080076bd 	.word	0x080076bd
 8007658:	080076bd 	.word	0x080076bd
 800765c:	080076bd 	.word	0x080076bd
 8007660:	080076b5 	.word	0x080076b5
 8007664:	080076bd 	.word	0x080076bd
 8007668:	08007685 	.word	0x08007685
 800766c:	080076b5 	.word	0x080076b5
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8007670:	4b15      	ldr	r3, [pc, #84]	@ (80076c8 <SVCCTL_App_Notification+0x190>)
 8007672:	8adb      	ldrh	r3, [r3, #22]
 8007674:	4916      	ldr	r1, [pc, #88]	@ (80076d0 <SVCCTL_App_Notification+0x198>)
 8007676:	4618      	mov	r0, r3
 8007678:	f7fd ffbc 	bl	80055f4 <aci_gap_pass_key_resp>
 800767c:	4603      	mov	r3, r0
 800767e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8007682:	e018      	b.n	80076b6 <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8007684:	4b10      	ldr	r3, [pc, #64]	@ (80076c8 <SVCCTL_App_Notification+0x190>)
 8007686:	8adb      	ldrh	r3, [r3, #22]
 8007688:	2101      	movs	r1, #1
 800768a:	4618      	mov	r0, r3
 800768c:	f7fe f95c 	bl	8005948 <aci_gap_numeric_comparison_value_confirm_yesno>
 8007690:	4603      	mov	r3, r0
 8007692:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8007696:	e00e      	b.n	80076b6 <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	3302      	adds	r3, #2
 800769c:	61bb      	str	r3, [r7, #24]
          break;
 800769e:	e00a      	b.n	80076b6 <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80076a0:	4b09      	ldr	r3, [pc, #36]	@ (80076c8 <SVCCTL_App_Notification+0x190>)
 80076a2:	8adb      	ldrh	r3, [r3, #22]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fe fc62 	bl	8005f6e <aci_gatt_confirm_indication>
        break;
 80076aa:	e004      	b.n	80076b6 <SVCCTL_App_Notification+0x17e>
          break;
 80076ac:	bf00      	nop
 80076ae:	e005      	b.n	80076bc <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80076b0:	bf00      	nop
 80076b2:	e003      	b.n	80076bc <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 80076b4:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80076b6:	e001      	b.n	80076bc <SVCCTL_App_Notification+0x184>
      break;
 80076b8:	bf00      	nop
 80076ba:	e000      	b.n	80076be <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80076bc:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80076be:	2301      	movs	r3, #1
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3728      	adds	r7, #40	@ 0x28
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	2000028c 	.word	0x2000028c
 80076cc:	20000310 	.word	0x20000310
 80076d0:	0001b207 	.word	0x0001b207

080076d4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80076da:	4b06      	ldr	r3, [pc, #24]	@ (80076f4 <Ble_Tl_Init+0x20>)
 80076dc:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80076de:	4b06      	ldr	r3, [pc, #24]	@ (80076f8 <Ble_Tl_Init+0x24>)
 80076e0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80076e2:	463b      	mov	r3, r7
 80076e4:	4619      	mov	r1, r3
 80076e6:	4805      	ldr	r0, [pc, #20]	@ (80076fc <Ble_Tl_Init+0x28>)
 80076e8:	f7ff f8a6 	bl	8006838 <hci_init>

  return;
 80076ec:	bf00      	nop
}
 80076ee:	3708      	adds	r7, #8
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}
 80076f4:	200300d8 	.word	0x200300d8
 80076f8:	08007a0d 	.word	0x08007a0d
 80076fc:	080079d5 	.word	0x080079d5

08007700 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8007700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007702:	b08d      	sub	sp, #52	@ 0x34
 8007704:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8007706:	2300      	movs	r3, #0
 8007708:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800770a:	2392      	movs	r3, #146	@ 0x92
 800770c:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800770e:	f7fe fdc3 	bl	8006298 <hci_reset>
 8007712:	4603      	mov	r3, r0
 8007714:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8007716:	f000 f8d7 	bl	80078c8 <BleGetBdAddress>
 800771a:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	2106      	movs	r1, #6
 8007720:	2000      	movs	r0, #0
 8007722:	f7fe fc79 	bl	8006018 <aci_hal_write_config_data>
 8007726:	4603      	mov	r3, r0
 8007728:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800772a:	4a4a      	ldr	r2, [pc, #296]	@ (8007854 <Ble_Hci_Gap_Gatt_Init+0x154>)
 800772c:	2110      	movs	r1, #16
 800772e:	2018      	movs	r0, #24
 8007730:	f7fe fc72 	bl	8006018 <aci_hal_write_config_data>
 8007734:	4603      	mov	r3, r0
 8007736:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8007738:	4a47      	ldr	r2, [pc, #284]	@ (8007858 <Ble_Hci_Gap_Gatt_Init+0x158>)
 800773a:	2110      	movs	r1, #16
 800773c:	2008      	movs	r0, #8
 800773e:	f7fe fc6b 	bl	8006018 <aci_hal_write_config_data>
 8007742:	4603      	mov	r3, r0
 8007744:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8007746:	2118      	movs	r1, #24
 8007748:	2001      	movs	r0, #1
 800774a:	f7fe fcea 	bl	8006122 <aci_hal_set_tx_power_level>
 800774e:	4603      	mov	r3, r0
 8007750:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8007752:	f7fe f960 	bl	8005a16 <aci_gatt_init>
 8007756:	4603      	mov	r3, r0
 8007758:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800775a:	2300      	movs	r3, #0
 800775c:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800775e:	7bfb      	ldrb	r3, [r7, #15]
 8007760:	f043 0301 	orr.w	r3, r3, #1
 8007764:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d01f      	beq.n	80077ac <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800776c:	4b3b      	ldr	r3, [pc, #236]	@ (800785c <Ble_Hci_Gap_Gatt_Init+0x15c>)
 800776e:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8007770:	1dba      	adds	r2, r7, #6
 8007772:	7bf8      	ldrb	r0, [r7, #15]
 8007774:	1cbb      	adds	r3, r7, #2
 8007776:	9301      	str	r3, [sp, #4]
 8007778:	1d3b      	adds	r3, r7, #4
 800777a:	9300      	str	r3, [sp, #0]
 800777c:	4613      	mov	r3, r2
 800777e:	2207      	movs	r2, #7
 8007780:	2100      	movs	r1, #0
 8007782:	f7fd ff9e 	bl	80056c2 <aci_gap_init>
 8007786:	4603      	mov	r3, r0
 8007788:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800778a:	88fc      	ldrh	r4, [r7, #6]
 800778c:	88bd      	ldrh	r5, [r7, #4]
 800778e:	68b8      	ldr	r0, [r7, #8]
 8007790:	f7f8 fcf4 	bl	800017c <strlen>
 8007794:	4603      	mov	r3, r0
 8007796:	b2da      	uxtb	r2, r3
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	4613      	mov	r3, r2
 800779e:	2200      	movs	r2, #0
 80077a0:	4629      	mov	r1, r5
 80077a2:	4620      	mov	r0, r4
 80077a4:	f7fe fb3a 	bl	8005e1c <aci_gatt_update_char_value>
 80077a8:	4603      	mov	r3, r0
 80077aa:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80077ac:	88f8      	ldrh	r0, [r7, #6]
 80077ae:	8879      	ldrh	r1, [r7, #2]
 80077b0:	463b      	mov	r3, r7
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	2302      	movs	r3, #2
 80077b6:	2200      	movs	r2, #0
 80077b8:	f7fe fb30 	bl	8005e1c <aci_gatt_update_char_value>
 80077bc:	4603      	mov	r3, r0
 80077be:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80077c0:	2202      	movs	r2, #2
 80077c2:	2102      	movs	r1, #2
 80077c4:	2000      	movs	r0, #0
 80077c6:	f7fe fd8b 	bl	80062e0 <hci_le_set_default_phy>
 80077ca:	4603      	mov	r3, r0
 80077cc:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80077ce:	4b24      	ldr	r3, [pc, #144]	@ (8007860 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80077d0:	2201      	movs	r2, #1
 80077d2:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80077d4:	4b22      	ldr	r3, [pc, #136]	@ (8007860 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	4618      	mov	r0, r3
 80077da:	f7fd fdf3 	bl	80053c4 <aci_gap_set_io_capability>
 80077de:	4603      	mov	r3, r0
 80077e0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80077e2:	4b1f      	ldr	r3, [pc, #124]	@ (8007860 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80077e4:	2201      	movs	r2, #1
 80077e6:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80077e8:	4b1d      	ldr	r3, [pc, #116]	@ (8007860 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80077ea:	2208      	movs	r2, #8
 80077ec:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80077ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007860 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80077f0:	2210      	movs	r2, #16
 80077f2:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80077f4:	4b1a      	ldr	r3, [pc, #104]	@ (8007860 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80077f6:	2200      	movs	r2, #0
 80077f8:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80077fa:	4b19      	ldr	r3, [pc, #100]	@ (8007860 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80077fc:	4a19      	ldr	r2, [pc, #100]	@ (8007864 <Ble_Hci_Gap_Gatt_Init+0x164>)
 80077fe:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8007800:	4b17      	ldr	r3, [pc, #92]	@ (8007860 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007802:	2200      	movs	r2, #0
 8007804:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8007806:	4b16      	ldr	r3, [pc, #88]	@ (8007860 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007808:	789c      	ldrb	r4, [r3, #2]
 800780a:	4b15      	ldr	r3, [pc, #84]	@ (8007860 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800780c:	785d      	ldrb	r5, [r3, #1]
 800780e:	4b14      	ldr	r3, [pc, #80]	@ (8007860 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007810:	791b      	ldrb	r3, [r3, #4]
 8007812:	4a13      	ldr	r2, [pc, #76]	@ (8007860 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007814:	7952      	ldrb	r2, [r2, #5]
 8007816:	4912      	ldr	r1, [pc, #72]	@ (8007860 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8007818:	78c9      	ldrb	r1, [r1, #3]
 800781a:	4811      	ldr	r0, [pc, #68]	@ (8007860 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800781c:	6880      	ldr	r0, [r0, #8]
 800781e:	2600      	movs	r6, #0
 8007820:	9604      	str	r6, [sp, #16]
 8007822:	9003      	str	r0, [sp, #12]
 8007824:	9102      	str	r1, [sp, #8]
 8007826:	9201      	str	r2, [sp, #4]
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	2300      	movs	r3, #0
 800782c:	2201      	movs	r2, #1
 800782e:	4629      	mov	r1, r5
 8007830:	4620      	mov	r0, r4
 8007832:	f7fd fe1b 	bl	800546c <aci_gap_set_authentication_requirement>
 8007836:	4603      	mov	r3, r0
 8007838:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800783a:	4b09      	ldr	r3, [pc, #36]	@ (8007860 <Ble_Hci_Gap_Gatt_Init+0x160>)
 800783c:	789b      	ldrb	r3, [r3, #2]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d003      	beq.n	800784a <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 8007842:	f7fe f85d 	bl	8005900 <aci_gap_configure_filter_accept_list>
 8007846:	4603      	mov	r3, r0
 8007848:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 800784a:	bf00      	nop
 800784c:	371c      	adds	r7, #28
 800784e:	46bd      	mov	sp, r7
 8007850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007852:	bf00      	nop
 8007854:	08008cd8 	.word	0x08008cd8
 8007858:	08008ce8 	.word	0x08008ce8
 800785c:	08008b18 	.word	0x08008b18
 8007860:	2000028c 	.word	0x2000028c
 8007864:	0001b207 	.word	0x0001b207

08007868 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b08c      	sub	sp, #48	@ 0x30
 800786c:	af08      	add	r7, sp, #32
 800786e:	4603      	mov	r3, r0
 8007870:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007872:	2392      	movs	r3, #146	@ 0x92
 8007874:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8007876:	4a12      	ldr	r2, [pc, #72]	@ (80078c0 <Adv_Request+0x58>)
 8007878:	79fb      	ldrb	r3, [r7, #7]
 800787a:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800787e:	2300      	movs	r3, #0
 8007880:	9306      	str	r3, [sp, #24]
 8007882:	2300      	movs	r3, #0
 8007884:	9305      	str	r3, [sp, #20]
 8007886:	2300      	movs	r3, #0
 8007888:	9304      	str	r3, [sp, #16]
 800788a:	2300      	movs	r3, #0
 800788c:	9303      	str	r3, [sp, #12]
 800788e:	2300      	movs	r3, #0
 8007890:	9302      	str	r3, [sp, #8]
 8007892:	2300      	movs	r3, #0
 8007894:	9301      	str	r3, [sp, #4]
 8007896:	2300      	movs	r3, #0
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	2300      	movs	r3, #0
 800789c:	22a0      	movs	r2, #160	@ 0xa0
 800789e:	2180      	movs	r1, #128	@ 0x80
 80078a0:	2000      	movs	r0, #0
 80078a2:	f7fd fc95 	bl	80051d0 <aci_gap_set_discoverable>
 80078a6:	4603      	mov	r3, r0
 80078a8:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80078aa:	4906      	ldr	r1, [pc, #24]	@ (80078c4 <Adv_Request+0x5c>)
 80078ac:	2018      	movs	r0, #24
 80078ae:	f7fd ffb5 	bl	800581c <aci_gap_update_adv_data>
 80078b2:	4603      	mov	r3, r0
 80078b4:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80078b6:	bf00      	nop
}
 80078b8:	3710      	adds	r7, #16
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	2000028c 	.word	0x2000028c
 80078c4:	20000014 	.word	0x20000014

080078c8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b086      	sub	sp, #24
 80078cc:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80078ce:	f7ff fdb5 	bl	800743c <LL_FLASH_GetUDN>
 80078d2:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078da:	d023      	beq.n	8007924 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80078dc:	f7ff fdc6 	bl	800746c <LL_FLASH_GetSTCompanyID>
 80078e0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80078e2:	f7ff fdb7 	bl	8007454 <LL_FLASH_GetDeviceID>
 80078e6:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	4b16      	ldr	r3, [pc, #88]	@ (8007948 <BleGetBdAddress+0x80>)
 80078ee:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	0a1b      	lsrs	r3, r3, #8
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	4b14      	ldr	r3, [pc, #80]	@ (8007948 <BleGetBdAddress+0x80>)
 80078f8:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	4b12      	ldr	r3, [pc, #72]	@ (8007948 <BleGetBdAddress+0x80>)
 8007900:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	b2da      	uxtb	r2, r3
 8007906:	4b10      	ldr	r3, [pc, #64]	@ (8007948 <BleGetBdAddress+0x80>)
 8007908:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	0a1b      	lsrs	r3, r3, #8
 800790e:	b2da      	uxtb	r2, r3
 8007910:	4b0d      	ldr	r3, [pc, #52]	@ (8007948 <BleGetBdAddress+0x80>)
 8007912:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	0c1b      	lsrs	r3, r3, #16
 8007918:	b2da      	uxtb	r2, r3
 800791a:	4b0b      	ldr	r3, [pc, #44]	@ (8007948 <BleGetBdAddress+0x80>)
 800791c:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800791e:	4b0a      	ldr	r3, [pc, #40]	@ (8007948 <BleGetBdAddress+0x80>)
 8007920:	617b      	str	r3, [r7, #20]
 8007922:	e00b      	b.n	800793c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8007924:	2000      	movs	r0, #0
 8007926:	f7ff fca3 	bl	8007270 <OTP_Read>
 800792a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d002      	beq.n	8007938 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	617b      	str	r3, [r7, #20]
 8007936:	e001      	b.n	800793c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8007938:	4b04      	ldr	r3, [pc, #16]	@ (800794c <BleGetBdAddress+0x84>)
 800793a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800793c:	697b      	ldr	r3, [r7, #20]
}
 800793e:	4618      	mov	r0, r3
 8007940:	3718      	adds	r7, #24
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	20000284 	.word	0x20000284
 800794c:	08008cd0 	.word	0x08008cd0

08007950 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8007956:	4b0a      	ldr	r3, [pc, #40]	@ (8007980 <Adv_Cancel+0x30>)
 8007958:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800795c:	2b05      	cmp	r3, #5
 800795e:	d00a      	beq.n	8007976 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007960:	2392      	movs	r3, #146	@ 0x92
 8007962:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8007964:	f7fd fc10 	bl	8005188 <aci_gap_set_non_discoverable>
 8007968:	4603      	mov	r3, r0
 800796a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800796c:	4b04      	ldr	r3, [pc, #16]	@ (8007980 <Adv_Cancel+0x30>)
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8007974:	bf00      	nop
 8007976:	bf00      	nop
}
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	2000028c 	.word	0x2000028c

08007984 <APP_BLE_Key_Button1_Action>:
}
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

/* USER CODE BEGIN FD_SPECIFIC_FUNCTIONS */
void APP_BLE_Key_Button1_Action(void)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 8007988:	f000 f8f8 	bl	8007b7c <P2PS_APP_SW1_Button_Action>
}
 800798c:	bf00      	nop
 800798e:	bd80      	pop	{r7, pc}

08007990 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8007998:	2100      	movs	r1, #0
 800799a:	2002      	movs	r0, #2
 800799c:	f000 ff18 	bl	80087d0 <UTIL_SEQ_SetTask>

  return;
 80079a0:	bf00      	nop
}
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80079b0:	2001      	movs	r0, #1
 80079b2:	f000 ff79 	bl	80088a8 <UTIL_SEQ_SetEvt>

  return;
 80079b6:	bf00      	nop
}
 80079b8:	3708      	adds	r7, #8
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b082      	sub	sp, #8
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80079c6:	2001      	movs	r0, #1
 80079c8:	f000 ff8e 	bl	80088e8 <UTIL_SEQ_WaitEvt>

  return;
 80079cc:	bf00      	nop
}
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	3308      	adds	r3, #8
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fe fde0 	bl	80065ac <SVCCTL_UserEvtRx>
 80079ec:	4603      	mov	r3, r0
 80079ee:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80079f0:	7afb      	ldrb	r3, [r7, #11]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2201      	movs	r2, #1
 80079fa:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80079fc:	e003      	b.n	8007a06 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2200      	movs	r2, #0
 8007a02:	701a      	strb	r2, [r3, #0]
  return;
 8007a04:	bf00      	nop
}
 8007a06:	3710      	adds	r7, #16
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	4603      	mov	r3, r0
 8007a14:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8007a16:	79fb      	ldrb	r3, [r7, #7]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d002      	beq.n	8007a22 <BLE_StatusNot+0x16>
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d006      	beq.n	8007a2e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8007a20:	e00b      	b.n	8007a3a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007a22:	2307      	movs	r3, #7
 8007a24:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f000 fefe 	bl	8008828 <UTIL_SEQ_PauseTask>
      break;
 8007a2c:	e005      	b.n	8007a3a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8007a2e:	2307      	movs	r3, #7
 8007a30:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f000 ff18 	bl	8008868 <UTIL_SEQ_ResumeTask>
      break;
 8007a38:	bf00      	nop
  }

  return;
 8007a3a:	bf00      	nop
}
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
	...

08007a44 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	2b08      	cmp	r3, #8
 8007a52:	d830      	bhi.n	8007ab6 <Custom_STM_App_Notification+0x72>
 8007a54:	a201      	add	r2, pc, #4	@ (adr r2, 8007a5c <Custom_STM_App_Notification+0x18>)
 8007a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5a:	bf00      	nop
 8007a5c:	08007ab7 	.word	0x08007ab7
 8007a60:	08007a81 	.word	0x08007a81
 8007a64:	08007aaf 	.word	0x08007aaf
 8007a68:	08007ab7 	.word	0x08007ab7
 8007a6c:	08007ab7 	.word	0x08007ab7
 8007a70:	08007ab7 	.word	0x08007ab7
 8007a74:	08007ab7 	.word	0x08007ab7
 8007a78:	08007ab7 	.word	0x08007ab7
 8007a7c:	08007ab7 	.word	0x08007ab7

    case CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT */
        //APP_DBG_MSG("\r\n\r** CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT \n");
        //APP_DBG_MSG("\r\n\r** Write Data: 0x%02X %02X \n", pNotification->DataTransfered.pPayload[0], pNotification->DataTransfered.pPayload[1]);
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	3301      	adds	r3, #1
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	d104      	bne.n	8007a96 <Custom_STM_App_Notification+0x52>
        {
          //BSP_LED_On(Blue_Led_Pin);
        	HAL_GPIO_TogglePin(Blue_Led_GPIO_Port, Blue_Led_Pin);
 8007a8c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007a90:	480c      	ldr	r0, [pc, #48]	@ (8007ac4 <Custom_STM_App_Notification+0x80>)
 8007a92:	f7fb fb59 	bl	8003148 <HAL_GPIO_TogglePin>
        }
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10b      	bne.n	8007aba <Custom_STM_App_Notification+0x76>
        {
          //BSP_LED_Off(Blue_Led_Pin);
        	HAL_GPIO_TogglePin(Blue_Led_GPIO_Port, Blue_Led_Pin);
 8007aa2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007aa6:	4807      	ldr	r0, [pc, #28]	@ (8007ac4 <Custom_STM_App_Notification+0x80>)
 8007aa8:	f7fb fb4e 	bl	8003148 <HAL_GPIO_TogglePin>
        }
      /* USER CODE END CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT */
      break;
 8007aac:	e005      	b.n	8007aba <Custom_STM_App_Notification+0x76>

    case CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT */
        //APP_DBG_MSG("\r\n\r** CUSTOM_STM_BUTTON_C_NOTIFY_ENABLED_EVT \n");

        Custom_App_Context.Switch_c_Notification_Status = 1;        /* My_Switch_Char notification status has been enabled */
 8007aae:	4b06      	ldr	r3, [pc, #24]	@ (8007ac8 <Custom_STM_App_Notification+0x84>)
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT */
      break;
 8007ab4:	e002      	b.n	8007abc <Custom_STM_App_Notification+0x78>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8007ab6:	bf00      	nop
 8007ab8:	e000      	b.n	8007abc <Custom_STM_App_Notification+0x78>
      break;
 8007aba:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8007abc:	bf00      	nop
}
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	48000c00 	.word	0x48000c00
 8007ac8:	20000314 	.word	0x20000314

08007acc <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d002      	beq.n	8007ae2 <Custom_APP_Notification+0x16>
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d002      	beq.n	8007ae6 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8007ae0:	e002      	b.n	8007ae8 <Custom_APP_Notification+0x1c>
      break;
 8007ae2:	bf00      	nop
 8007ae4:	e000      	b.n	8007ae8 <Custom_APP_Notification+0x1c>
      break;
 8007ae6:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8007ae8:	bf00      	nop
}
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	UTIL_SEQ_RegTask(1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, Custom_Switch_c_Send_Notification);
 8007af8:	4a06      	ldr	r2, [pc, #24]	@ (8007b14 <Custom_APP_Init+0x20>)
 8007afa:	2100      	movs	r1, #0
 8007afc:	2004      	movs	r0, #4
 8007afe:	f000 fe45 	bl	800878c <UTIL_SEQ_RegTask>

	Custom_App_Context.Switch_c_Notification_Status = 0;
 8007b02:	4b05      	ldr	r3, [pc, #20]	@ (8007b18 <Custom_APP_Init+0x24>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	701a      	strb	r2, [r3, #0]
	Custom_App_Context.SW1_Status = 0;
 8007b08:	4b03      	ldr	r3, [pc, #12]	@ (8007b18 <Custom_APP_Init+0x24>)
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	709a      	strb	r2, [r3, #2]
  /* USER CODE END CUSTOM_APP_Init */
  return;
 8007b0e:	bf00      	nop
}
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	08007b1d 	.word	0x08007b1d
 8007b18:	20000314 	.word	0x20000314

08007b1c <Custom_Switch_c_Send_Notification>:
  /* USER CODE END Switch_c_UC_Last*/
  return;
}

void Custom_Switch_c_Send_Notification(void) /* Property Notification */
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8007b22:	2300      	movs	r3, #0
 8007b24:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Switch_c_NS_1*/
  if (Custom_App_Context.SW1_Status == 0)
 8007b26:	4b13      	ldr	r3, [pc, #76]	@ (8007b74 <Custom_Switch_c_Send_Notification+0x58>)
 8007b28:	789b      	ldrb	r3, [r3, #2]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d109      	bne.n	8007b42 <Custom_Switch_c_Send_Notification+0x26>
  {
    Custom_App_Context.SW1_Status = 1;
 8007b2e:	4b11      	ldr	r3, [pc, #68]	@ (8007b74 <Custom_Switch_c_Send_Notification+0x58>)
 8007b30:	2201      	movs	r2, #1
 8007b32:	709a      	strb	r2, [r3, #2]
    NotifyCharData[0] = 0x00;
 8007b34:	4b10      	ldr	r3, [pc, #64]	@ (8007b78 <Custom_Switch_c_Send_Notification+0x5c>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	701a      	strb	r2, [r3, #0]
    NotifyCharData[1] = 0x10;
 8007b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8007b78 <Custom_Switch_c_Send_Notification+0x5c>)
 8007b3c:	2210      	movs	r2, #16
 8007b3e:	705a      	strb	r2, [r3, #1]
 8007b40:	e008      	b.n	8007b54 <Custom_Switch_c_Send_Notification+0x38>
  }
  else
  {
    Custom_App_Context.SW1_Status = 0;
 8007b42:	4b0c      	ldr	r3, [pc, #48]	@ (8007b74 <Custom_Switch_c_Send_Notification+0x58>)
 8007b44:	2200      	movs	r2, #0
 8007b46:	709a      	strb	r2, [r3, #2]
    NotifyCharData[0] = 0x00;
 8007b48:	4b0b      	ldr	r3, [pc, #44]	@ (8007b78 <Custom_Switch_c_Send_Notification+0x5c>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	701a      	strb	r2, [r3, #0]
    NotifyCharData[1] = 0x00;
 8007b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8007b78 <Custom_Switch_c_Send_Notification+0x5c>)
 8007b50:	2200      	movs	r2, #0
 8007b52:	705a      	strb	r2, [r3, #1]
  }

 // APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n");
 // APP_DBG_MSG(" \n\r");
  Custom_STM_App_Update_Char(CUSTOM_STM_SWITCH_C, (uint8_t *)NotifyCharData);
 8007b54:	4908      	ldr	r1, [pc, #32]	@ (8007b78 <Custom_Switch_c_Send_Notification+0x5c>)
 8007b56:	2001      	movs	r0, #1
 8007b58:	f000 fa18 	bl	8007f8c <Custom_STM_App_Update_Char>
  /* USER CODE END Switch_c_NS_1*/

  if (updateflag != 0)
 8007b5c:	79fb      	ldrb	r3, [r7, #7]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d004      	beq.n	8007b6c <Custom_Switch_c_Send_Notification+0x50>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_SWITCH_C, (uint8_t *)NotifyCharData);
 8007b62:	4905      	ldr	r1, [pc, #20]	@ (8007b78 <Custom_Switch_c_Send_Notification+0x5c>)
 8007b64:	2001      	movs	r0, #1
 8007b66:	f000 fa11 	bl	8007f8c <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Switch_c_NS_Last*/

  /* USER CODE END Switch_c_NS_Last*/

  return;
 8007b6a:	bf00      	nop
 8007b6c:	bf00      	nop
}
 8007b6e:	3708      	adds	r7, #8
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	20000314 	.word	0x20000314
 8007b78:	2000031c 	.word	0x2000031c

08007b7c <P2PS_APP_SW1_Button_Action>:
  return;
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_APP_SW1_Button_Action(void)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask(1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8007b80:	2100      	movs	r1, #0
 8007b82:	2004      	movs	r0, #4
 8007b84:	f000 fe24 	bl	80087d0 <UTIL_SEQ_SetTask>

  return;
 8007b88:	bf00      	nop
}
 8007b8a:	bd80      	pop	{r7, pc}

08007b8c <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b08e      	sub	sp, #56	@ 0x38
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8007b94:	2300      	movs	r3, #0
 8007b96:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (event_pckt->evt)
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2bff      	cmp	r3, #255	@ 0xff
 8007ba6:	f040 80d0 	bne.w	8007d4a <Custom_STM_Event_Handler+0x1be>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8007baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bac:	3302      	adds	r3, #2
 8007bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      switch (blecore_evt->ecode)
 8007bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bb2:	881b      	ldrh	r3, [r3, #0]
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 8007bba:	2b1a      	cmp	r3, #26
 8007bbc:	f200 80bf 	bhi.w	8007d3e <Custom_STM_Event_Handler+0x1b2>
 8007bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc8 <Custom_STM_Event_Handler+0x3c>)
 8007bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc6:	bf00      	nop
 8007bc8:	08007c35 	.word	0x08007c35
 8007bcc:	08007d3f 	.word	0x08007d3f
 8007bd0:	08007d3f 	.word	0x08007d3f
 8007bd4:	08007d3f 	.word	0x08007d3f
 8007bd8:	08007d3f 	.word	0x08007d3f
 8007bdc:	08007d3f 	.word	0x08007d3f
 8007be0:	08007d3f 	.word	0x08007d3f
 8007be4:	08007d3f 	.word	0x08007d3f
 8007be8:	08007d3f 	.word	0x08007d3f
 8007bec:	08007d3f 	.word	0x08007d3f
 8007bf0:	08007d3f 	.word	0x08007d3f
 8007bf4:	08007d3f 	.word	0x08007d3f
 8007bf8:	08007d3f 	.word	0x08007d3f
 8007bfc:	08007d3f 	.word	0x08007d3f
 8007c00:	08007d3f 	.word	0x08007d3f
 8007c04:	08007d3f 	.word	0x08007d3f
 8007c08:	08007d3f 	.word	0x08007d3f
 8007c0c:	08007d3f 	.word	0x08007d3f
 8007c10:	08007d01 	.word	0x08007d01
 8007c14:	08007d3f 	.word	0x08007d3f
 8007c18:	08007d3f 	.word	0x08007d3f
 8007c1c:	08007d3f 	.word	0x08007d3f
 8007c20:	08007d3f 	.word	0x08007d3f
 8007c24:	08007d3f 	.word	0x08007d3f
 8007c28:	08007d3f 	.word	0x08007d3f
 8007c2c:	08007d3f 	.word	0x08007d3f
 8007c30:	08007d21 	.word	0x08007d21
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8007c34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c36:	3302      	adds	r3, #2
 8007c38:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8007c3a:	6a3b      	ldr	r3, [r7, #32]
 8007c3c:	885b      	ldrh	r3, [r3, #2]
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	461a      	mov	r2, r3
 8007c42:	4b45      	ldr	r3, [pc, #276]	@ (8007d58 <Custom_STM_Event_Handler+0x1cc>)
 8007c44:	889b      	ldrh	r3, [r3, #4]
 8007c46:	3302      	adds	r3, #2
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d119      	bne.n	8007c80 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 8007c52:	6a3b      	ldr	r3, [r7, #32]
 8007c54:	7a1b      	ldrb	r3, [r3, #8]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <Custom_STM_Event_Handler+0xd4>
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d008      	beq.n	8007c70 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 8007c5e:	e04e      	b.n	8007cfe <Custom_STM_Event_Handler+0x172>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_DISABLED_EVT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8007c64:	f107 030c 	add.w	r3, r7, #12
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7ff feeb 	bl	8007a44 <Custom_STM_App_Notification>
                break;
 8007c6e:	e046      	b.n	8007cfe <Custom_STM_Event_Handler+0x172>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_SWITCH_C_NOTIFY_ENABLED_EVT;
 8007c70:	2302      	movs	r3, #2
 8007c72:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8007c74:	f107 030c 	add.w	r3, r7, #12
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7ff fee3 	bl	8007a44 <Custom_STM_App_Notification>
                break;
 8007c7e:	e03e      	b.n	8007cfe <Custom_STM_Event_Handler+0x172>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomSwitch_CHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomHrs_MHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	885b      	ldrh	r3, [r3, #2]
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	461a      	mov	r2, r3
 8007c88:	4b33      	ldr	r3, [pc, #204]	@ (8007d58 <Custom_STM_Event_Handler+0x1cc>)
 8007c8a:	891b      	ldrh	r3, [r3, #8]
 8007c8c:	3302      	adds	r3, #2
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d119      	bne.n	8007cc6 <Custom_STM_Event_Handler+0x13a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8007c92:	2301      	movs	r3, #1
 8007c94:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_2_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_2_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	7a1b      	ldrb	r3, [r3, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d002      	beq.n	8007ca6 <Custom_STM_Event_Handler+0x11a>
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d008      	beq.n	8007cb6 <Custom_STM_Event_Handler+0x12a>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_2_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_2_Char_1_default */
              break;
 8007ca4:	e02b      	b.n	8007cfe <Custom_STM_Event_Handler+0x172>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_HRS_M_NOTIFY_DISABLED_EVT;
 8007ca6:	2305      	movs	r3, #5
 8007ca8:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8007caa:	f107 030c 	add.w	r3, r7, #12
 8007cae:	4618      	mov	r0, r3
 8007cb0:	f7ff fec8 	bl	8007a44 <Custom_STM_App_Notification>
                break;
 8007cb4:	e023      	b.n	8007cfe <Custom_STM_Event_Handler+0x172>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_HRS_M_NOTIFY_ENABLED_EVT;
 8007cb6:	2304      	movs	r3, #4
 8007cb8:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8007cba:	f107 030c 	add.w	r3, r7, #12
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff fec0 	bl	8007a44 <Custom_STM_App_Notification>
                break;
 8007cc4:	e01b      	b.n	8007cfe <Custom_STM_Event_Handler+0x172>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomHrs_MHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8007cc6:	6a3b      	ldr	r3, [r7, #32]
 8007cc8:	885b      	ldrh	r3, [r3, #2]
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	461a      	mov	r2, r3
 8007cce:	4b22      	ldr	r3, [pc, #136]	@ (8007d58 <Custom_STM_Event_Handler+0x1cc>)
 8007cd0:	885b      	ldrh	r3, [r3, #2]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d134      	bne.n	8007d42 <Custom_STM_Event_Handler+0x1b6>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            Notification.Custom_Evt_Opcode = CUSTOM_STM_LED_C_WRITE_NO_RESP_EVT;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	733b      	strb	r3, [r7, #12]
            Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	88db      	ldrh	r3, [r3, #6]
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	753b      	strb	r3, [r7, #20]
            Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8007cec:	6a3b      	ldr	r3, [r7, #32]
 8007cee:	3308      	adds	r3, #8
 8007cf0:	613b      	str	r3, [r7, #16]
            Custom_STM_App_Notification(&Notification);
 8007cf2:	f107 030c 	add.w	r3, r7, #12
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7ff fea4 	bl	8007a44 <Custom_STM_App_Notification>
            /* USER CODE END CUSTOM_STM_Service_1_Char_1_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomLed_CHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8007cfc:	e021      	b.n	8007d42 <Custom_STM_Event_Handler+0x1b6>
 8007cfe:	e020      	b.n	8007d42 <Custom_STM_Event_Handler+0x1b6>

        case ACI_GATT_WRITE_PERMIT_REQ_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_BEGIN */
          write_perm_req = (aci_gatt_write_permit_req_event_rp0*)blecore_evt->data;
 8007d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d02:	3302      	adds	r3, #2
 8007d04:	627b      	str	r3, [r7, #36]	@ 0x24
          if (write_perm_req->Attribute_Handle == (CustomContext.CustomHrs_CtrlHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8007d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d08:	885b      	ldrh	r3, [r3, #2]
 8007d0a:	b29b      	uxth	r3, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	4b12      	ldr	r3, [pc, #72]	@ (8007d58 <Custom_STM_Event_Handler+0x1cc>)
 8007d10:	899b      	ldrh	r3, [r3, #12]
 8007d12:	3301      	adds	r3, #1
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d116      	bne.n	8007d46 <Custom_STM_Event_Handler+0x1ba>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          } /*if (write_perm_req->Attribute_Handle == (CustomContext.CustomHrs_CtrlHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/

          /* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ_END */
          break;
 8007d1e:	e012      	b.n	8007d46 <Custom_STM_Event_Handler+0x1ba>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8007d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d22:	3302      	adds	r3, #2
 8007d24:	62bb      	str	r3, [r7, #40]	@ 0x28
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8007d26:	2308      	movs	r3, #8
 8007d28:	733b      	strb	r3, [r7, #12]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8007d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2c:	881b      	ldrh	r3, [r3, #0]
 8007d2e:	b29b      	uxth	r3, r3
 8007d30:	83bb      	strh	r3, [r7, #28]
          Custom_STM_App_Notification(&Notification);
 8007d32:	f107 030c 	add.w	r3, r7, #12
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7ff fe84 	bl	8007a44 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8007d3c:	e004      	b.n	8007d48 <Custom_STM_Event_Handler+0x1bc>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8007d3e:	bf00      	nop
 8007d40:	e004      	b.n	8007d4c <Custom_STM_Event_Handler+0x1c0>
          break;
 8007d42:	bf00      	nop
 8007d44:	e002      	b.n	8007d4c <Custom_STM_Event_Handler+0x1c0>
          break;
 8007d46:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8007d48:	e000      	b.n	8007d4c <Custom_STM_Event_Handler+0x1c0>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8007d4a:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8007d4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}/* end Custom_STM_Event_Handler */
 8007d50:	4618      	mov	r0, r3
 8007d52:	3738      	adds	r7, #56	@ 0x38
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	2000051c 	.word	0x2000051c

08007d5c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b08c      	sub	sp, #48	@ 0x30
 8007d60:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007d62:	2392      	movs	r3, #146	@ 0x92
 8007d64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8007d66:	487c      	ldr	r0, [pc, #496]	@ (8007f58 <SVCCTL_InitCustomSvc+0x1fc>)
 8007d68:	f7fe fc06 	bl	8006578 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 8007d6c:	2306      	movs	r3, #6
 8007d6e:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MY_P2P_SERVER_UUID(uuid.Char_UUID_128);
 8007d70:	238f      	movs	r3, #143	@ 0x8f
 8007d72:	713b      	strb	r3, [r7, #4]
 8007d74:	23e5      	movs	r3, #229	@ 0xe5
 8007d76:	717b      	strb	r3, [r7, #5]
 8007d78:	23b3      	movs	r3, #179	@ 0xb3
 8007d7a:	71bb      	strb	r3, [r7, #6]
 8007d7c:	23d5      	movs	r3, #213	@ 0xd5
 8007d7e:	71fb      	strb	r3, [r7, #7]
 8007d80:	232e      	movs	r3, #46	@ 0x2e
 8007d82:	723b      	strb	r3, [r7, #8]
 8007d84:	237f      	movs	r3, #127	@ 0x7f
 8007d86:	727b      	strb	r3, [r7, #9]
 8007d88:	234a      	movs	r3, #74	@ 0x4a
 8007d8a:	72bb      	strb	r3, [r7, #10]
 8007d8c:	2398      	movs	r3, #152	@ 0x98
 8007d8e:	72fb      	strb	r3, [r7, #11]
 8007d90:	232a      	movs	r3, #42	@ 0x2a
 8007d92:	733b      	strb	r3, [r7, #12]
 8007d94:	2348      	movs	r3, #72	@ 0x48
 8007d96:	737b      	strb	r3, [r7, #13]
 8007d98:	237a      	movs	r3, #122	@ 0x7a
 8007d9a:	73bb      	strb	r3, [r7, #14]
 8007d9c:	23cc      	movs	r3, #204	@ 0xcc
 8007d9e:	73fb      	strb	r3, [r7, #15]
 8007da0:	2340      	movs	r3, #64	@ 0x40
 8007da2:	743b      	strb	r3, [r7, #16]
 8007da4:	23fe      	movs	r3, #254	@ 0xfe
 8007da6:	747b      	strb	r3, [r7, #17]
 8007da8:	2300      	movs	r3, #0
 8007daa:	74bb      	strb	r3, [r7, #18]
 8007dac:	2300      	movs	r3, #0
 8007dae:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8007db0:	7dbb      	ldrb	r3, [r7, #22]
 8007db2:	1d39      	adds	r1, r7, #4
 8007db4:	4a69      	ldr	r2, [pc, #420]	@ (8007f5c <SVCCTL_InitCustomSvc+0x200>)
 8007db6:	9200      	str	r2, [sp, #0]
 8007db8:	2201      	movs	r2, #1
 8007dba:	2002      	movs	r0, #2
 8007dbc:	f7fd fe50 	bl	8005a60 <aci_gatt_add_service>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  My_LED_Char
   */
  COPY_MY_LED_CHAR_UUID(uuid.Char_UUID_128);
 8007dc4:	2319      	movs	r3, #25
 8007dc6:	713b      	strb	r3, [r7, #4]
 8007dc8:	23ed      	movs	r3, #237	@ 0xed
 8007dca:	717b      	strb	r3, [r7, #5]
 8007dcc:	2382      	movs	r3, #130	@ 0x82
 8007dce:	71bb      	strb	r3, [r7, #6]
 8007dd0:	23ae      	movs	r3, #174	@ 0xae
 8007dd2:	71fb      	strb	r3, [r7, #7]
 8007dd4:	23ed      	movs	r3, #237	@ 0xed
 8007dd6:	723b      	strb	r3, [r7, #8]
 8007dd8:	2321      	movs	r3, #33	@ 0x21
 8007dda:	727b      	strb	r3, [r7, #9]
 8007ddc:	234c      	movs	r3, #76	@ 0x4c
 8007dde:	72bb      	strb	r3, [r7, #10]
 8007de0:	239d      	movs	r3, #157	@ 0x9d
 8007de2:	72fb      	strb	r3, [r7, #11]
 8007de4:	2341      	movs	r3, #65	@ 0x41
 8007de6:	733b      	strb	r3, [r7, #12]
 8007de8:	2345      	movs	r3, #69	@ 0x45
 8007dea:	737b      	strb	r3, [r7, #13]
 8007dec:	2322      	movs	r3, #34	@ 0x22
 8007dee:	73bb      	strb	r3, [r7, #14]
 8007df0:	238e      	movs	r3, #142	@ 0x8e
 8007df2:	73fb      	strb	r3, [r7, #15]
 8007df4:	2341      	movs	r3, #65	@ 0x41
 8007df6:	743b      	strb	r3, [r7, #16]
 8007df8:	23fe      	movs	r3, #254	@ 0xfe
 8007dfa:	747b      	strb	r3, [r7, #17]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	74bb      	strb	r3, [r7, #18]
 8007e00:	2300      	movs	r3, #0
 8007e02:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 8007e04:	4b55      	ldr	r3, [pc, #340]	@ (8007f5c <SVCCTL_InitCustomSvc+0x200>)
 8007e06:	8818      	ldrh	r0, [r3, #0]
 8007e08:	4b55      	ldr	r3, [pc, #340]	@ (8007f60 <SVCCTL_InitCustomSvc+0x204>)
 8007e0a:	881b      	ldrh	r3, [r3, #0]
 8007e0c:	1d3a      	adds	r2, r7, #4
 8007e0e:	4955      	ldr	r1, [pc, #340]	@ (8007f64 <SVCCTL_InitCustomSvc+0x208>)
 8007e10:	9105      	str	r1, [sp, #20]
 8007e12:	2101      	movs	r1, #1
 8007e14:	9104      	str	r1, [sp, #16]
 8007e16:	2110      	movs	r1, #16
 8007e18:	9103      	str	r1, [sp, #12]
 8007e1a:	2101      	movs	r1, #1
 8007e1c:	9102      	str	r1, [sp, #8]
 8007e1e:	2100      	movs	r1, #0
 8007e20:	9101      	str	r1, [sp, #4]
 8007e22:	2106      	movs	r1, #6
 8007e24:	9100      	str	r1, [sp, #0]
 8007e26:	2102      	movs	r1, #2
 8007e28:	f7fd fef0 	bl	8005c0c <aci_gatt_add_char>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  My_Switch_Char
   */
  COPY_MY_SWITCH_CHAR_UUID(uuid.Char_UUID_128);
 8007e30:	2319      	movs	r3, #25
 8007e32:	713b      	strb	r3, [r7, #4]
 8007e34:	23ed      	movs	r3, #237	@ 0xed
 8007e36:	717b      	strb	r3, [r7, #5]
 8007e38:	2382      	movs	r3, #130	@ 0x82
 8007e3a:	71bb      	strb	r3, [r7, #6]
 8007e3c:	23ae      	movs	r3, #174	@ 0xae
 8007e3e:	71fb      	strb	r3, [r7, #7]
 8007e40:	23ed      	movs	r3, #237	@ 0xed
 8007e42:	723b      	strb	r3, [r7, #8]
 8007e44:	2321      	movs	r3, #33	@ 0x21
 8007e46:	727b      	strb	r3, [r7, #9]
 8007e48:	234c      	movs	r3, #76	@ 0x4c
 8007e4a:	72bb      	strb	r3, [r7, #10]
 8007e4c:	239d      	movs	r3, #157	@ 0x9d
 8007e4e:	72fb      	strb	r3, [r7, #11]
 8007e50:	2341      	movs	r3, #65	@ 0x41
 8007e52:	733b      	strb	r3, [r7, #12]
 8007e54:	2345      	movs	r3, #69	@ 0x45
 8007e56:	737b      	strb	r3, [r7, #13]
 8007e58:	2322      	movs	r3, #34	@ 0x22
 8007e5a:	73bb      	strb	r3, [r7, #14]
 8007e5c:	238e      	movs	r3, #142	@ 0x8e
 8007e5e:	73fb      	strb	r3, [r7, #15]
 8007e60:	2342      	movs	r3, #66	@ 0x42
 8007e62:	743b      	strb	r3, [r7, #16]
 8007e64:	23fe      	movs	r3, #254	@ 0xfe
 8007e66:	747b      	strb	r3, [r7, #17]
 8007e68:	2300      	movs	r3, #0
 8007e6a:	74bb      	strb	r3, [r7, #18]
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMy_P2PsHdle,
 8007e70:	4b3a      	ldr	r3, [pc, #232]	@ (8007f5c <SVCCTL_InitCustomSvc+0x200>)
 8007e72:	8818      	ldrh	r0, [r3, #0]
 8007e74:	4b3c      	ldr	r3, [pc, #240]	@ (8007f68 <SVCCTL_InitCustomSvc+0x20c>)
 8007e76:	881b      	ldrh	r3, [r3, #0]
 8007e78:	1d3a      	adds	r2, r7, #4
 8007e7a:	493c      	ldr	r1, [pc, #240]	@ (8007f6c <SVCCTL_InitCustomSvc+0x210>)
 8007e7c:	9105      	str	r1, [sp, #20]
 8007e7e:	2101      	movs	r1, #1
 8007e80:	9104      	str	r1, [sp, #16]
 8007e82:	2110      	movs	r1, #16
 8007e84:	9103      	str	r1, [sp, #12]
 8007e86:	2101      	movs	r1, #1
 8007e88:	9102      	str	r1, [sp, #8]
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	9101      	str	r1, [sp, #4]
 8007e8e:	2110      	movs	r1, #16
 8007e90:	9100      	str	r1, [sp, #0]
 8007e92:	2102      	movs	r1, #2
 8007e94:	f7fd feba 	bl	8005c0c <aci_gatt_add_char>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	75fb      	strb	r3, [r7, #23]
   *                              = 8
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 8;
 8007e9c:	2308      	movs	r3, #8
 8007e9e:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  uuid.Char_UUID_16 = 0x180d;
 8007ea0:	f641 030d 	movw	r3, #6157	@ 0x180d
 8007ea4:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_service(UUID_TYPE_16,
 8007ea6:	7dbb      	ldrb	r3, [r7, #22]
 8007ea8:	1d39      	adds	r1, r7, #4
 8007eaa:	4a31      	ldr	r2, [pc, #196]	@ (8007f70 <SVCCTL_InitCustomSvc+0x214>)
 8007eac:	9200      	str	r2, [sp, #0]
 8007eae:	2201      	movs	r2, #1
 8007eb0:	2001      	movs	r0, #1
 8007eb2:	f7fd fdd5 	bl	8005a60 <aci_gatt_add_service>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  My_HRS_Meas
   */
  uuid.Char_UUID_16 = 0x2a37;
 8007eba:	f642 2337 	movw	r3, #10807	@ 0x2a37
 8007ebe:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomMy_HrsHdle,
 8007ec0:	4b26      	ldr	r3, [pc, #152]	@ (8007f5c <SVCCTL_InitCustomSvc+0x200>)
 8007ec2:	88d8      	ldrh	r0, [r3, #6]
 8007ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8007f74 <SVCCTL_InitCustomSvc+0x218>)
 8007ec6:	881b      	ldrh	r3, [r3, #0]
 8007ec8:	1d3a      	adds	r2, r7, #4
 8007eca:	492b      	ldr	r1, [pc, #172]	@ (8007f78 <SVCCTL_InitCustomSvc+0x21c>)
 8007ecc:	9105      	str	r1, [sp, #20]
 8007ece:	2101      	movs	r1, #1
 8007ed0:	9104      	str	r1, [sp, #16]
 8007ed2:	2110      	movs	r1, #16
 8007ed4:	9103      	str	r1, [sp, #12]
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	9102      	str	r1, [sp, #8]
 8007eda:	2100      	movs	r1, #0
 8007edc:	9101      	str	r1, [sp, #4]
 8007ede:	2110      	movs	r1, #16
 8007ee0:	9100      	str	r1, [sp, #0]
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	f7fd fe92 	bl	8005c0c <aci_gatt_add_char>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service2_Char1 */
  /**
   *  My_Sensor_Loc
   */
  uuid.Char_UUID_16 = 0x2a38;
 8007eec:	f642 2338 	movw	r3, #10808	@ 0x2a38
 8007ef0:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomMy_HrsHdle,
 8007ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8007f5c <SVCCTL_InitCustomSvc+0x200>)
 8007ef4:	88d8      	ldrh	r0, [r3, #6]
 8007ef6:	4b21      	ldr	r3, [pc, #132]	@ (8007f7c <SVCCTL_InitCustomSvc+0x220>)
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	1d3a      	adds	r2, r7, #4
 8007efc:	4920      	ldr	r1, [pc, #128]	@ (8007f80 <SVCCTL_InitCustomSvc+0x224>)
 8007efe:	9105      	str	r1, [sp, #20]
 8007f00:	2100      	movs	r1, #0
 8007f02:	9104      	str	r1, [sp, #16]
 8007f04:	2110      	movs	r1, #16
 8007f06:	9103      	str	r1, [sp, #12]
 8007f08:	2100      	movs	r1, #0
 8007f0a:	9102      	str	r1, [sp, #8]
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	9101      	str	r1, [sp, #4]
 8007f10:	2102      	movs	r1, #2
 8007f12:	9100      	str	r1, [sp, #0]
 8007f14:	2101      	movs	r1, #1
 8007f16:	f7fd fe79 	bl	8005c0c <aci_gatt_add_char>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service2_Char2 */
  /**
   *  My_HRS_CTRL_point
   */
  uuid.Char_UUID_16 = 0x2a39;
 8007f1e:	f642 2339 	movw	r3, #10809	@ 0x2a39
 8007f22:	80bb      	strh	r3, [r7, #4]
  ret = aci_gatt_add_char(CustomContext.CustomMy_HrsHdle,
 8007f24:	4b0d      	ldr	r3, [pc, #52]	@ (8007f5c <SVCCTL_InitCustomSvc+0x200>)
 8007f26:	88d8      	ldrh	r0, [r3, #6]
 8007f28:	4b16      	ldr	r3, [pc, #88]	@ (8007f84 <SVCCTL_InitCustomSvc+0x228>)
 8007f2a:	881b      	ldrh	r3, [r3, #0]
 8007f2c:	1d3a      	adds	r2, r7, #4
 8007f2e:	4916      	ldr	r1, [pc, #88]	@ (8007f88 <SVCCTL_InitCustomSvc+0x22c>)
 8007f30:	9105      	str	r1, [sp, #20]
 8007f32:	2100      	movs	r1, #0
 8007f34:	9104      	str	r1, [sp, #16]
 8007f36:	2110      	movs	r1, #16
 8007f38:	9103      	str	r1, [sp, #12]
 8007f3a:	2102      	movs	r1, #2
 8007f3c:	9102      	str	r1, [sp, #8]
 8007f3e:	2100      	movs	r1, #0
 8007f40:	9101      	str	r1, [sp, #4]
 8007f42:	2108      	movs	r1, #8
 8007f44:	9100      	str	r1, [sp, #0]
 8007f46:	2101      	movs	r1, #1
 8007f48:	f7fd fe60 	bl	8005c0c <aci_gatt_add_char>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8007f50:	bf00      	nop
}
 8007f52:	3718      	adds	r7, #24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	08007b8d 	.word	0x08007b8d
 8007f5c:	2000051c 	.word	0x2000051c
 8007f60:	2000002c 	.word	0x2000002c
 8007f64:	2000051e 	.word	0x2000051e
 8007f68:	2000002e 	.word	0x2000002e
 8007f6c:	20000520 	.word	0x20000520
 8007f70:	20000522 	.word	0x20000522
 8007f74:	20000030 	.word	0x20000030
 8007f78:	20000524 	.word	0x20000524
 8007f7c:	20000032 	.word	0x20000032
 8007f80:	20000526 	.word	0x20000526
 8007f84:	20000034 	.word	0x20000034
 8007f88:	20000528 	.word	0x20000528

08007f8c <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af02      	add	r7, sp, #8
 8007f92:	4603      	mov	r3, r0
 8007f94:	6039      	str	r1, [r7, #0]
 8007f96:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8007f98:	2392      	movs	r3, #146	@ 0x92
 8007f9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8007f9c:	79fb      	ldrb	r3, [r7, #7]
 8007f9e:	2b04      	cmp	r3, #4
 8007fa0:	d85c      	bhi.n	800805c <Custom_STM_App_Update_Char+0xd0>
 8007fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8007fa8 <Custom_STM_App_Update_Char+0x1c>)
 8007fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa8:	08007fbd 	.word	0x08007fbd
 8007fac:	08007fdd 	.word	0x08007fdd
 8007fb0:	08007ffd 	.word	0x08007ffd
 8007fb4:	0800801d 	.word	0x0800801d
 8007fb8:	0800803d 	.word	0x0800803d
  {

    case CUSTOM_STM_LED_C:
      ret = aci_gatt_update_char_value(CustomContext.CustomMy_P2PsHdle,
 8007fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8008068 <Custom_STM_App_Update_Char+0xdc>)
 8007fbe:	8818      	ldrh	r0, [r3, #0]
 8007fc0:	4b29      	ldr	r3, [pc, #164]	@ (8008068 <Custom_STM_App_Update_Char+0xdc>)
 8007fc2:	8859      	ldrh	r1, [r3, #2]
 8007fc4:	4b29      	ldr	r3, [pc, #164]	@ (800806c <Custom_STM_App_Update_Char+0xe0>)
 8007fc6:	881b      	ldrh	r3, [r3, #0]
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	9300      	str	r3, [sp, #0]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f7fd ff23 	bl	8005e1c <aci_gatt_update_char_value>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value LED_C command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 8007fda:	e040      	b.n	800805e <Custom_STM_App_Update_Char+0xd2>

    case CUSTOM_STM_SWITCH_C:
      ret = aci_gatt_update_char_value(CustomContext.CustomMy_P2PsHdle,
 8007fdc:	4b22      	ldr	r3, [pc, #136]	@ (8008068 <Custom_STM_App_Update_Char+0xdc>)
 8007fde:	8818      	ldrh	r0, [r3, #0]
 8007fe0:	4b21      	ldr	r3, [pc, #132]	@ (8008068 <Custom_STM_App_Update_Char+0xdc>)
 8007fe2:	8899      	ldrh	r1, [r3, #4]
 8007fe4:	4b22      	ldr	r3, [pc, #136]	@ (8008070 <Custom_STM_App_Update_Char+0xe4>)
 8007fe6:	881b      	ldrh	r3, [r3, #0]
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	4613      	mov	r3, r2
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	f7fd ff13 	bl	8005e1c <aci_gatt_update_char_value>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value SWITCH_C command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;
 8007ffa:	e030      	b.n	800805e <Custom_STM_App_Update_Char+0xd2>

    case CUSTOM_STM_HRS_M:
      ret = aci_gatt_update_char_value(CustomContext.CustomMy_HrsHdle,
 8007ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8008068 <Custom_STM_App_Update_Char+0xdc>)
 8007ffe:	88d8      	ldrh	r0, [r3, #6]
 8008000:	4b19      	ldr	r3, [pc, #100]	@ (8008068 <Custom_STM_App_Update_Char+0xdc>)
 8008002:	8919      	ldrh	r1, [r3, #8]
 8008004:	4b1b      	ldr	r3, [pc, #108]	@ (8008074 <Custom_STM_App_Update_Char+0xe8>)
 8008006:	881b      	ldrh	r3, [r3, #0]
 8008008:	b2da      	uxtb	r2, r3
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	4613      	mov	r3, r2
 8008010:	2200      	movs	r2, #0
 8008012:	f7fd ff03 	bl	8005e1c <aci_gatt_update_char_value>
 8008016:	4603      	mov	r3, r0
 8008018:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value HRS_M command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_1*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_1*/
      break;
 800801a:	e020      	b.n	800805e <Custom_STM_App_Update_Char+0xd2>

    case CUSTOM_STM_HRS_SL:
      ret = aci_gatt_update_char_value(CustomContext.CustomMy_HrsHdle,
 800801c:	4b12      	ldr	r3, [pc, #72]	@ (8008068 <Custom_STM_App_Update_Char+0xdc>)
 800801e:	88d8      	ldrh	r0, [r3, #6]
 8008020:	4b11      	ldr	r3, [pc, #68]	@ (8008068 <Custom_STM_App_Update_Char+0xdc>)
 8008022:	8959      	ldrh	r1, [r3, #10]
 8008024:	4b14      	ldr	r3, [pc, #80]	@ (8008078 <Custom_STM_App_Update_Char+0xec>)
 8008026:	881b      	ldrh	r3, [r3, #0]
 8008028:	b2da      	uxtb	r2, r3
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	9300      	str	r3, [sp, #0]
 800802e:	4613      	mov	r3, r2
 8008030:	2200      	movs	r2, #0
 8008032:	f7fd fef3 	bl	8005e1c <aci_gatt_update_char_value>
 8008036:	4603      	mov	r3, r0
 8008038:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value HRS_SL command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_2*/
      break;
 800803a:	e010      	b.n	800805e <Custom_STM_App_Update_Char+0xd2>

    case CUSTOM_STM_HRS_CTRL:
      ret = aci_gatt_update_char_value(CustomContext.CustomMy_HrsHdle,
 800803c:	4b0a      	ldr	r3, [pc, #40]	@ (8008068 <Custom_STM_App_Update_Char+0xdc>)
 800803e:	88d8      	ldrh	r0, [r3, #6]
 8008040:	4b09      	ldr	r3, [pc, #36]	@ (8008068 <Custom_STM_App_Update_Char+0xdc>)
 8008042:	8999      	ldrh	r1, [r3, #12]
 8008044:	4b0d      	ldr	r3, [pc, #52]	@ (800807c <Custom_STM_App_Update_Char+0xf0>)
 8008046:	881b      	ldrh	r3, [r3, #0]
 8008048:	b2da      	uxtb	r2, r3
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	4613      	mov	r3, r2
 8008050:	2200      	movs	r2, #0
 8008052:	f7fd fee3 	bl	8005e1c <aci_gatt_update_char_value>
 8008056:	4603      	mov	r3, r0
 8008058:	73fb      	strb	r3, [r7, #15]
        APP_DBG_MSG("  Success: aci_gatt_update_char_value HRS_CTRL command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_2_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_2_Char_3*/
      break;
 800805a:	e000      	b.n	800805e <Custom_STM_App_Update_Char+0xd2>

    default:
      break;
 800805c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 800805e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	2000051c 	.word	0x2000051c
 800806c:	2000002c 	.word	0x2000002c
 8008070:	2000002e 	.word	0x2000002e
 8008074:	20000030 	.word	0x20000030
 8008078:	20000032 	.word	0x20000032
 800807c:	20000034 	.word	0x20000034

08008080 <LL_PWR_EnableBootC2>:
{
 8008080:	b480      	push	{r7}
 8008082:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8008084:	4b05      	ldr	r3, [pc, #20]	@ (800809c <LL_PWR_EnableBootC2+0x1c>)
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	4a04      	ldr	r2, [pc, #16]	@ (800809c <LL_PWR_EnableBootC2+0x1c>)
 800808a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800808e:	60d3      	str	r3, [r2, #12]
}
 8008090:	bf00      	nop
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	58000400 	.word	0x58000400

080080a0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80080a8:	4b06      	ldr	r3, [pc, #24]	@ (80080c4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80080aa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80080ae:	4905      	ldr	r1, [pc, #20]	@ (80080c4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 80080b8:	bf00      	nop
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr
 80080c4:	58000800 	.word	0x58000800

080080c8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80080d0:	4b05      	ldr	r3, [pc, #20]	@ (80080e8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80080d2:	6a1a      	ldr	r2, [r3, #32]
 80080d4:	4904      	ldr	r1, [pc, #16]	@ (80080e8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4313      	orrs	r3, r2
 80080da:	620b      	str	r3, [r1, #32]
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr
 80080e8:	58000800 	.word	0x58000800

080080ec <LL_AHB3_GRP1_EnableClock>:
{
 80080ec:	b480      	push	{r7}
 80080ee:	b085      	sub	sp, #20
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80080f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80080fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4313      	orrs	r3, r2
 8008102:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008104:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008108:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4013      	ands	r3, r2
 800810e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008110:	68fb      	ldr	r3, [r7, #12]
}
 8008112:	bf00      	nop
 8008114:	3714      	adds	r7, #20
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800811e:	b480      	push	{r7}
 8008120:	b085      	sub	sp, #20
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8008126:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800812a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800812e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	4313      	orrs	r3, r2
 8008136:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800813a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800813e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4013      	ands	r3, r2
 8008146:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008148:	68fb      	ldr	r3, [r7, #12]
}
 800814a:	bf00      	nop
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <LL_C1_IPCC_EnableIT_TXF>:
{
 8008156:	b480      	push	{r7}
 8008158:	b083      	sub	sp, #12
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	601a      	str	r2, [r3, #0]
}
 800816a:	bf00      	nop
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr

08008176 <LL_C1_IPCC_EnableIT_RXO>:
{
 8008176:	b480      	push	{r7}
 8008178:	b083      	sub	sp, #12
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f043 0201 	orr.w	r2, r3, #1
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	601a      	str	r2, [r3, #0]
}
 800818a:	bf00      	nop
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8008196:	b480      	push	{r7}
 8008198:	b083      	sub	sp, #12
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685a      	ldr	r2, [r3, #4]
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	041b      	lsls	r3, r3, #16
 80081a8:	43db      	mvns	r3, r3
 80081aa:	401a      	ands	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	605a      	str	r2, [r3, #4]
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <LL_C1_IPCC_DisableTransmitChannel>:
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	685a      	ldr	r2, [r3, #4]
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	041b      	lsls	r3, r3, #16
 80081ce:	431a      	orrs	r2, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	605a      	str	r2, [r3, #4]
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	43db      	mvns	r3, r3
 80081f2:	401a      	ands	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	605a      	str	r2, [r3, #4]
}
 80081f8:	bf00      	nop
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	683a      	ldr	r2, [r7, #0]
 8008212:	609a      	str	r2, [r3, #8]
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <LL_C1_IPCC_SetFlag_CHx>:
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	041a      	lsls	r2, r3, #16
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	609a      	str	r2, [r3, #8]
}
 8008232:	bf00      	nop
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800823e:	b480      	push	{r7}
 8008240:	b083      	sub	sp, #12
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	68da      	ldr	r2, [r3, #12]
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	4013      	ands	r3, r2
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	429a      	cmp	r2, r3
 8008254:	d101      	bne.n	800825a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8008256:	2301      	movs	r3, #1
 8008258:	e000      	b.n	800825c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	69da      	ldr	r2, [r3, #28]
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	4013      	ands	r3, r2
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	429a      	cmp	r2, r3
 800827e:	d101      	bne.n	8008284 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8008280:	2301      	movs	r3, #1
 8008282:	e000      	b.n	8008286 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	370c      	adds	r7, #12
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
	...

08008294 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8008298:	2102      	movs	r1, #2
 800829a:	4818      	ldr	r0, [pc, #96]	@ (80082fc <HW_IPCC_Rx_Handler+0x68>)
 800829c:	f7ff ffe4 	bl	8008268 <LL_C2_IPCC_IsActiveFlag_CHx>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d008      	beq.n	80082b8 <HW_IPCC_Rx_Handler+0x24>
 80082a6:	4b15      	ldr	r3, [pc, #84]	@ (80082fc <HW_IPCC_Rx_Handler+0x68>)
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f003 0302 	and.w	r3, r3, #2
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d102      	bne.n	80082b8 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80082b2:	f000 f8d5 	bl	8008460 <HW_IPCC_SYS_EvtHandler>
 80082b6:	e01e      	b.n	80082f6 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80082b8:	2101      	movs	r1, #1
 80082ba:	4810      	ldr	r0, [pc, #64]	@ (80082fc <HW_IPCC_Rx_Handler+0x68>)
 80082bc:	f7ff ffd4 	bl	8008268 <LL_C2_IPCC_IsActiveFlag_CHx>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d008      	beq.n	80082d8 <HW_IPCC_Rx_Handler+0x44>
 80082c6:	4b0d      	ldr	r3, [pc, #52]	@ (80082fc <HW_IPCC_Rx_Handler+0x68>)
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	f003 0301 	and.w	r3, r3, #1
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d102      	bne.n	80082d8 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80082d2:	f000 f889 	bl	80083e8 <HW_IPCC_BLE_EvtHandler>
 80082d6:	e00e      	b.n	80082f6 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80082d8:	2108      	movs	r1, #8
 80082da:	4808      	ldr	r0, [pc, #32]	@ (80082fc <HW_IPCC_Rx_Handler+0x68>)
 80082dc:	f7ff ffc4 	bl	8008268 <LL_C2_IPCC_IsActiveFlag_CHx>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d008      	beq.n	80082f8 <HW_IPCC_Rx_Handler+0x64>
 80082e6:	4b05      	ldr	r3, [pc, #20]	@ (80082fc <HW_IPCC_Rx_Handler+0x68>)
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	f003 0308 	and.w	r3, r3, #8
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d102      	bne.n	80082f8 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80082f2:	f000 f901 	bl	80084f8 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80082f6:	bf00      	nop
 80082f8:	bf00      	nop
}
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	58000c00 	.word	0x58000c00

08008300 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8008300:	b580      	push	{r7, lr}
 8008302:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8008304:	2102      	movs	r1, #2
 8008306:	4818      	ldr	r0, [pc, #96]	@ (8008368 <HW_IPCC_Tx_Handler+0x68>)
 8008308:	f7ff ff99 	bl	800823e <LL_C1_IPCC_IsActiveFlag_CHx>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d108      	bne.n	8008324 <HW_IPCC_Tx_Handler+0x24>
 8008312:	4b15      	ldr	r3, [pc, #84]	@ (8008368 <HW_IPCC_Tx_Handler+0x68>)
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d102      	bne.n	8008324 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800831e:	f000 f893 	bl	8008448 <HW_IPCC_SYS_CmdEvtHandler>
 8008322:	e01e      	b.n	8008362 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8008324:	2108      	movs	r1, #8
 8008326:	4810      	ldr	r0, [pc, #64]	@ (8008368 <HW_IPCC_Tx_Handler+0x68>)
 8008328:	f7ff ff89 	bl	800823e <LL_C1_IPCC_IsActiveFlag_CHx>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d108      	bne.n	8008344 <HW_IPCC_Tx_Handler+0x44>
 8008332:	4b0d      	ldr	r3, [pc, #52]	@ (8008368 <HW_IPCC_Tx_Handler+0x68>)
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800833a:	2b00      	cmp	r3, #0
 800833c:	d102      	bne.n	8008344 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800833e:	f000 f8bd 	bl	80084bc <HW_IPCC_MM_FreeBufHandler>
 8008342:	e00e      	b.n	8008362 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8008344:	2120      	movs	r1, #32
 8008346:	4808      	ldr	r0, [pc, #32]	@ (8008368 <HW_IPCC_Tx_Handler+0x68>)
 8008348:	f7ff ff79 	bl	800823e <LL_C1_IPCC_IsActiveFlag_CHx>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d108      	bne.n	8008364 <HW_IPCC_Tx_Handler+0x64>
 8008352:	4b05      	ldr	r3, [pc, #20]	@ (8008368 <HW_IPCC_Tx_Handler+0x68>)
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800835a:	2b00      	cmp	r3, #0
 800835c:	d102      	bne.n	8008364 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800835e:	f000 f84f 	bl	8008400 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8008362:	bf00      	nop
 8008364:	bf00      	nop
}
 8008366:	bd80      	pop	{r7, pc}
 8008368:	58000c00 	.word	0x58000c00

0800836c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8008370:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8008374:	f7ff fed3 	bl	800811e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8008378:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800837c:	f7ff fea4 	bl	80080c8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8008380:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008384:	f7ff fe8c 	bl	80080a0 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8008388:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800838a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800838c:	f7ff fe78 	bl	8008080 <LL_PWR_EnableBootC2>

  return;
 8008390:	bf00      	nop
}
 8008392:	bd80      	pop	{r7, pc}

08008394 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8008394:	b580      	push	{r7, lr}
 8008396:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8008398:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800839c:	f7ff fea6 	bl	80080ec <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80083a0:	4806      	ldr	r0, [pc, #24]	@ (80083bc <HW_IPCC_Init+0x28>)
 80083a2:	f7ff fee8 	bl	8008176 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80083a6:	4805      	ldr	r0, [pc, #20]	@ (80083bc <HW_IPCC_Init+0x28>)
 80083a8:	f7ff fed5 	bl	8008156 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80083ac:	202c      	movs	r0, #44	@ 0x2c
 80083ae:	f7fa fcfe 	bl	8002dae <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80083b2:	202d      	movs	r0, #45	@ 0x2d
 80083b4:	f7fa fcfb 	bl	8002dae <HAL_NVIC_EnableIRQ>

  return;
 80083b8:	bf00      	nop
}
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	58000c00 	.word	0x58000c00

080083c0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80083c4:	2101      	movs	r1, #1
 80083c6:	4802      	ldr	r0, [pc, #8]	@ (80083d0 <HW_IPCC_BLE_Init+0x10>)
 80083c8:	f7ff ff0a 	bl	80081e0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80083cc:	bf00      	nop
}
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	58000c00 	.word	0x58000c00

080083d4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80083d8:	2101      	movs	r1, #1
 80083da:	4802      	ldr	r0, [pc, #8]	@ (80083e4 <HW_IPCC_BLE_SendCmd+0x10>)
 80083dc:	f7ff ff20 	bl	8008220 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80083e0:	bf00      	nop
}
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	58000c00 	.word	0x58000c00

080083e8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80083ec:	f7fe fd88 	bl	8006f00 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80083f0:	2101      	movs	r1, #1
 80083f2:	4802      	ldr	r0, [pc, #8]	@ (80083fc <HW_IPCC_BLE_EvtHandler+0x14>)
 80083f4:	f7ff ff06 	bl	8008204 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80083f8:	bf00      	nop
}
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	58000c00 	.word	0x58000c00

08008400 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8008404:	2120      	movs	r1, #32
 8008406:	4803      	ldr	r0, [pc, #12]	@ (8008414 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8008408:	f7ff fed8 	bl	80081bc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800840c:	f7fe fda8 	bl	8006f60 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8008410:	bf00      	nop
}
 8008412:	bd80      	pop	{r7, pc}
 8008414:	58000c00 	.word	0x58000c00

08008418 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800841c:	2102      	movs	r1, #2
 800841e:	4802      	ldr	r0, [pc, #8]	@ (8008428 <HW_IPCC_SYS_Init+0x10>)
 8008420:	f7ff fede 	bl	80081e0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8008424:	bf00      	nop
}
 8008426:	bd80      	pop	{r7, pc}
 8008428:	58000c00 	.word	0x58000c00

0800842c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800842c:	b580      	push	{r7, lr}
 800842e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008430:	2102      	movs	r1, #2
 8008432:	4804      	ldr	r0, [pc, #16]	@ (8008444 <HW_IPCC_SYS_SendCmd+0x18>)
 8008434:	f7ff fef4 	bl	8008220 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8008438:	2102      	movs	r1, #2
 800843a:	4802      	ldr	r0, [pc, #8]	@ (8008444 <HW_IPCC_SYS_SendCmd+0x18>)
 800843c:	f7ff feab 	bl	8008196 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8008440:	bf00      	nop
}
 8008442:	bd80      	pop	{r7, pc}
 8008444:	58000c00 	.word	0x58000c00

08008448 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800844c:	2102      	movs	r1, #2
 800844e:	4803      	ldr	r0, [pc, #12]	@ (800845c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8008450:	f7ff feb4 	bl	80081bc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8008454:	f7fe fdd4 	bl	8007000 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8008458:	bf00      	nop
}
 800845a:	bd80      	pop	{r7, pc}
 800845c:	58000c00 	.word	0x58000c00

08008460 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8008464:	f7fe fde2 	bl	800702c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8008468:	2102      	movs	r1, #2
 800846a:	4802      	ldr	r0, [pc, #8]	@ (8008474 <HW_IPCC_SYS_EvtHandler+0x14>)
 800846c:	f7ff feca 	bl	8008204 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008470:	bf00      	nop
}
 8008472:	bd80      	pop	{r7, pc}
 8008474:	58000c00 	.word	0x58000c00

08008478 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8008480:	2108      	movs	r1, #8
 8008482:	480c      	ldr	r0, [pc, #48]	@ (80084b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008484:	f7ff fedb 	bl	800823e <LL_C1_IPCC_IsActiveFlag_CHx>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d007      	beq.n	800849e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800848e:	4a0a      	ldr	r2, [pc, #40]	@ (80084b8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8008494:	2108      	movs	r1, #8
 8008496:	4807      	ldr	r0, [pc, #28]	@ (80084b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8008498:	f7ff fe7d 	bl	8008196 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800849c:	e006      	b.n	80084ac <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80084a2:	2108      	movs	r1, #8
 80084a4:	4803      	ldr	r0, [pc, #12]	@ (80084b4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80084a6:	f7ff febb 	bl	8008220 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80084aa:	bf00      	nop
}
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	58000c00 	.word	0x58000c00
 80084b8:	2000052c 	.word	0x2000052c

080084bc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80084c0:	2108      	movs	r1, #8
 80084c2:	4806      	ldr	r0, [pc, #24]	@ (80084dc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80084c4:	f7ff fe7a 	bl	80081bc <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80084c8:	4b05      	ldr	r3, [pc, #20]	@ (80084e0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80084ce:	2108      	movs	r1, #8
 80084d0:	4802      	ldr	r0, [pc, #8]	@ (80084dc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80084d2:	f7ff fea5 	bl	8008220 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80084d6:	bf00      	nop
}
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	58000c00 	.word	0x58000c00
 80084e0:	2000052c 	.word	0x2000052c

080084e4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80084e8:	2108      	movs	r1, #8
 80084ea:	4802      	ldr	r0, [pc, #8]	@ (80084f4 <HW_IPCC_TRACES_Init+0x10>)
 80084ec:	f7ff fe78 	bl	80081e0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80084f0:	bf00      	nop
}
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	58000c00 	.word	0x58000c00

080084f8 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80084fc:	f7fe fe3e 	bl	800717c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8008500:	2108      	movs	r1, #8
 8008502:	4802      	ldr	r0, [pc, #8]	@ (800850c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8008504:	f7ff fe7e 	bl	8008204 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8008508:	bf00      	nop
}
 800850a:	bd80      	pop	{r7, pc}
 800850c:	58000c00 	.word	0x58000c00

08008510 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8008510:	b480      	push	{r7}
 8008512:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8008514:	4b05      	ldr	r3, [pc, #20]	@ (800852c <UTIL_LPM_Init+0x1c>)
 8008516:	2200      	movs	r2, #0
 8008518:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800851a:	4b05      	ldr	r3, [pc, #20]	@ (8008530 <UTIL_LPM_Init+0x20>)
 800851c:	2200      	movs	r2, #0
 800851e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8008520:	bf00      	nop
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	20000530 	.word	0x20000530
 8008530:	20000534 	.word	0x20000534

08008534 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8008534:	b480      	push	{r7}
 8008536:	b087      	sub	sp, #28
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	460b      	mov	r3, r1
 800853e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008540:	f3ef 8310 	mrs	r3, PRIMASK
 8008544:	613b      	str	r3, [r7, #16]
  return(result);
 8008546:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8008548:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800854a:	b672      	cpsid	i
}
 800854c:	bf00      	nop
  
  switch(state)
 800854e:	78fb      	ldrb	r3, [r7, #3]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d008      	beq.n	8008566 <UTIL_LPM_SetOffMode+0x32>
 8008554:	2b01      	cmp	r3, #1
 8008556:	d10e      	bne.n	8008576 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008558:	4b0d      	ldr	r3, [pc, #52]	@ (8008590 <UTIL_LPM_SetOffMode+0x5c>)
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	4313      	orrs	r3, r2
 8008560:	4a0b      	ldr	r2, [pc, #44]	@ (8008590 <UTIL_LPM_SetOffMode+0x5c>)
 8008562:	6013      	str	r3, [r2, #0]
      break;
 8008564:	e008      	b.n	8008578 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	43da      	mvns	r2, r3
 800856a:	4b09      	ldr	r3, [pc, #36]	@ (8008590 <UTIL_LPM_SetOffMode+0x5c>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4013      	ands	r3, r2
 8008570:	4a07      	ldr	r2, [pc, #28]	@ (8008590 <UTIL_LPM_SetOffMode+0x5c>)
 8008572:	6013      	str	r3, [r2, #0]
      break;
 8008574:	e000      	b.n	8008578 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8008576:	bf00      	nop
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f383 8810 	msr	PRIMASK, r3
}
 8008582:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008584:	bf00      	nop
 8008586:	371c      	adds	r7, #28
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr
 8008590:	20000534 	.word	0x20000534

08008594 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b090      	sub	sp, #64	@ 0x40
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800859c:	4b73      	ldr	r3, [pc, #460]	@ (800876c <UTIL_SEQ_Run+0x1d8>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 80085a2:	4b72      	ldr	r3, [pc, #456]	@ (800876c <UTIL_SEQ_Run+0x1d8>)
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4013      	ands	r3, r2
 80085aa:	4a70      	ldr	r2, [pc, #448]	@ (800876c <UTIL_SEQ_Run+0x1d8>)
 80085ac:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80085ae:	4b70      	ldr	r3, [pc, #448]	@ (8008770 <UTIL_SEQ_Run+0x1dc>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80085b4:	4b6f      	ldr	r3, [pc, #444]	@ (8008774 <UTIL_SEQ_Run+0x1e0>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80085ba:	4b6f      	ldr	r3, [pc, #444]	@ (8008778 <UTIL_SEQ_Run+0x1e4>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 80085c0:	4b6e      	ldr	r3, [pc, #440]	@ (800877c <UTIL_SEQ_Run+0x1e8>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80085c6:	e08d      	b.n	80086e4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80085c8:	2300      	movs	r3, #0
 80085ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80085cc:	e002      	b.n	80085d4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80085ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085d0:	3301      	adds	r3, #1
 80085d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80085d4:	4a6a      	ldr	r2, [pc, #424]	@ (8008780 <UTIL_SEQ_Run+0x1ec>)
 80085d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085d8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80085dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085de:	401a      	ands	r2, r3
 80085e0:	4b62      	ldr	r3, [pc, #392]	@ (800876c <UTIL_SEQ_Run+0x1d8>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4013      	ands	r3, r2
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d0f1      	beq.n	80085ce <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80085ea:	4a65      	ldr	r2, [pc, #404]	@ (8008780 <UTIL_SEQ_Run+0x1ec>)
 80085ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085ee:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80085f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085f4:	401a      	ands	r2, r3
 80085f6:	4b5d      	ldr	r3, [pc, #372]	@ (800876c <UTIL_SEQ_Run+0x1d8>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4013      	ands	r3, r2
 80085fc:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80085fe:	4a60      	ldr	r2, [pc, #384]	@ (8008780 <UTIL_SEQ_Run+0x1ec>)
 8008600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008602:	00db      	lsls	r3, r3, #3
 8008604:	4413      	add	r3, r2
 8008606:	685a      	ldr	r2, [r3, #4]
 8008608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800860a:	4013      	ands	r3, r2
 800860c:	2b00      	cmp	r3, #0
 800860e:	d106      	bne.n	800861e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8008610:	4a5b      	ldr	r2, [pc, #364]	@ (8008780 <UTIL_SEQ_Run+0x1ec>)
 8008612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008614:	00db      	lsls	r3, r3, #3
 8008616:	4413      	add	r3, r2
 8008618:	f04f 32ff 	mov.w	r2, #4294967295
 800861c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800861e:	4a58      	ldr	r2, [pc, #352]	@ (8008780 <UTIL_SEQ_Run+0x1ec>)
 8008620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008622:	00db      	lsls	r3, r3, #3
 8008624:	4413      	add	r3, r2
 8008626:	685a      	ldr	r2, [r3, #4]
 8008628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862a:	4013      	ands	r3, r2
 800862c:	4618      	mov	r0, r3
 800862e:	f000 f9b3 	bl	8008998 <SEQ_BitPosition>
 8008632:	4603      	mov	r3, r0
 8008634:	461a      	mov	r2, r3
 8008636:	4b53      	ldr	r3, [pc, #332]	@ (8008784 <UTIL_SEQ_Run+0x1f0>)
 8008638:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800863a:	4a51      	ldr	r2, [pc, #324]	@ (8008780 <UTIL_SEQ_Run+0x1ec>)
 800863c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800863e:	00db      	lsls	r3, r3, #3
 8008640:	4413      	add	r3, r2
 8008642:	685a      	ldr	r2, [r3, #4]
 8008644:	4b4f      	ldr	r3, [pc, #316]	@ (8008784 <UTIL_SEQ_Run+0x1f0>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2101      	movs	r1, #1
 800864a:	fa01 f303 	lsl.w	r3, r1, r3
 800864e:	43db      	mvns	r3, r3
 8008650:	401a      	ands	r2, r3
 8008652:	494b      	ldr	r1, [pc, #300]	@ (8008780 <UTIL_SEQ_Run+0x1ec>)
 8008654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008656:	00db      	lsls	r3, r3, #3
 8008658:	440b      	add	r3, r1
 800865a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800865c:	f3ef 8310 	mrs	r3, PRIMASK
 8008660:	61bb      	str	r3, [r7, #24]
  return(result);
 8008662:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008664:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8008666:	b672      	cpsid	i
}
 8008668:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800866a:	4b46      	ldr	r3, [pc, #280]	@ (8008784 <UTIL_SEQ_Run+0x1f0>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2201      	movs	r2, #1
 8008670:	fa02 f303 	lsl.w	r3, r2, r3
 8008674:	43da      	mvns	r2, r3
 8008676:	4b3e      	ldr	r3, [pc, #248]	@ (8008770 <UTIL_SEQ_Run+0x1dc>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4013      	ands	r3, r2
 800867c:	4a3c      	ldr	r2, [pc, #240]	@ (8008770 <UTIL_SEQ_Run+0x1dc>)
 800867e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008680:	2302      	movs	r3, #2
 8008682:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008684:	e013      	b.n	80086ae <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8008686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008688:	3b01      	subs	r3, #1
 800868a:	4a3d      	ldr	r2, [pc, #244]	@ (8008780 <UTIL_SEQ_Run+0x1ec>)
 800868c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8008690:	4b3c      	ldr	r3, [pc, #240]	@ (8008784 <UTIL_SEQ_Run+0x1f0>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2201      	movs	r2, #1
 8008696:	fa02 f303 	lsl.w	r3, r2, r3
 800869a:	43da      	mvns	r2, r3
 800869c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800869e:	3b01      	subs	r3, #1
 80086a0:	400a      	ands	r2, r1
 80086a2:	4937      	ldr	r1, [pc, #220]	@ (8008780 <UTIL_SEQ_Run+0x1ec>)
 80086a4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80086a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086aa:	3b01      	subs	r3, #1
 80086ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80086ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d1e8      	bne.n	8008686 <UTIL_SEQ_Run+0xf2>
 80086b4:	6a3b      	ldr	r3, [r7, #32]
 80086b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	f383 8810 	msr	PRIMASK, r3
}
 80086be:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80086c0:	4b30      	ldr	r3, [pc, #192]	@ (8008784 <UTIL_SEQ_Run+0x1f0>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	4a30      	ldr	r2, [pc, #192]	@ (8008788 <UTIL_SEQ_Run+0x1f4>)
 80086c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086ca:	4798      	blx	r3

    local_taskset = TaskSet;
 80086cc:	4b28      	ldr	r3, [pc, #160]	@ (8008770 <UTIL_SEQ_Run+0x1dc>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 80086d2:	4b28      	ldr	r3, [pc, #160]	@ (8008774 <UTIL_SEQ_Run+0x1e0>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80086d8:	4b27      	ldr	r3, [pc, #156]	@ (8008778 <UTIL_SEQ_Run+0x1e4>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80086de:	4b27      	ldr	r3, [pc, #156]	@ (800877c <UTIL_SEQ_Run+0x1e8>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80086e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80086e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e8:	401a      	ands	r2, r3
 80086ea:	4b20      	ldr	r3, [pc, #128]	@ (800876c <UTIL_SEQ_Run+0x1d8>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4013      	ands	r3, r2
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d005      	beq.n	8008700 <UTIL_SEQ_Run+0x16c>
 80086f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80086f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f8:	4013      	ands	r3, r2
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	f43f af64 	beq.w	80085c8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8008700:	4b20      	ldr	r3, [pc, #128]	@ (8008784 <UTIL_SEQ_Run+0x1f0>)
 8008702:	f04f 32ff 	mov.w	r2, #4294967295
 8008706:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8008708:	f000 f938 	bl	800897c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800870c:	f3ef 8310 	mrs	r3, PRIMASK
 8008710:	613b      	str	r3, [r7, #16]
  return(result);
 8008712:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8008714:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8008716:	b672      	cpsid	i
}
 8008718:	bf00      	nop
  local_taskset = TaskSet;
 800871a:	4b15      	ldr	r3, [pc, #84]	@ (8008770 <UTIL_SEQ_Run+0x1dc>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8008720:	4b14      	ldr	r3, [pc, #80]	@ (8008774 <UTIL_SEQ_Run+0x1e0>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8008726:	4b14      	ldr	r3, [pc, #80]	@ (8008778 <UTIL_SEQ_Run+0x1e4>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800872c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800872e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008730:	401a      	ands	r2, r3
 8008732:	4b0e      	ldr	r3, [pc, #56]	@ (800876c <UTIL_SEQ_Run+0x1d8>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4013      	ands	r3, r2
 8008738:	2b00      	cmp	r3, #0
 800873a:	d107      	bne.n	800874c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800873c:	4b0f      	ldr	r3, [pc, #60]	@ (800877c <UTIL_SEQ_Run+0x1e8>)
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008742:	4013      	ands	r3, r2
 8008744:	2b00      	cmp	r3, #0
 8008746:	d101      	bne.n	800874c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8008748:	f7f8 f887 	bl	800085a <UTIL_SEQ_Idle>
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f383 8810 	msr	PRIMASK, r3
}
 8008756:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8008758:	f000 f917 	bl	800898a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800875c:	4a03      	ldr	r2, [pc, #12]	@ (800876c <UTIL_SEQ_Run+0x1d8>)
 800875e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008760:	6013      	str	r3, [r2, #0]

  return;
 8008762:	bf00      	nop
}
 8008764:	3740      	adds	r7, #64	@ 0x40
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	2000003c 	.word	0x2000003c
 8008770:	20000538 	.word	0x20000538
 8008774:	2000053c 	.word	0x2000053c
 8008778:	20000038 	.word	0x20000038
 800877c:	20000540 	.word	0x20000540
 8008780:	200005c8 	.word	0x200005c8
 8008784:	20000544 	.word	0x20000544
 8008788:	20000548 	.word	0x20000548

0800878c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b088      	sub	sp, #32
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008798:	f3ef 8310 	mrs	r3, PRIMASK
 800879c:	617b      	str	r3, [r7, #20]
  return(result);
 800879e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80087a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80087a2:	b672      	cpsid	i
}
 80087a4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80087a6:	68f8      	ldr	r0, [r7, #12]
 80087a8:	f000 f8f6 	bl	8008998 <SEQ_BitPosition>
 80087ac:	4603      	mov	r3, r0
 80087ae:	4619      	mov	r1, r3
 80087b0:	4a06      	ldr	r2, [pc, #24]	@ (80087cc <UTIL_SEQ_RegTask+0x40>)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	f383 8810 	msr	PRIMASK, r3
}
 80087c2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80087c4:	bf00      	nop
}
 80087c6:	3720      	adds	r7, #32
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	20000548 	.word	0x20000548

080087d0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087da:	f3ef 8310 	mrs	r3, PRIMASK
 80087de:	60fb      	str	r3, [r7, #12]
  return(result);
 80087e0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80087e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80087e4:	b672      	cpsid	i
}
 80087e6:	bf00      	nop

  TaskSet |= TaskId_bm;
 80087e8:	4b0d      	ldr	r3, [pc, #52]	@ (8008820 <UTIL_SEQ_SetTask+0x50>)
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4313      	orrs	r3, r2
 80087f0:	4a0b      	ldr	r2, [pc, #44]	@ (8008820 <UTIL_SEQ_SetTask+0x50>)
 80087f2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80087f4:	4a0b      	ldr	r2, [pc, #44]	@ (8008824 <UTIL_SEQ_SetTask+0x54>)
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	431a      	orrs	r2, r3
 8008800:	4908      	ldr	r1, [pc, #32]	@ (8008824 <UTIL_SEQ_SetTask+0x54>)
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	f383 8810 	msr	PRIMASK, r3
}
 8008812:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008814:	bf00      	nop
}
 8008816:	371c      	adds	r7, #28
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr
 8008820:	20000538 	.word	0x20000538
 8008824:	200005c8 	.word	0x200005c8

08008828 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008828:	b480      	push	{r7}
 800882a:	b087      	sub	sp, #28
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008830:	f3ef 8310 	mrs	r3, PRIMASK
 8008834:	60fb      	str	r3, [r7, #12]
  return(result);
 8008836:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008838:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800883a:	b672      	cpsid	i
}
 800883c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	43da      	mvns	r2, r3
 8008842:	4b08      	ldr	r3, [pc, #32]	@ (8008864 <UTIL_SEQ_PauseTask+0x3c>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4013      	ands	r3, r2
 8008848:	4a06      	ldr	r2, [pc, #24]	@ (8008864 <UTIL_SEQ_PauseTask+0x3c>)
 800884a:	6013      	str	r3, [r2, #0]
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	f383 8810 	msr	PRIMASK, r3
}
 8008856:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008858:	bf00      	nop
}
 800885a:	371c      	adds	r7, #28
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr
 8008864:	20000038 	.word	0x20000038

08008868 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8008868:	b480      	push	{r7}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008870:	f3ef 8310 	mrs	r3, PRIMASK
 8008874:	60fb      	str	r3, [r7, #12]
  return(result);
 8008876:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008878:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800887a:	b672      	cpsid	i
}
 800887c:	bf00      	nop

  TaskMask |= TaskId_bm;
 800887e:	4b09      	ldr	r3, [pc, #36]	@ (80088a4 <UTIL_SEQ_ResumeTask+0x3c>)
 8008880:	681a      	ldr	r2, [r3, #0]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4313      	orrs	r3, r2
 8008886:	4a07      	ldr	r2, [pc, #28]	@ (80088a4 <UTIL_SEQ_ResumeTask+0x3c>)
 8008888:	6013      	str	r3, [r2, #0]
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	f383 8810 	msr	PRIMASK, r3
}
 8008894:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8008896:	bf00      	nop
}
 8008898:	371c      	adds	r7, #28
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	20000038 	.word	0x20000038

080088a8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80088a8:	b480      	push	{r7}
 80088aa:	b087      	sub	sp, #28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088b0:	f3ef 8310 	mrs	r3, PRIMASK
 80088b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80088b6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80088b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80088ba:	b672      	cpsid	i
}
 80088bc:	bf00      	nop

  EvtSet |= EvtId_bm;
 80088be:	4b09      	ldr	r3, [pc, #36]	@ (80088e4 <UTIL_SEQ_SetEvt+0x3c>)
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	4a07      	ldr	r2, [pc, #28]	@ (80088e4 <UTIL_SEQ_SetEvt+0x3c>)
 80088c8:	6013      	str	r3, [r2, #0]
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	f383 8810 	msr	PRIMASK, r3
}
 80088d4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80088d6:	bf00      	nop
}
 80088d8:	371c      	adds	r7, #28
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	2000053c 	.word	0x2000053c

080088e8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b088      	sub	sp, #32
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80088f0:	4b1f      	ldr	r3, [pc, #124]	@ (8008970 <UTIL_SEQ_WaitEvt+0x88>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80088f6:	4b1e      	ldr	r3, [pc, #120]	@ (8008970 <UTIL_SEQ_WaitEvt+0x88>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088fe:	d102      	bne.n	8008906 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8008900:	2300      	movs	r3, #0
 8008902:	61fb      	str	r3, [r7, #28]
 8008904:	e005      	b.n	8008912 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8008906:	4b1a      	ldr	r3, [pc, #104]	@ (8008970 <UTIL_SEQ_WaitEvt+0x88>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2201      	movs	r2, #1
 800890c:	fa02 f303 	lsl.w	r3, r2, r3
 8008910:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8008912:	4b18      	ldr	r3, [pc, #96]	@ (8008974 <UTIL_SEQ_WaitEvt+0x8c>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8008918:	4a16      	ldr	r2, [pc, #88]	@ (8008974 <UTIL_SEQ_WaitEvt+0x8c>)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800891e:	e003      	b.n	8008928 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8008920:	6879      	ldr	r1, [r7, #4]
 8008922:	69f8      	ldr	r0, [r7, #28]
 8008924:	f7f7 ffa0 	bl	8000868 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8008928:	4b13      	ldr	r3, [pc, #76]	@ (8008978 <UTIL_SEQ_WaitEvt+0x90>)
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4013      	ands	r3, r2
 8008930:	2b00      	cmp	r3, #0
 8008932:	d0f5      	beq.n	8008920 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8008934:	4a0e      	ldr	r2, [pc, #56]	@ (8008970 <UTIL_SEQ_WaitEvt+0x88>)
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800893a:	f3ef 8310 	mrs	r3, PRIMASK
 800893e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008940:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8008942:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008944:	b672      	cpsid	i
}
 8008946:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	43da      	mvns	r2, r3
 800894c:	4b0a      	ldr	r3, [pc, #40]	@ (8008978 <UTIL_SEQ_WaitEvt+0x90>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4013      	ands	r3, r2
 8008952:	4a09      	ldr	r2, [pc, #36]	@ (8008978 <UTIL_SEQ_WaitEvt+0x90>)
 8008954:	6013      	str	r3, [r2, #0]
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f383 8810 	msr	PRIMASK, r3
}
 8008960:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8008962:	4a04      	ldr	r2, [pc, #16]	@ (8008974 <UTIL_SEQ_WaitEvt+0x8c>)
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	6013      	str	r3, [r2, #0]
  return;
 8008968:	bf00      	nop
}
 800896a:	3720      	adds	r7, #32
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	20000544 	.word	0x20000544
 8008974:	20000540 	.word	0x20000540
 8008978:	2000053c 	.word	0x2000053c

0800897c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800897c:	b480      	push	{r7}
 800897e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8008980:	bf00      	nop
}
 8008982:	46bd      	mov	sp, r7
 8008984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008988:	4770      	bx	lr

0800898a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800898a:	b480      	push	{r7}
 800898c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800898e:	bf00      	nop
}
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80089a0:	2300      	movs	r3, #0
 80089a2:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089ae:	d204      	bcs.n	80089ba <SEQ_BitPosition+0x22>
 80089b0:	2310      	movs	r3, #16
 80089b2:	73fb      	strb	r3, [r7, #15]
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	041b      	lsls	r3, r3, #16
 80089b8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089c0:	d205      	bcs.n	80089ce <SEQ_BitPosition+0x36>
 80089c2:	7bfb      	ldrb	r3, [r7, #15]
 80089c4:	3308      	adds	r3, #8
 80089c6:	73fb      	strb	r3, [r7, #15]
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	021b      	lsls	r3, r3, #8
 80089cc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089d4:	d205      	bcs.n	80089e2 <SEQ_BitPosition+0x4a>
 80089d6:	7bfb      	ldrb	r3, [r7, #15]
 80089d8:	3304      	adds	r3, #4
 80089da:	73fb      	strb	r3, [r7, #15]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	011b      	lsls	r3, r3, #4
 80089e0:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	0f1b      	lsrs	r3, r3, #28
 80089e6:	4a07      	ldr	r2, [pc, #28]	@ (8008a04 <SEQ_BitPosition+0x6c>)
 80089e8:	5cd2      	ldrb	r2, [r2, r3]
 80089ea:	7bfb      	ldrb	r3, [r7, #15]
 80089ec:	4413      	add	r3, r2
 80089ee:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
 80089f2:	f1c3 031f 	rsb	r3, r3, #31
 80089f6:	b2db      	uxtb	r3, r3
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3714      	adds	r7, #20
 80089fc:	46bd      	mov	sp, r7
 80089fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a02:	4770      	bx	lr
 8008a04:	08008cf8 	.word	0x08008cf8

08008a08 <memset>:
 8008a08:	4402      	add	r2, r0
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d100      	bne.n	8008a12 <memset+0xa>
 8008a10:	4770      	bx	lr
 8008a12:	f803 1b01 	strb.w	r1, [r3], #1
 8008a16:	e7f9      	b.n	8008a0c <memset+0x4>

08008a18 <__libc_init_array>:
 8008a18:	b570      	push	{r4, r5, r6, lr}
 8008a1a:	4d0d      	ldr	r5, [pc, #52]	@ (8008a50 <__libc_init_array+0x38>)
 8008a1c:	4c0d      	ldr	r4, [pc, #52]	@ (8008a54 <__libc_init_array+0x3c>)
 8008a1e:	1b64      	subs	r4, r4, r5
 8008a20:	10a4      	asrs	r4, r4, #2
 8008a22:	2600      	movs	r6, #0
 8008a24:	42a6      	cmp	r6, r4
 8008a26:	d109      	bne.n	8008a3c <__libc_init_array+0x24>
 8008a28:	4d0b      	ldr	r5, [pc, #44]	@ (8008a58 <__libc_init_array+0x40>)
 8008a2a:	4c0c      	ldr	r4, [pc, #48]	@ (8008a5c <__libc_init_array+0x44>)
 8008a2c:	f000 f826 	bl	8008a7c <_init>
 8008a30:	1b64      	subs	r4, r4, r5
 8008a32:	10a4      	asrs	r4, r4, #2
 8008a34:	2600      	movs	r6, #0
 8008a36:	42a6      	cmp	r6, r4
 8008a38:	d105      	bne.n	8008a46 <__libc_init_array+0x2e>
 8008a3a:	bd70      	pop	{r4, r5, r6, pc}
 8008a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a40:	4798      	blx	r3
 8008a42:	3601      	adds	r6, #1
 8008a44:	e7ee      	b.n	8008a24 <__libc_init_array+0xc>
 8008a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a4a:	4798      	blx	r3
 8008a4c:	3601      	adds	r6, #1
 8008a4e:	e7f2      	b.n	8008a36 <__libc_init_array+0x1e>
 8008a50:	08008d10 	.word	0x08008d10
 8008a54:	08008d10 	.word	0x08008d10
 8008a58:	08008d10 	.word	0x08008d10
 8008a5c:	08008d14 	.word	0x08008d14

08008a60 <memcpy>:
 8008a60:	440a      	add	r2, r1
 8008a62:	4291      	cmp	r1, r2
 8008a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a68:	d100      	bne.n	8008a6c <memcpy+0xc>
 8008a6a:	4770      	bx	lr
 8008a6c:	b510      	push	{r4, lr}
 8008a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a76:	4291      	cmp	r1, r2
 8008a78:	d1f9      	bne.n	8008a6e <memcpy+0xe>
 8008a7a:	bd10      	pop	{r4, pc}

08008a7c <_init>:
 8008a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7e:	bf00      	nop
 8008a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a82:	bc08      	pop	{r3}
 8008a84:	469e      	mov	lr, r3
 8008a86:	4770      	bx	lr

08008a88 <_fini>:
 8008a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8a:	bf00      	nop
 8008a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8e:	bc08      	pop	{r3}
 8008a90:	469e      	mov	lr, r3
 8008a92:	4770      	bx	lr
